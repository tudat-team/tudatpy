/*    Copyright (c) 2010-2020, Delft University of Technology
 *    All rights reserved
 *
 *    This file is part of the Tudat. Redistribution and use in source and
 *    binary forms, with or without modification, are permitted exclusively
 *    under the terms of the Modified BSD license. You should have received
 *    a copy of the license with this file. If not, please or visit:
 *    http://tudat.tudelft.nl/LICENSE.
 */

#include <pybind11/pybind11.h>

#include "expose_spice_exceptions.h"
#include <tudat/interface/spice/spiceException.h>

namespace py = pybind11;
namespace te = tudat::exceptions;

namespace tudatpy
{
namespace exceptions
{

void expose_spice_exceptions( py::module& m )
{
    auto spiceErrorExp = py::register_exception< te::SpiceError >( m, "SpiceError", PyExc_RuntimeError );
    spiceErrorExp.doc( ) = R"(Base Error thrown by SPICE.)";

    auto spiceADDRESSOUTOFBOUNDSExp = py::register_exception<te::SpiceADDRESSOUTOFBOUNDS>(m, "SpiceADDRESSOUTOFBOUNDS", spiceErrorExp.ptr());
    spiceADDRESSOUTOFBOUNDSExp.doc() = R"(ADDRESSOUTOFBOUNDS Error thrown by SPICE.)";
    auto spiceAGENTLISTOVERFLOWExp = py::register_exception<te::SpiceAGENTLISTOVERFLOW>(m, "SpiceAGENTLISTOVERFLOW", spiceErrorExp.ptr());
    spiceAGENTLISTOVERFLOWExp.doc() = R"(AGENTLISTOVERFLOW Error thrown by SPICE.)";
    auto spiceALLGONEExp = py::register_exception<te::SpiceALLGONE>(m, "SpiceALLGONE", spiceErrorExp.ptr());
    spiceALLGONEExp.doc() = R"(ALLGONE Error thrown by SPICE.)";
    auto spiceAMBIGTEMPLExp = py::register_exception<te::SpiceAMBIGTEMPL>(m, "SpiceAMBIGTEMPL", spiceErrorExp.ptr());
    spiceAMBIGTEMPLExp.doc() = R"(AMBIGTEMPL Error thrown by SPICE.)";
    auto spiceARRAYSIZEMISMATCHExp = py::register_exception<te::SpiceARRAYSIZEMISMATCH>(m, "SpiceARRAYSIZEMISMATCH", spiceErrorExp.ptr());
    spiceARRAYSIZEMISMATCHExp.doc() = R"(ARRAYSIZEMISMATCH Error thrown by SPICE.)";
    auto spiceARRAYTOOSMALLExp = py::register_exception<te::SpiceARRAYTOOSMALL>(m, "SpiceARRAYTOOSMALL", spiceErrorExp.ptr());
    spiceARRAYTOOSMALLExp.doc() = R"(ARRAYTOOSMALL Error thrown by SPICE.)";
    auto spiceAVALOUTOFRANGEExp = py::register_exception<te::SpiceAVALOUTOFRANGE>(m, "SpiceAVALOUTOFRANGE", spiceErrorExp.ptr());
    spiceAVALOUTOFRANGEExp.doc() = R"(AVALOUTOFRANGE Error thrown by SPICE.)";
    auto spiceAXISUNDERFLOWExp = py::register_exception<te::SpiceAXISUNDERFLOW>(m, "SpiceAXISUNDERFLOW", spiceErrorExp.ptr());
    spiceAXISUNDERFLOWExp.doc() = R"(AXISUNDERFLOW Error thrown by SPICE.)";
    auto spiceBADACTIONExp = py::register_exception<te::SpiceBADACTION>(m, "SpiceBADACTION", spiceErrorExp.ptr());
    spiceBADACTIONExp.doc() = R"(BADACTION Error thrown by SPICE.)";
    auto spiceBADADDRESSExp = py::register_exception<te::SpiceBADADDRESS>(m, "SpiceBADADDRESS", spiceErrorExp.ptr());
    spiceBADADDRESSExp.doc() = R"(BADADDRESS Error thrown by SPICE.)";
    auto spiceBADANGLEExp = py::register_exception<te::SpiceBADANGLE>(m, "SpiceBADANGLE", spiceErrorExp.ptr());
    spiceBADANGLEExp.doc() = R"(BADANGLE Error thrown by SPICE.)";
    auto spiceBADANGLEUNITSExp = py::register_exception<te::SpiceBADANGLEUNITS>(m, "SpiceBADANGLEUNITS", spiceErrorExp.ptr());
    spiceBADANGLEUNITSExp.doc() = R"(BADANGLEUNITS Error thrown by SPICE.)";
    auto spiceBADANGRATEERRORExp = py::register_exception<te::SpiceBADANGRATEERROR>(m, "SpiceBADANGRATEERROR", spiceErrorExp.ptr());
    spiceBADANGRATEERRORExp.doc() = R"(BADANGRATEERROR Error thrown by SPICE.)";
    auto spiceBADANGULARRATEExp = py::register_exception<te::SpiceBADANGULARRATE>(m, "SpiceBADANGULARRATE", spiceErrorExp.ptr());
    spiceBADANGULARRATEExp.doc() = R"(BADANGULARRATE Error thrown by SPICE.)";
    auto spiceBADANGULARRATEFLAGExp = py::register_exception<te::SpiceBADANGULARRATEFLAG>(m, "SpiceBADANGULARRATEFLAG", spiceErrorExp.ptr());
    spiceBADANGULARRATEFLAGExp.doc() = R"(BADANGULARRATEFLAG Error thrown by SPICE.)";
    auto spiceBADARCHITECTUREExp = py::register_exception<te::SpiceBADARCHITECTURE>(m, "SpiceBADARCHITECTURE", spiceErrorExp.ptr());
    spiceBADARCHITECTUREExp.doc() = R"(BADARCHITECTURE Error thrown by SPICE.)";
    auto spiceBADARRAYSIZEExp = py::register_exception<te::SpiceBADARRAYSIZE>(m, "SpiceBADARRAYSIZE", spiceErrorExp.ptr());
    spiceBADARRAYSIZEExp.doc() = R"(BADARRAYSIZE Error thrown by SPICE.)";
    auto spiceBADATTIMEExp = py::register_exception<te::SpiceBADATTIME>(m, "SpiceBADATTIME", spiceErrorExp.ptr());
    spiceBADATTIMEExp.doc() = R"(BADATTIME Error thrown by SPICE.)";
    auto spiceBADATTRIBUTEExp = py::register_exception<te::SpiceBADATTRIBUTE>(m, "SpiceBADATTRIBUTE", spiceErrorExp.ptr());
    spiceBADATTRIBUTEExp.doc() = R"(BADATTRIBUTE Error thrown by SPICE.)";
    auto spiceBADATTRIBUTESExp = py::register_exception<te::SpiceBADATTRIBUTES>(m, "SpiceBADATTRIBUTES", spiceErrorExp.ptr());
    spiceBADATTRIBUTESExp.doc() = R"(BADATTRIBUTES Error thrown by SPICE.)";
    auto spiceBADAUVALUEExp = py::register_exception<te::SpiceBADAUVALUE>(m, "SpiceBADAUVALUE", spiceErrorExp.ptr());
    spiceBADAUVALUEExp.doc() = R"(BADAUVALUE Error thrown by SPICE.)";
    auto spiceBADAVFLAGExp = py::register_exception<te::SpiceBADAVFLAG>(m, "SpiceBADAVFLAG", spiceErrorExp.ptr());
    spiceBADAVFLAGExp.doc() = R"(BADAVFLAG Error thrown by SPICE.)";
    auto spiceBADAVFRAMEFLAGExp = py::register_exception<te::SpiceBADAVFRAMEFLAG>(m, "SpiceBADAVFRAMEFLAG", spiceErrorExp.ptr());
    spiceBADAVFRAMEFLAGExp.doc() = R"(BADAVFRAMEFLAG Error thrown by SPICE.)";
    auto spiceBADAXISExp = py::register_exception<te::SpiceBADAXIS>(m, "SpiceBADAXIS", spiceErrorExp.ptr());
    spiceBADAXISExp.doc() = R"(BADAXIS Error thrown by SPICE.)";
    auto spiceBADAXISLENGTHExp = py::register_exception<te::SpiceBADAXISLENGTH>(m, "SpiceBADAXISLENGTH", spiceErrorExp.ptr());
    spiceBADAXISLENGTHExp.doc() = R"(BADAXISLENGTH Error thrown by SPICE.)";
    auto spiceBADAXISNUMBERSExp = py::register_exception<te::SpiceBADAXISNUMBERS>(m, "SpiceBADAXISNUMBERS", spiceErrorExp.ptr());
    spiceBADAXISNUMBERSExp.doc() = R"(BADAXISNUMBERS Error thrown by SPICE.)";
    auto spiceBADBLOCKSIZEExp = py::register_exception<te::SpiceBADBLOCKSIZE>(m, "SpiceBADBLOCKSIZE", spiceErrorExp.ptr());
    spiceBADBLOCKSIZEExp.doc() = R"(BADBLOCKSIZE Error thrown by SPICE.)";
    auto spiceBADBODYIDExp = py::register_exception<te::SpiceBADBODYID>(m, "SpiceBADBODYID", spiceErrorExp.ptr());
    spiceBADBODYIDExp.doc() = R"(BADBODYID Error thrown by SPICE.)";
    auto spiceBADBORESIGHTSPECExp = py::register_exception<te::SpiceBADBORESIGHTSPEC>(m, "SpiceBADBORESIGHTSPEC", spiceErrorExp.ptr());
    spiceBADBORESIGHTSPECExp.doc() = R"(BADBORESIGHTSPEC Error thrown by SPICE.)";
    auto spiceBADBOUNDARYExp = py::register_exception<te::SpiceBADBOUNDARY>(m, "SpiceBADBOUNDARY", spiceErrorExp.ptr());
    spiceBADBOUNDARYExp.doc() = R"(BADBOUNDARY Error thrown by SPICE.)";
    auto spiceBADCATALOGFILEExp = py::register_exception<te::SpiceBADCATALOGFILE>(m, "SpiceBADCATALOGFILE", spiceErrorExp.ptr());
    spiceBADCATALOGFILEExp.doc() = R"(BADCATALOGFILE Error thrown by SPICE.)";
    auto spiceBADCENTERNAMEExp = py::register_exception<te::SpiceBADCENTERNAME>(m, "SpiceBADCENTERNAME", spiceErrorExp.ptr());
    spiceBADCENTERNAMEExp.doc() = R"(BADCENTERNAME Error thrown by SPICE.)";
    auto spiceBADCHECKFLAGExp = py::register_exception<te::SpiceBADCHECKFLAG>(m, "SpiceBADCHECKFLAG", spiceErrorExp.ptr());
    spiceBADCHECKFLAGExp.doc() = R"(BADCHECKFLAG Error thrown by SPICE.)";
    auto spiceBADCKTYPESPECExp = py::register_exception<te::SpiceBADCKTYPESPEC>(m, "SpiceBADCKTYPESPEC", spiceErrorExp.ptr());
    spiceBADCKTYPESPECExp.doc() = R"(BADCKTYPESPEC Error thrown by SPICE.)";
    auto spiceBADCOARSEVOXSCALEExp = py::register_exception<te::SpiceBADCOARSEVOXSCALE>(m, "SpiceBADCOARSEVOXSCALE", spiceErrorExp.ptr());
    spiceBADCOARSEVOXSCALEExp.doc() = R"(BADCOARSEVOXSCALE Error thrown by SPICE.)";
    auto spiceBADCOLUMDECLExp = py::register_exception<te::SpiceBADCOLUMDECL>(m, "SpiceBADCOLUMDECL", spiceErrorExp.ptr());
    spiceBADCOLUMDECLExp.doc() = R"(BADCOLUMDECL Error thrown by SPICE.)";
    auto spiceBADCOLUMNCOUNTExp = py::register_exception<te::SpiceBADCOLUMNCOUNT>(m, "SpiceBADCOLUMNCOUNT", spiceErrorExp.ptr());
    spiceBADCOLUMNCOUNTExp.doc() = R"(BADCOLUMNCOUNT Error thrown by SPICE.)";
    auto spiceBADCOLUMNDECLExp = py::register_exception<te::SpiceBADCOLUMNDECL>(m, "SpiceBADCOLUMNDECL", spiceErrorExp.ptr());
    spiceBADCOLUMNDECLExp.doc() = R"(BADCOLUMNDECL Error thrown by SPICE.)";
    auto spiceBADCOMMENTAREAExp = py::register_exception<te::SpiceBADCOMMENTAREA>(m, "SpiceBADCOMMENTAREA", spiceErrorExp.ptr());
    spiceBADCOMMENTAREAExp.doc() = R"(BADCOMMENTAREA Error thrown by SPICE.)";
    auto spiceBADCOMPNUMBERExp = py::register_exception<te::SpiceBADCOMPNUMBER>(m, "SpiceBADCOMPNUMBER", spiceErrorExp.ptr());
    spiceBADCOMPNUMBERExp.doc() = R"(BADCOMPNUMBER Error thrown by SPICE.)";
    auto spiceBADCOORDBOUNDSExp = py::register_exception<te::SpiceBADCOORDBOUNDS>(m, "SpiceBADCOORDBOUNDS", spiceErrorExp.ptr());
    spiceBADCOORDBOUNDSExp.doc() = R"(BADCOORDBOUNDS Error thrown by SPICE.)";
    auto spiceBADCOORDSYSExp = py::register_exception<te::SpiceBADCOORDSYS>(m, "SpiceBADCOORDSYS", spiceErrorExp.ptr());
    spiceBADCOORDSYSExp.doc() = R"(BADCOORDSYS Error thrown by SPICE.)";
    auto spiceBADCURVETYPEExp = py::register_exception<te::SpiceBADCURVETYPE>(m, "SpiceBADCURVETYPE", spiceErrorExp.ptr());
    spiceBADCURVETYPEExp.doc() = R"(BADCURVETYPE Error thrown by SPICE.)";
    auto spiceBADDAFTRANSFERFILEExp = py::register_exception<te::SpiceBADDAFTRANSFERFILE>(m, "SpiceBADDAFTRANSFERFILE", spiceErrorExp.ptr());
    spiceBADDAFTRANSFERFILEExp.doc() = R"(BADDAFTRANSFERFILE Error thrown by SPICE.)";
    auto spiceBADDASCOMMENTAREAExp = py::register_exception<te::SpiceBADDASCOMMENTAREA>(m, "SpiceBADDASCOMMENTAREA", spiceErrorExp.ptr());
    spiceBADDASCOMMENTAREAExp.doc() = R"(BADDASCOMMENTAREA Error thrown by SPICE.)";
    auto spiceBADDASDIRECTORYExp = py::register_exception<te::SpiceBADDASDIRECTORY>(m, "SpiceBADDASDIRECTORY", spiceErrorExp.ptr());
    spiceBADDASDIRECTORYExp.doc() = R"(BADDASDIRECTORY Error thrown by SPICE.)";
    auto spiceBADDASFILEExp = py::register_exception<te::SpiceBADDASFILE>(m, "SpiceBADDASFILE", spiceErrorExp.ptr());
    spiceBADDASFILEExp.doc() = R"(BADDASFILE Error thrown by SPICE.)";
    auto spiceBADDASTRANSFERFILEExp = py::register_exception<te::SpiceBADDASTRANSFERFILE>(m, "SpiceBADDASTRANSFERFILE", spiceErrorExp.ptr());
    spiceBADDASTRANSFERFILEExp.doc() = R"(BADDASTRANSFERFILE Error thrown by SPICE.)";
    auto spiceBADDATALINEExp = py::register_exception<te::SpiceBADDATALINE>(m, "SpiceBADDATALINE", spiceErrorExp.ptr());
    spiceBADDATALINEExp.doc() = R"(BADDATALINE Error thrown by SPICE.)";
    auto spiceBADDATAORDERTOKENExp = py::register_exception<te::SpiceBADDATAORDERTOKEN>(m, "SpiceBADDATAORDERTOKEN", spiceErrorExp.ptr());
    spiceBADDATAORDERTOKENExp.doc() = R"(BADDATAORDERTOKEN Error thrown by SPICE.)";
    auto spiceBADDATATYPEExp = py::register_exception<te::SpiceBADDATATYPE>(m, "SpiceBADDATATYPE", spiceErrorExp.ptr());
    spiceBADDATATYPEExp.doc() = R"(BADDATATYPE Error thrown by SPICE.)";
    auto spiceBADDATATYPEFLAGExp = py::register_exception<te::SpiceBADDATATYPEFLAG>(m, "SpiceBADDATATYPEFLAG", spiceErrorExp.ptr());
    spiceBADDATATYPEFLAGExp.doc() = R"(BADDATATYPEFLAG Error thrown by SPICE.)";
    auto spiceBADDEFAULTVALUEExp = py::register_exception<te::SpiceBADDEFAULTVALUE>(m, "SpiceBADDEFAULTVALUE", spiceErrorExp.ptr());
    spiceBADDEFAULTVALUEExp.doc() = R"(BADDEFAULTVALUE Error thrown by SPICE.)";
    auto spiceBADDESCRTIMESExp = py::register_exception<te::SpiceBADDESCRTIMES>(m, "SpiceBADDESCRTIMES", spiceErrorExp.ptr());
    spiceBADDESCRTIMESExp.doc() = R"(BADDESCRTIMES Error thrown by SPICE.)";
    auto spiceBADDIMENSIONExp = py::register_exception<te::SpiceBADDIMENSION>(m, "SpiceBADDIMENSION", spiceErrorExp.ptr());
    spiceBADDIMENSIONExp.doc() = R"(BADDIMENSION Error thrown by SPICE.)";
    auto spiceBADDIMENSIONSExp = py::register_exception<te::SpiceBADDIMENSIONS>(m, "SpiceBADDIMENSIONS", spiceErrorExp.ptr());
    spiceBADDIMENSIONSExp.doc() = R"(BADDIMENSIONS Error thrown by SPICE.)";
    auto spiceBADDIRECTIONExp = py::register_exception<te::SpiceBADDIRECTION>(m, "SpiceBADDIRECTION", spiceErrorExp.ptr());
    spiceBADDIRECTIONExp.doc() = R"(BADDIRECTION Error thrown by SPICE.)";
    auto spiceBADDOUBLEPRECISIONExp = py::register_exception<te::SpiceBADDOUBLEPRECISION>(m, "SpiceBADDOUBLEPRECISION", spiceErrorExp.ptr());
    spiceBADDOUBLEPRECISIONExp.doc() = R"(BADDOUBLEPRECISION Error thrown by SPICE.)";
    auto spiceBADDOWNSAMPLINGTOLExp = py::register_exception<te::SpiceBADDOWNSAMPLINGTOL>(m, "SpiceBADDOWNSAMPLINGTOL", spiceErrorExp.ptr());
    spiceBADDOWNSAMPLINGTOLExp.doc() = R"(BADDOWNSAMPLINGTOL Error thrown by SPICE.)";
    auto spiceBADECCENTRICITYExp = py::register_exception<te::SpiceBADECCENTRICITY>(m, "SpiceBADECCENTRICITY", spiceErrorExp.ptr());
    spiceBADECCENTRICITYExp.doc() = R"(BADECCENTRICITY Error thrown by SPICE.)";
    auto spiceBADENDPOINTSExp = py::register_exception<te::SpiceBADENDPOINTS>(m, "SpiceBADENDPOINTS", spiceErrorExp.ptr());
    spiceBADENDPOINTSExp.doc() = R"(BADENDPOINTS Error thrown by SPICE.)";
    auto spiceBADEULERANGLEUNITSExp = py::register_exception<te::SpiceBADEULERANGLEUNITS>(m, "SpiceBADEULERANGLEUNITS", spiceErrorExp.ptr());
    spiceBADEULERANGLEUNITSExp.doc() = R"(BADEULERANGLEUNITS Error thrown by SPICE.)";
    auto spiceBADFILEFORMATExp = py::register_exception<te::SpiceBADFILEFORMAT>(m, "SpiceBADFILEFORMAT", spiceErrorExp.ptr());
    spiceBADFILEFORMATExp.doc() = R"(BADFILEFORMAT Error thrown by SPICE.)";
    auto spiceBADFILENAMEExp = py::register_exception<te::SpiceBADFILENAME>(m, "SpiceBADFILENAME", spiceErrorExp.ptr());
    spiceBADFILENAMEExp.doc() = R"(BADFILENAME Error thrown by SPICE.)";
    auto spiceBADFINEVOXELSCALEExp = py::register_exception<te::SpiceBADFINEVOXELSCALE>(m, "SpiceBADFINEVOXELSCALE", spiceErrorExp.ptr());
    spiceBADFINEVOXELSCALEExp.doc() = R"(BADFINEVOXELSCALE Error thrown by SPICE.)";
    auto spiceBADFORMATSPECIFIERExp = py::register_exception<te::SpiceBADFORMATSPECIFIER>(m, "SpiceBADFORMATSPECIFIER", spiceErrorExp.ptr());
    spiceBADFORMATSPECIFIERExp.doc() = R"(BADFORMATSPECIFIER Error thrown by SPICE.)";
    auto spiceBADFRAMEExp = py::register_exception<te::SpiceBADFRAME>(m, "SpiceBADFRAME", spiceErrorExp.ptr());
    spiceBADFRAMEExp.doc() = R"(BADFRAME Error thrown by SPICE.)";
    auto spiceBADFRAMECLASSExp = py::register_exception<te::SpiceBADFRAMECLASS>(m, "SpiceBADFRAMECLASS", spiceErrorExp.ptr());
    spiceBADFRAMECLASSExp.doc() = R"(BADFRAMECLASS Error thrown by SPICE.)";
    auto spiceBADFRAMECOUNTExp = py::register_exception<te::SpiceBADFRAMECOUNT>(m, "SpiceBADFRAMECOUNT", spiceErrorExp.ptr());
    spiceBADFRAMECOUNTExp.doc() = R"(BADFRAMECOUNT Error thrown by SPICE.)";
    auto spiceBADFRAMESPECExp = py::register_exception<te::SpiceBADFRAMESPEC>(m, "SpiceBADFRAMESPEC", spiceErrorExp.ptr());
    spiceBADFRAMESPECExp.doc() = R"(BADFRAMESPEC Error thrown by SPICE.)";
    auto spiceBADFROMTIMEExp = py::register_exception<te::SpiceBADFROMTIME>(m, "SpiceBADFROMTIME", spiceErrorExp.ptr());
    spiceBADFROMTIMEExp.doc() = R"(BADFROMTIME Error thrown by SPICE.)";
    auto spiceBADFROMTIMESYSTEMExp = py::register_exception<te::SpiceBADFROMTIMESYSTEM>(m, "SpiceBADFROMTIMESYSTEM", spiceErrorExp.ptr());
    spiceBADFROMTIMESYSTEMExp.doc() = R"(BADFROMTIMESYSTEM Error thrown by SPICE.)";
    auto spiceBADFROMTIMETYPEExp = py::register_exception<te::SpiceBADFROMTIMETYPE>(m, "SpiceBADFROMTIMETYPE", spiceErrorExp.ptr());
    spiceBADFROMTIMETYPEExp.doc() = R"(BADFROMTIMETYPE Error thrown by SPICE.)";
    auto spiceBADGEOMETRYExp = py::register_exception<te::SpiceBADGEOMETRY>(m, "SpiceBADGEOMETRY", spiceErrorExp.ptr());
    spiceBADGEOMETRYExp.doc() = R"(BADGEOMETRY Error thrown by SPICE.)";
    auto spiceBADGMExp = py::register_exception<te::SpiceBADGM>(m, "SpiceBADGM", spiceErrorExp.ptr());
    spiceBADGMExp.doc() = R"(BADGM Error thrown by SPICE.)";
    auto spiceBADHARDSPACEExp = py::register_exception<te::SpiceBADHARDSPACE>(m, "SpiceBADHARDSPACE", spiceErrorExp.ptr());
    spiceBADHARDSPACEExp.doc() = R"(BADHARDSPACE Error thrown by SPICE.)";
    auto spiceBADHERMITDEGREEExp = py::register_exception<te::SpiceBADHERMITDEGREE>(m, "SpiceBADHERMITDEGREE", spiceErrorExp.ptr());
    spiceBADHERMITDEGREEExp.doc() = R"(BADHERMITDEGREE Error thrown by SPICE.)";
    auto spiceBADINDEXExp = py::register_exception<te::SpiceBADINDEX>(m, "SpiceBADINDEX", spiceErrorExp.ptr());
    spiceBADINDEXExp.doc() = R"(BADINDEX Error thrown by SPICE.)";
    auto spiceBADINITSTATEExp = py::register_exception<te::SpiceBADINITSTATE>(m, "SpiceBADINITSTATE", spiceErrorExp.ptr());
    spiceBADINITSTATEExp.doc() = R"(BADINITSTATE Error thrown by SPICE.)";
    auto spiceBADINPUTDATALINEExp = py::register_exception<te::SpiceBADINPUTDATALINE>(m, "SpiceBADINPUTDATALINE", spiceErrorExp.ptr());
    spiceBADINPUTDATALINEExp.doc() = R"(BADINPUTDATALINE Error thrown by SPICE.)";
    auto spiceBADINPUTETTIMEExp = py::register_exception<te::SpiceBADINPUTETTIME>(m, "SpiceBADINPUTETTIME", spiceErrorExp.ptr());
    spiceBADINPUTETTIMEExp.doc() = R"(BADINPUTETTIME Error thrown by SPICE.)";
    auto spiceBADINPUTTYPEExp = py::register_exception<te::SpiceBADINPUTTYPE>(m, "SpiceBADINPUTTYPE", spiceErrorExp.ptr());
    spiceBADINPUTTYPEExp.doc() = R"(BADINPUTTYPE Error thrown by SPICE.)";
    auto spiceBADINPUTUTCTIMEExp = py::register_exception<te::SpiceBADINPUTUTCTIME>(m, "SpiceBADINPUTUTCTIME", spiceErrorExp.ptr());
    spiceBADINPUTUTCTIMEExp.doc() = R"(BADINPUTUTCTIME Error thrown by SPICE.)";
    auto spiceBADINSTRUMENTIDExp = py::register_exception<te::SpiceBADINSTRUMENTID>(m, "SpiceBADINSTRUMENTID", spiceErrorExp.ptr());
    spiceBADINSTRUMENTIDExp.doc() = R"(BADINSTRUMENTID Error thrown by SPICE.)";
    auto spiceBADINTEGERExp = py::register_exception<te::SpiceBADINTEGER>(m, "SpiceBADINTEGER", spiceErrorExp.ptr());
    spiceBADINTEGERExp.doc() = R"(BADINTEGER Error thrown by SPICE.)";
    auto spiceBADKERNELTYPEExp = py::register_exception<te::SpiceBADKERNELTYPE>(m, "SpiceBADKERNELTYPE", spiceErrorExp.ptr());
    spiceBADKERNELTYPEExp.doc() = R"(BADKERNELTYPE Error thrown by SPICE.)";
    auto spiceBADKERNELVARTYPEExp = py::register_exception<te::SpiceBADKERNELVARTYPE>(m, "SpiceBADKERNELVARTYPE", spiceErrorExp.ptr());
    spiceBADKERNELVARTYPEExp.doc() = R"(BADKERNELVARTYPE Error thrown by SPICE.)";
    auto spiceBADLAGRANGEDEGREEExp = py::register_exception<te::SpiceBADLAGRANGEDEGREE>(m, "SpiceBADLAGRANGEDEGREE", spiceErrorExp.ptr());
    spiceBADLAGRANGEDEGREEExp.doc() = R"(BADLAGRANGEDEGREE Error thrown by SPICE.)";
    auto spiceBADLATITUDEBOUNDSExp = py::register_exception<te::SpiceBADLATITUDEBOUNDS>(m, "SpiceBADLATITUDEBOUNDS", spiceErrorExp.ptr());
    spiceBADLATITUDEBOUNDSExp.doc() = R"(BADLATITUDEBOUNDS Error thrown by SPICE.)";
    auto spiceBADLATITUDERANGEExp = py::register_exception<te::SpiceBADLATITUDERANGE>(m, "SpiceBADLATITUDERANGE", spiceErrorExp.ptr());
    spiceBADLATITUDERANGEExp.doc() = R"(BADLATITUDERANGE Error thrown by SPICE.)";
    auto spiceBADLATUSRECTUMExp = py::register_exception<te::SpiceBADLATUSRECTUM>(m, "SpiceBADLATUSRECTUM", spiceErrorExp.ptr());
    spiceBADLATUSRECTUMExp.doc() = R"(BADLATUSRECTUM Error thrown by SPICE.)";
    auto spiceBADLEAPSECONDSExp = py::register_exception<te::SpiceBADLEAPSECONDS>(m, "SpiceBADLEAPSECONDS", spiceErrorExp.ptr());
    spiceBADLEAPSECONDSExp.doc() = R"(BADLEAPSECONDS Error thrown by SPICE.)";
    auto spiceBADLIMBLOCUSMIXExp = py::register_exception<te::SpiceBADLIMBLOCUSMIX>(m, "SpiceBADLIMBLOCUSMIX", spiceErrorExp.ptr());
    spiceBADLIMBLOCUSMIXExp.doc() = R"(BADLIMBLOCUSMIX Error thrown by SPICE.)";
    auto spiceBADLINEPERRECCOUNTExp = py::register_exception<te::SpiceBADLINEPERRECCOUNT>(m, "SpiceBADLINEPERRECCOUNT", spiceErrorExp.ptr());
    spiceBADLINEPERRECCOUNTExp.doc() = R"(BADLINEPERRECCOUNT Error thrown by SPICE.)";
    auto spiceBADLISTFILENAMEExp = py::register_exception<te::SpiceBADLISTFILENAME>(m, "SpiceBADLISTFILENAME", spiceErrorExp.ptr());
    spiceBADLISTFILENAMEExp.doc() = R"(BADLISTFILENAME Error thrown by SPICE.)";
    auto spiceBADLONGITUDERANGEExp = py::register_exception<te::SpiceBADLONGITUDERANGE>(m, "SpiceBADLONGITUDERANGE", spiceErrorExp.ptr());
    spiceBADLONGITUDERANGEExp.doc() = R"(BADLONGITUDERANGE Error thrown by SPICE.)";
    auto spiceBADMATRIXExp = py::register_exception<te::SpiceBADMATRIX>(m, "SpiceBADMATRIX", spiceErrorExp.ptr());
    spiceBADMATRIXExp.doc() = R"(BADMATRIX Error thrown by SPICE.)";
    auto spiceBADMEANMOTIONExp = py::register_exception<te::SpiceBADMEANMOTION>(m, "SpiceBADMEANMOTION", spiceErrorExp.ptr());
    spiceBADMEANMOTIONExp.doc() = R"(BADMEANMOTION Error thrown by SPICE.)";
    auto spiceBADMECCENTRICITYExp = py::register_exception<te::SpiceBADMECCENTRICITY>(m, "SpiceBADMECCENTRICITY", spiceErrorExp.ptr());
    spiceBADMECCENTRICITYExp.doc() = R"(BADMECCENTRICITY Error thrown by SPICE.)";
    auto spiceBADMETHODSYNTAXExp = py::register_exception<te::SpiceBADMETHODSYNTAX>(m, "SpiceBADMETHODSYNTAX", spiceErrorExp.ptr());
    spiceBADMETHODSYNTAXExp.doc() = R"(BADMETHODSYNTAX Error thrown by SPICE.)";
    auto spiceBADMIDNIGHTTYPEExp = py::register_exception<te::SpiceBADMIDNIGHTTYPE>(m, "SpiceBADMIDNIGHTTYPE", spiceErrorExp.ptr());
    spiceBADMIDNIGHTTYPEExp.doc() = R"(BADMIDNIGHTTYPE Error thrown by SPICE.)";
    auto spiceBADMSEMIMAJORExp = py::register_exception<te::SpiceBADMSEMIMAJOR>(m, "SpiceBADMSEMIMAJOR", spiceErrorExp.ptr());
    spiceBADMSEMIMAJORExp.doc() = R"(BADMSEMIMAJOR Error thrown by SPICE.)";
    auto spiceBADMSOPQUATERNIONExp = py::register_exception<te::SpiceBADMSOPQUATERNION>(m, "SpiceBADMSOPQUATERNION", spiceErrorExp.ptr());
    spiceBADMSOPQUATERNIONExp.doc() = R"(BADMSOPQUATERNION Error thrown by SPICE.)";
    auto spiceBADNOFDIGITSExp = py::register_exception<te::SpiceBADNOFDIGITS>(m, "SpiceBADNOFDIGITS", spiceErrorExp.ptr());
    spiceBADNOFDIGITSExp.doc() = R"(BADNOFDIGITS Error thrown by SPICE.)";
    auto spiceBADNOFSTATESExp = py::register_exception<te::SpiceBADNOFSTATES>(m, "SpiceBADNOFSTATES", spiceErrorExp.ptr());
    spiceBADNOFSTATESExp.doc() = R"(BADNOFSTATES Error thrown by SPICE.)";
    auto spiceBADNUMBEROFPOINTSExp = py::register_exception<te::SpiceBADNUMBEROFPOINTS>(m, "SpiceBADNUMBEROFPOINTS", spiceErrorExp.ptr());
    spiceBADNUMBEROFPOINTSExp.doc() = R"(BADNUMBEROFPOINTS Error thrown by SPICE.)";
    auto spiceBADOBJECTIDExp = py::register_exception<te::SpiceBADOBJECTID>(m, "SpiceBADOBJECTID", spiceErrorExp.ptr());
    spiceBADOBJECTIDExp.doc() = R"(BADOBJECTID Error thrown by SPICE.)";
    auto spiceBADOBJECTNAMEExp = py::register_exception<te::SpiceBADOBJECTNAME>(m, "SpiceBADOBJECTNAME", spiceErrorExp.ptr());
    spiceBADOBJECTNAMEExp.doc() = R"(BADOBJECTNAME Error thrown by SPICE.)";
    auto spiceBADOFFSETANGLESExp = py::register_exception<te::SpiceBADOFFSETANGLES>(m, "SpiceBADOFFSETANGLES", spiceErrorExp.ptr());
    spiceBADOFFSETANGLESExp.doc() = R"(BADOFFSETANGLES Error thrown by SPICE.)";
    auto spiceBADOFFSETANGUNITSExp = py::register_exception<te::SpiceBADOFFSETANGUNITS>(m, "SpiceBADOFFSETANGUNITS", spiceErrorExp.ptr());
    spiceBADOFFSETANGUNITSExp.doc() = R"(BADOFFSETANGUNITS Error thrown by SPICE.)";
    auto spiceBADOFFSETAXESFORMATExp = py::register_exception<te::SpiceBADOFFSETAXESFORMAT>(m, "SpiceBADOFFSETAXESFORMAT", spiceErrorExp.ptr());
    spiceBADOFFSETAXESFORMATExp.doc() = R"(BADOFFSETAXESFORMAT Error thrown by SPICE.)";
    auto spiceBADOFFSETAXISXYZExp = py::register_exception<te::SpiceBADOFFSETAXISXYZ>(m, "SpiceBADOFFSETAXISXYZ", spiceErrorExp.ptr());
    spiceBADOFFSETAXISXYZExp.doc() = R"(BADOFFSETAXISXYZ Error thrown by SPICE.)";
    auto spiceBADORBITALPERIODExp = py::register_exception<te::SpiceBADORBITALPERIOD>(m, "SpiceBADORBITALPERIOD", spiceErrorExp.ptr());
    spiceBADORBITALPERIODExp.doc() = R"(BADORBITALPERIOD Error thrown by SPICE.)";
    auto spiceBADOUTPUTSPKTYPEExp = py::register_exception<te::SpiceBADOUTPUTSPKTYPE>(m, "SpiceBADOUTPUTSPKTYPE", spiceErrorExp.ptr());
    spiceBADOUTPUTSPKTYPEExp.doc() = R"(BADOUTPUTSPKTYPE Error thrown by SPICE.)";
    auto spiceBADOUTPUTTYPEExp = py::register_exception<te::SpiceBADOUTPUTTYPE>(m, "SpiceBADOUTPUTTYPE", spiceErrorExp.ptr());
    spiceBADOUTPUTTYPEExp.doc() = R"(BADOUTPUTTYPE Error thrown by SPICE.)";
    auto spiceBADPARTNUMBERExp = py::register_exception<te::SpiceBADPARTNUMBER>(m, "SpiceBADPARTNUMBER", spiceErrorExp.ptr());
    spiceBADPARTNUMBERExp.doc() = R"(BADPARTNUMBER Error thrown by SPICE.)";
    auto spiceBADPCKVALUEExp = py::register_exception<te::SpiceBADPCKVALUE>(m, "SpiceBADPCKVALUE", spiceErrorExp.ptr());
    spiceBADPCKVALUEExp.doc() = R"(BADPCKVALUE Error thrown by SPICE.)";
    auto spiceBADPECCENTRICITYExp = py::register_exception<te::SpiceBADPECCENTRICITY>(m, "SpiceBADPECCENTRICITY", spiceErrorExp.ptr());
    spiceBADPECCENTRICITYExp.doc() = R"(BADPECCENTRICITY Error thrown by SPICE.)";
    auto spiceBADPERIAPSEVALUEExp = py::register_exception<te::SpiceBADPERIAPSEVALUE>(m, "SpiceBADPERIAPSEVALUE", spiceErrorExp.ptr());
    spiceBADPERIAPSEVALUEExp.doc() = R"(BADPERIAPSEVALUE Error thrown by SPICE.)";
    auto spiceBADPICTUREExp = py::register_exception<te::SpiceBADPICTURE>(m, "SpiceBADPICTURE", spiceErrorExp.ptr());
    spiceBADPICTUREExp.doc() = R"(BADPICTURE Error thrown by SPICE.)";
    auto spiceBADPLATECOUNTExp = py::register_exception<te::SpiceBADPLATECOUNT>(m, "SpiceBADPLATECOUNT", spiceErrorExp.ptr());
    spiceBADPLATECOUNTExp.doc() = R"(BADPLATECOUNT Error thrown by SPICE.)";
    auto spiceBADPODLOCATIONExp = py::register_exception<te::SpiceBADPODLOCATION>(m, "SpiceBADPODLOCATION", spiceErrorExp.ptr());
    spiceBADPODLOCATIONExp.doc() = R"(BADPODLOCATION Error thrown by SPICE.)";
    auto spiceBADPRECVALUEExp = py::register_exception<te::SpiceBADPRECVALUE>(m, "SpiceBADPRECVALUE", spiceErrorExp.ptr());
    spiceBADPRECVALUEExp.doc() = R"(BADPRECVALUE Error thrown by SPICE.)";
    auto spiceBADPRIORITYSPECExp = py::register_exception<te::SpiceBADPRIORITYSPEC>(m, "SpiceBADPRIORITYSPEC", spiceErrorExp.ptr());
    spiceBADPRIORITYSPECExp.doc() = R"(BADPRIORITYSPEC Error thrown by SPICE.)";
    auto spiceBADQUATSIGNExp = py::register_exception<te::SpiceBADQUATSIGN>(m, "SpiceBADQUATSIGN", spiceErrorExp.ptr());
    spiceBADQUATSIGNExp.doc() = R"(BADQUATSIGN Error thrown by SPICE.)";
    auto spiceBADQUATTHRESHOLDExp = py::register_exception<te::SpiceBADQUATTHRESHOLD>(m, "SpiceBADQUATTHRESHOLD", spiceErrorExp.ptr());
    spiceBADQUATTHRESHOLDExp.doc() = R"(BADQUATTHRESHOLD Error thrown by SPICE.)";
    auto spiceBADRADIUSExp = py::register_exception<te::SpiceBADRADIUS>(m, "SpiceBADRADIUS", spiceErrorExp.ptr());
    spiceBADRADIUSExp.doc() = R"(BADRADIUS Error thrown by SPICE.)";
    auto spiceBADRADIUSCOUNTExp = py::register_exception<te::SpiceBADRADIUSCOUNT>(m, "SpiceBADRADIUSCOUNT", spiceErrorExp.ptr());
    spiceBADRADIUSCOUNTExp.doc() = R"(BADRADIUSCOUNT Error thrown by SPICE.)";
    auto spiceBADRATEFRAMEFLAGExp = py::register_exception<te::SpiceBADRATEFRAMEFLAG>(m, "SpiceBADRATEFRAMEFLAG", spiceErrorExp.ptr());
    spiceBADRATEFRAMEFLAGExp.doc() = R"(BADRATEFRAMEFLAG Error thrown by SPICE.)";
    auto spiceBADRATETHRESHOLDExp = py::register_exception<te::SpiceBADRATETHRESHOLD>(m, "SpiceBADRATETHRESHOLD", spiceErrorExp.ptr());
    spiceBADRATETHRESHOLDExp.doc() = R"(BADRATETHRESHOLD Error thrown by SPICE.)";
    auto spiceBADRECORDCOUNTExp = py::register_exception<te::SpiceBADRECORDCOUNT>(m, "SpiceBADRECORDCOUNT", spiceErrorExp.ptr());
    spiceBADRECORDCOUNTExp.doc() = R"(BADRECORDCOUNT Error thrown by SPICE.)";
    auto spiceBADREFVECTORSPECExp = py::register_exception<te::SpiceBADREFVECTORSPEC>(m, "SpiceBADREFVECTORSPEC", spiceErrorExp.ptr());
    spiceBADREFVECTORSPECExp.doc() = R"(BADREFVECTORSPEC Error thrown by SPICE.)";
    auto spiceBADROTATIONAXISXYZExp = py::register_exception<te::SpiceBADROTATIONAXISXYZ>(m, "SpiceBADROTATIONAXISXYZ", spiceErrorExp.ptr());
    spiceBADROTATIONAXISXYZExp.doc() = R"(BADROTATIONAXISXYZ Error thrown by SPICE.)";
    auto spiceBADROTATIONSORDERExp = py::register_exception<te::SpiceBADROTATIONSORDER>(m, "SpiceBADROTATIONSORDER", spiceErrorExp.ptr());
    spiceBADROTATIONSORDERExp.doc() = R"(BADROTATIONSORDER Error thrown by SPICE.)";
    auto spiceBADROTATIONTYPEExp = py::register_exception<te::SpiceBADROTATIONTYPE>(m, "SpiceBADROTATIONTYPE", spiceErrorExp.ptr());
    spiceBADROTATIONTYPEExp.doc() = R"(BADROTATIONTYPE Error thrown by SPICE.)";
    auto spiceBADROTAXESFORMATExp = py::register_exception<te::SpiceBADROTAXESFORMAT>(m, "SpiceBADROTAXESFORMAT", spiceErrorExp.ptr());
    spiceBADROTAXESFORMATExp.doc() = R"(BADROTAXESFORMAT Error thrown by SPICE.)";
    auto spiceBADROWCOUNTExp = py::register_exception<te::SpiceBADROWCOUNT>(m, "SpiceBADROWCOUNT", spiceErrorExp.ptr());
    spiceBADROWCOUNTExp.doc() = R"(BADROWCOUNT Error thrown by SPICE.)";
    auto spiceBADSCIDExp = py::register_exception<te::SpiceBADSCID>(m, "SpiceBADSCID", spiceErrorExp.ptr());
    spiceBADSCIDExp.doc() = R"(BADSCID Error thrown by SPICE.)";
    auto spiceBADSEMIAXISExp = py::register_exception<te::SpiceBADSEMIAXIS>(m, "SpiceBADSEMIAXIS", spiceErrorExp.ptr());
    spiceBADSEMIAXISExp.doc() = R"(BADSEMIAXIS Error thrown by SPICE.)";
    auto spiceBADSEMILATUSExp = py::register_exception<te::SpiceBADSEMILATUS>(m, "SpiceBADSEMILATUS", spiceErrorExp.ptr());
    spiceBADSEMILATUSExp.doc() = R"(BADSEMILATUS Error thrown by SPICE.)";
    auto spiceBADSHAPEExp = py::register_exception<te::SpiceBADSHAPE>(m, "SpiceBADSHAPE", spiceErrorExp.ptr());
    spiceBADSHAPEExp.doc() = R"(BADSHAPE Error thrown by SPICE.)";
    auto spiceBADSOLDAYExp = py::register_exception<te::SpiceBADSOLDAY>(m, "SpiceBADSOLDAY", spiceErrorExp.ptr());
    spiceBADSOLDAYExp.doc() = R"(BADSOLDAY Error thrown by SPICE.)";
    auto spiceBADSOLINDEXExp = py::register_exception<te::SpiceBADSOLINDEX>(m, "SpiceBADSOLINDEX", spiceErrorExp.ptr());
    spiceBADSOLINDEXExp.doc() = R"(BADSOLINDEX Error thrown by SPICE.)";
    auto spiceBADSOLTIMEExp = py::register_exception<te::SpiceBADSOLTIME>(m, "SpiceBADSOLTIME", spiceErrorExp.ptr());
    spiceBADSOLTIMEExp.doc() = R"(BADSOLTIME Error thrown by SPICE.)";
    auto spiceBADSOURCERADIUSExp = py::register_exception<te::SpiceBADSOURCERADIUS>(m, "SpiceBADSOURCERADIUS", spiceErrorExp.ptr());
    spiceBADSOURCERADIUSExp.doc() = R"(BADSOURCERADIUS Error thrown by SPICE.)";
    auto spiceBADSPICEQUATERNIONExp = py::register_exception<te::SpiceBADSPICEQUATERNION>(m, "SpiceBADSPICEQUATERNION", spiceErrorExp.ptr());
    spiceBADSPICEQUATERNIONExp.doc() = R"(BADSPICEQUATERNION Error thrown by SPICE.)";
    auto spiceBADSTARINDEXExp = py::register_exception<te::SpiceBADSTARINDEX>(m, "SpiceBADSTARINDEX", spiceErrorExp.ptr());
    spiceBADSTARINDEXExp.doc() = R"(BADSTARINDEX Error thrown by SPICE.)";
    auto spiceBADSTARTTIMEExp = py::register_exception<te::SpiceBADSTARTTIME>(m, "SpiceBADSTARTTIME", spiceErrorExp.ptr());
    spiceBADSTARTTIMEExp.doc() = R"(BADSTARTTIME Error thrown by SPICE.)";
    auto spiceBADSTDIONAMEExp = py::register_exception<te::SpiceBADSTDIONAME>(m, "SpiceBADSTDIONAME", spiceErrorExp.ptr());
    spiceBADSTDIONAMEExp.doc() = R"(BADSTDIONAME Error thrown by SPICE.)";
    auto spiceBADSTOPTIMEExp = py::register_exception<te::SpiceBADSTOPTIME>(m, "SpiceBADSTOPTIME", spiceErrorExp.ptr());
    spiceBADSTOPTIMEExp.doc() = R"(BADSTOPTIME Error thrown by SPICE.)";
    auto spiceBADSUBSTRExp = py::register_exception<te::SpiceBADSUBSTR>(m, "SpiceBADSUBSTR", spiceErrorExp.ptr());
    spiceBADSUBSTRExp.doc() = R"(BADSUBSTR Error thrown by SPICE.)";
    auto spiceBADSUBSTRINGBOUNDSExp = py::register_exception<te::SpiceBADSUBSTRINGBOUNDS>(m, "SpiceBADSUBSTRINGBOUNDS", spiceErrorExp.ptr());
    spiceBADSUBSTRINGBOUNDSExp.doc() = R"(BADSUBSTRINGBOUNDS Error thrown by SPICE.)";
    auto spiceBADSURFACEMAPExp = py::register_exception<te::SpiceBADSURFACEMAP>(m, "SpiceBADSURFACEMAP", spiceErrorExp.ptr());
    spiceBADSURFACEMAPExp.doc() = R"(BADSURFACEMAP Error thrown by SPICE.)";
    auto spiceBADTABLEFLAGExp = py::register_exception<te::SpiceBADTABLEFLAG>(m, "SpiceBADTABLEFLAG", spiceErrorExp.ptr());
    spiceBADTABLEFLAGExp.doc() = R"(BADTABLEFLAG Error thrown by SPICE.)";
    auto spiceBADTERMLOCUSMIXExp = py::register_exception<te::SpiceBADTERMLOCUSMIX>(m, "SpiceBADTERMLOCUSMIX", spiceErrorExp.ptr());
    spiceBADTERMLOCUSMIXExp.doc() = R"(BADTERMLOCUSMIX Error thrown by SPICE.)";
    auto spiceBADTIMEBOUNDSExp = py::register_exception<te::SpiceBADTIMEBOUNDS>(m, "SpiceBADTIMEBOUNDS", spiceErrorExp.ptr());
    spiceBADTIMEBOUNDSExp.doc() = R"(BADTIMEBOUNDS Error thrown by SPICE.)";
    auto spiceBADTIMECASEExp = py::register_exception<te::SpiceBADTIMECASE>(m, "SpiceBADTIMECASE", spiceErrorExp.ptr());
    spiceBADTIMECASEExp.doc() = R"(BADTIMECASE Error thrown by SPICE.)";
    auto spiceBADTIMECOUNTExp = py::register_exception<te::SpiceBADTIMECOUNT>(m, "SpiceBADTIMECOUNT", spiceErrorExp.ptr());
    spiceBADTIMECOUNTExp.doc() = R"(BADTIMECOUNT Error thrown by SPICE.)";
    auto spiceBADTIMEFORMATExp = py::register_exception<te::SpiceBADTIMEFORMAT>(m, "SpiceBADTIMEFORMAT", spiceErrorExp.ptr());
    spiceBADTIMEFORMATExp.doc() = R"(BADTIMEFORMAT Error thrown by SPICE.)";
    auto spiceBADTIMEITEMExp = py::register_exception<te::SpiceBADTIMEITEM>(m, "SpiceBADTIMEITEM", spiceErrorExp.ptr());
    spiceBADTIMEITEMExp.doc() = R"(BADTIMEITEM Error thrown by SPICE.)";
    auto spiceBADTIMEOFFSETExp = py::register_exception<te::SpiceBADTIMEOFFSET>(m, "SpiceBADTIMEOFFSET", spiceErrorExp.ptr());
    spiceBADTIMEOFFSETExp.doc() = R"(BADTIMEOFFSET Error thrown by SPICE.)";
    auto spiceBADTIMESPECExp = py::register_exception<te::SpiceBADTIMESPEC>(m, "SpiceBADTIMESPEC", spiceErrorExp.ptr());
    spiceBADTIMESPECExp.doc() = R"(BADTIMESPEC Error thrown by SPICE.)";
    auto spiceBADTIMESTRINGExp = py::register_exception<te::SpiceBADTIMESTRING>(m, "SpiceBADTIMESTRING", spiceErrorExp.ptr());
    spiceBADTIMESTRINGExp.doc() = R"(BADTIMESTRING Error thrown by SPICE.)";
    auto spiceBADTIMETYPEExp = py::register_exception<te::SpiceBADTIMETYPE>(m, "SpiceBADTIMETYPE", spiceErrorExp.ptr());
    spiceBADTIMETYPEExp.doc() = R"(BADTIMETYPE Error thrown by SPICE.)";
    auto spiceBADTIMETYPEFLAGExp = py::register_exception<te::SpiceBADTIMETYPEFLAG>(m, "SpiceBADTIMETYPEFLAG", spiceErrorExp.ptr());
    spiceBADTIMETYPEFLAGExp.doc() = R"(BADTIMETYPEFLAG Error thrown by SPICE.)";
    auto spiceBADTLEExp = py::register_exception<te::SpiceBADTLE>(m, "SpiceBADTLE", spiceErrorExp.ptr());
    spiceBADTLEExp.doc() = R"(BADTLE Error thrown by SPICE.)";
    auto spiceBADTLECOVERAGEPADExp = py::register_exception<te::SpiceBADTLECOVERAGEPAD>(m, "SpiceBADTLECOVERAGEPAD", spiceErrorExp.ptr());
    spiceBADTLECOVERAGEPADExp.doc() = R"(BADTLECOVERAGEPAD Error thrown by SPICE.)";
    auto spiceBADTLEPADSExp = py::register_exception<te::SpiceBADTLEPADS>(m, "SpiceBADTLEPADS", spiceErrorExp.ptr());
    spiceBADTLEPADSExp.doc() = R"(BADTLEPADS Error thrown by SPICE.)";
    auto spiceBADTOTIMEExp = py::register_exception<te::SpiceBADTOTIME>(m, "SpiceBADTOTIME", spiceErrorExp.ptr());
    spiceBADTOTIMEExp.doc() = R"(BADTOTIME Error thrown by SPICE.)";
    auto spiceBADTOTIMESYSTEMExp = py::register_exception<te::SpiceBADTOTIMESYSTEM>(m, "SpiceBADTOTIMESYSTEM", spiceErrorExp.ptr());
    spiceBADTOTIMESYSTEMExp.doc() = R"(BADTOTIMESYSTEM Error thrown by SPICE.)";
    auto spiceBADTOTIMETYPEExp = py::register_exception<te::SpiceBADTOTIMETYPE>(m, "SpiceBADTOTIMETYPE", spiceErrorExp.ptr());
    spiceBADTOTIMETYPEExp.doc() = R"(BADTOTIMETYPE Error thrown by SPICE.)";
    auto spiceBADTYPESHAPECOMBOExp = py::register_exception<te::SpiceBADTYPESHAPECOMBO>(m, "SpiceBADTYPESHAPECOMBO", spiceErrorExp.ptr());
    spiceBADTYPESHAPECOMBOExp.doc() = R"(BADTYPESHAPECOMBO Error thrown by SPICE.)";
    auto spiceBADVARASSIGNExp = py::register_exception<te::SpiceBADVARASSIGN>(m, "SpiceBADVARASSIGN", spiceErrorExp.ptr());
    spiceBADVARASSIGNExp.doc() = R"(BADVARASSIGN Error thrown by SPICE.)";
    auto spiceBADVARIABLESIZEExp = py::register_exception<te::SpiceBADVARIABLESIZE>(m, "SpiceBADVARIABLESIZE", spiceErrorExp.ptr());
    spiceBADVARIABLESIZEExp.doc() = R"(BADVARIABLESIZE Error thrown by SPICE.)";
    auto spiceBADVARIABLETYPEExp = py::register_exception<te::SpiceBADVARIABLETYPE>(m, "SpiceBADVARIABLETYPE", spiceErrorExp.ptr());
    spiceBADVARIABLETYPEExp.doc() = R"(BADVARIABLETYPE Error thrown by SPICE.)";
    auto spiceBADVARNAMEExp = py::register_exception<te::SpiceBADVARNAME>(m, "SpiceBADVARNAME", spiceErrorExp.ptr());
    spiceBADVARNAMEExp.doc() = R"(BADVARNAME Error thrown by SPICE.)";
    auto spiceBADVECTORExp = py::register_exception<te::SpiceBADVECTOR>(m, "SpiceBADVECTOR", spiceErrorExp.ptr());
    spiceBADVECTORExp.doc() = R"(BADVECTOR Error thrown by SPICE.)";
    auto spiceBADVERTEXCOUNTExp = py::register_exception<te::SpiceBADVERTEXCOUNT>(m, "SpiceBADVERTEXCOUNT", spiceErrorExp.ptr());
    spiceBADVERTEXCOUNTExp.doc() = R"(BADVERTEXCOUNT Error thrown by SPICE.)";
    auto spiceBADVERTEXINDEXExp = py::register_exception<te::SpiceBADVERTEXINDEX>(m, "SpiceBADVERTEXINDEX", spiceErrorExp.ptr());
    spiceBADVERTEXINDEXExp.doc() = R"(BADVERTEXINDEX Error thrown by SPICE.)";
    auto spiceBADWINDOWSIZEExp = py::register_exception<te::SpiceBADWINDOWSIZE>(m, "SpiceBADWINDOWSIZE", spiceErrorExp.ptr());
    spiceBADWINDOWSIZEExp.doc() = R"(BADWINDOWSIZE Error thrown by SPICE.)";
    auto spiceBARRAYTOOSMALLExp = py::register_exception<te::SpiceBARRAYTOOSMALL>(m, "SpiceBARRAYTOOSMALL", spiceErrorExp.ptr());
    spiceBARRAYTOOSMALLExp.doc() = R"(BARRAYTOOSMALL Error thrown by SPICE.)";
    auto spiceBARYCENTEREPHEMExp = py::register_exception<te::SpiceBARYCENTEREPHEM>(m, "SpiceBARYCENTEREPHEM", spiceErrorExp.ptr());
    spiceBARYCENTEREPHEMExp.doc() = R"(BARYCENTEREPHEM Error thrown by SPICE.)";
    auto spiceBARYCENTERIDCODEExp = py::register_exception<te::SpiceBARYCENTERIDCODE>(m, "SpiceBARYCENTERIDCODE", spiceErrorExp.ptr());
    spiceBARYCENTERIDCODEExp.doc() = R"(BARYCENTERIDCODE Error thrown by SPICE.)";
    auto spiceBEFOREBEGSTRExp = py::register_exception<te::SpiceBEFOREBEGSTR>(m, "SpiceBEFOREBEGSTR", spiceErrorExp.ptr());
    spiceBEFOREBEGSTRExp.doc() = R"(BEFOREBEGSTR Error thrown by SPICE.)";
    auto spiceBLANKCOMMANDLINEExp = py::register_exception<te::SpiceBLANKCOMMANDLINE>(m, "SpiceBLANKCOMMANDLINE", spiceErrorExp.ptr());
    spiceBLANKCOMMANDLINEExp.doc() = R"(BLANKCOMMANDLINE Error thrown by SPICE.)";
    auto spiceBLANKFILENAMEExp = py::register_exception<te::SpiceBLANKFILENAME>(m, "SpiceBLANKFILENAME", spiceErrorExp.ptr());
    spiceBLANKFILENAMEExp.doc() = R"(BLANKFILENAME Error thrown by SPICE.)";
    auto spiceBLANKFILETYPEExp = py::register_exception<te::SpiceBLANKFILETYPE>(m, "SpiceBLANKFILETYPE", spiceErrorExp.ptr());
    spiceBLANKFILETYPEExp.doc() = R"(BLANKFILETYPE Error thrown by SPICE.)";
    auto spiceBLANKINPUTFILENAMEExp = py::register_exception<te::SpiceBLANKINPUTFILENAME>(m, "SpiceBLANKINPUTFILENAME", spiceErrorExp.ptr());
    spiceBLANKINPUTFILENAMEExp.doc() = R"(BLANKINPUTFILENAME Error thrown by SPICE.)";
    auto spiceBLANKINPUTTIMEExp = py::register_exception<te::SpiceBLANKINPUTTIME>(m, "SpiceBLANKINPUTTIME", spiceErrorExp.ptr());
    spiceBLANKINPUTTIMEExp.doc() = R"(BLANKINPUTTIME Error thrown by SPICE.)";
    auto spiceBLANKNAMEASSIGNEDExp = py::register_exception<te::SpiceBLANKNAMEASSIGNED>(m, "SpiceBLANKNAMEASSIGNED", spiceErrorExp.ptr());
    spiceBLANKNAMEASSIGNEDExp.doc() = R"(BLANKNAMEASSIGNED Error thrown by SPICE.)";
    auto spiceBLANKOUTPTFILENAMEExp = py::register_exception<te::SpiceBLANKOUTPTFILENAME>(m, "SpiceBLANKOUTPTFILENAME", spiceErrorExp.ptr());
    spiceBLANKOUTPTFILENAMEExp.doc() = R"(BLANKOUTPTFILENAME Error thrown by SPICE.)";
    auto spiceBLANKSCLKSTRINGExp = py::register_exception<te::SpiceBLANKSCLKSTRING>(m, "SpiceBLANKSCLKSTRING", spiceErrorExp.ptr());
    spiceBLANKSCLKSTRINGExp.doc() = R"(BLANKSCLKSTRING Error thrown by SPICE.)";
    auto spiceBLANKTIMEFORMATExp = py::register_exception<te::SpiceBLANKTIMEFORMAT>(m, "SpiceBLANKTIMEFORMAT", spiceErrorExp.ptr());
    spiceBLANKTIMEFORMATExp.doc() = R"(BLANKTIMEFORMAT Error thrown by SPICE.)";
    auto spiceBLOCKSNOTEVENExp = py::register_exception<te::SpiceBLOCKSNOTEVEN>(m, "SpiceBLOCKSNOTEVEN", spiceErrorExp.ptr());
    spiceBLOCKSNOTEVENExp.doc() = R"(BLOCKSNOTEVEN Error thrown by SPICE.)";
    auto spiceBODIESNOTDISTINCTExp = py::register_exception<te::SpiceBODIESNOTDISTINCT>(m, "SpiceBODIESNOTDISTINCT", spiceErrorExp.ptr());
    spiceBODIESNOTDISTINCTExp.doc() = R"(BODIESNOTDISTINCT Error thrown by SPICE.)";
    auto spiceBODYANDCENTERSAMEExp = py::register_exception<te::SpiceBODYANDCENTERSAME>(m, "SpiceBODYANDCENTERSAME", spiceErrorExp.ptr());
    spiceBODYANDCENTERSAMEExp.doc() = R"(BODYANDCENTERSAME Error thrown by SPICE.)";
    auto spiceBOGUSENTRYExp = py::register_exception<te::SpiceBOGUSENTRY>(m, "SpiceBOGUSENTRY", spiceErrorExp.ptr());
    spiceBOGUSENTRYExp.doc() = R"(BOGUSENTRY Error thrown by SPICE.)";
    auto spiceBORESIGHTMISSINGExp = py::register_exception<te::SpiceBORESIGHTMISSING>(m, "SpiceBORESIGHTMISSING", spiceErrorExp.ptr());
    spiceBORESIGHTMISSINGExp.doc() = R"(BORESIGHTMISSING Error thrown by SPICE.)";
    auto spiceBOUNDARYMISSINGExp = py::register_exception<te::SpiceBOUNDARYMISSING>(m, "SpiceBOUNDARYMISSING", spiceErrorExp.ptr());
    spiceBOUNDARYMISSINGExp.doc() = R"(BOUNDARYMISSING Error thrown by SPICE.)";
    auto spiceBOUNDARYTOOBIGExp = py::register_exception<te::SpiceBOUNDARYTOOBIG>(m, "SpiceBOUNDARYTOOBIG", spiceErrorExp.ptr());
    spiceBOUNDARYTOOBIGExp.doc() = R"(BOUNDARYTOOBIG Error thrown by SPICE.)";
    auto spiceBOUNDSDISAGREEExp = py::register_exception<te::SpiceBOUNDSDISAGREE>(m, "SpiceBOUNDSDISAGREE", spiceErrorExp.ptr());
    spiceBOUNDSDISAGREEExp.doc() = R"(BOUNDSDISAGREE Error thrown by SPICE.)";
    auto spiceBOUNDSOUTOFORDERExp = py::register_exception<te::SpiceBOUNDSOUTOFORDER>(m, "SpiceBOUNDSOUTOFORDER", spiceErrorExp.ptr());
    spiceBOUNDSOUTOFORDERExp.doc() = R"(BOUNDSOUTOFORDER Error thrown by SPICE.)";
    auto spiceBUFFEROVERFLOWExp = py::register_exception<te::SpiceBUFFEROVERFLOW>(m, "SpiceBUFFEROVERFLOW", spiceErrorExp.ptr());
    spiceBUFFEROVERFLOWExp.doc() = R"(BUFFEROVERFLOW Error thrown by SPICE.)";
    auto spiceBUFFERSIZESMISMATCHExp = py::register_exception<te::SpiceBUFFERSIZESMISMATCH>(m, "SpiceBUFFERSIZESMISMATCH", spiceErrorExp.ptr());
    spiceBUFFERSIZESMISMATCHExp.doc() = R"(BUFFERSIZESMISMATCH Error thrown by SPICE.)";
    auto spiceBUFFERTOOSMALLExp = py::register_exception<te::SpiceBUFFERTOOSMALL>(m, "SpiceBUFFERTOOSMALL", spiceErrorExp.ptr());
    spiceBUFFERTOOSMALLExp.doc() = R"(BUFFERTOOSMALL Error thrown by SPICE.)";
    auto spiceBUGExp = py::register_exception<te::SpiceBUG>(m, "SpiceBUG", spiceErrorExp.ptr());
    spiceBUGExp.doc() = R"(BUG Error thrown by SPICE.)";
    auto spiceBUGWRITEFAILEDExp = py::register_exception<te::SpiceBUGWRITEFAILED>(m, "SpiceBUGWRITEFAILED", spiceErrorExp.ptr());
    spiceBUGWRITEFAILEDExp.doc() = R"(BUGWRITEFAILED Error thrown by SPICE.)";
    auto spiceCALLCKBSSFIRSTExp = py::register_exception<te::SpiceCALLCKBSSFIRST>(m, "SpiceCALLCKBSSFIRST", spiceErrorExp.ptr());
    spiceCALLCKBSSFIRSTExp.doc() = R"(CALLCKBSSFIRST Error thrown by SPICE.)";
    auto spiceCALLEDOUTOFORDERExp = py::register_exception<te::SpiceCALLEDOUTOFORDER>(m, "SpiceCALLEDOUTOFORDER", spiceErrorExp.ptr());
    spiceCALLEDOUTOFORDERExp.doc() = R"(CALLEDOUTOFORDER Error thrown by SPICE.)";
    auto spiceCALLZZDSKBSSFIRSTExp = py::register_exception<te::SpiceCALLZZDSKBSSFIRST>(m, "SpiceCALLZZDSKBSSFIRST", spiceErrorExp.ptr());
    spiceCALLZZDSKBSSFIRSTExp.doc() = R"(CALLZZDSKBSSFIRST Error thrown by SPICE.)";
    auto spiceCANNOTFINDGRPExp = py::register_exception<te::SpiceCANNOTFINDGRP>(m, "SpiceCANNOTFINDGRP", spiceErrorExp.ptr());
    spiceCANNOTFINDGRPExp.doc() = R"(CANNOTFINDGRP Error thrown by SPICE.)";
    auto spiceCANNOTGETPACKETExp = py::register_exception<te::SpiceCANNOTGETPACKET>(m, "SpiceCANNOTGETPACKET", spiceErrorExp.ptr());
    spiceCANNOTGETPACKETExp.doc() = R"(CANNOTGETPACKET Error thrown by SPICE.)";
    auto spiceCANNOTMAKEFILEExp = py::register_exception<te::SpiceCANNOTMAKEFILE>(m, "SpiceCANNOTMAKEFILE", spiceErrorExp.ptr());
    spiceCANNOTMAKEFILEExp.doc() = R"(CANNOTMAKEFILE Error thrown by SPICE.)";
    auto spiceCANNOTPICKFRAMEExp = py::register_exception<te::SpiceCANNOTPICKFRAME>(m, "SpiceCANNOTPICKFRAME", spiceErrorExp.ptr());
    spiceCANNOTPICKFRAMEExp.doc() = R"(CANNOTPICKFRAME Error thrown by SPICE.)";
    auto spiceCANTFINDFRAMEExp = py::register_exception<te::SpiceCANTFINDFRAME>(m, "SpiceCANTFINDFRAME", spiceErrorExp.ptr());
    spiceCANTFINDFRAMEExp.doc() = R"(CANTFINDFRAME Error thrown by SPICE.)";
    auto spiceCANTGETROTATIONTYPEExp = py::register_exception<te::SpiceCANTGETROTATIONTYPE>(m, "SpiceCANTGETROTATIONTYPE", spiceErrorExp.ptr());
    spiceCANTGETROTATIONTYPEExp.doc() = R"(CANTGETROTATIONTYPE Error thrown by SPICE.)";
    auto spiceCANTUSEPERIAPEPOCHExp = py::register_exception<te::SpiceCANTUSEPERIAPEPOCH>(m, "SpiceCANTUSEPERIAPEPOCH", spiceErrorExp.ptr());
    spiceCANTUSEPERIAPEPOCHExp.doc() = R"(CANTUSEPERIAPEPOCH Error thrown by SPICE.)";
    auto spiceCBNOSUCHSTRExp = py::register_exception<te::SpiceCBNOSUCHSTR>(m, "SpiceCBNOSUCHSTR", spiceErrorExp.ptr());
    spiceCBNOSUCHSTRExp.doc() = R"(CBNOSUCHSTR Error thrown by SPICE.)";
    auto spiceCELLARRAYTOOSMALLExp = py::register_exception<te::SpiceCELLARRAYTOOSMALL>(m, "SpiceCELLARRAYTOOSMALL", spiceErrorExp.ptr());
    spiceCELLARRAYTOOSMALLExp.doc() = R"(CELLARRAYTOOSMALL Error thrown by SPICE.)";
    auto spiceCELLTOOSMALLExp = py::register_exception<te::SpiceCELLTOOSMALL>(m, "SpiceCELLTOOSMALL", spiceErrorExp.ptr());
    spiceCELLTOOSMALLExp.doc() = R"(CELLTOOSMALL Error thrown by SPICE.)";
    auto spiceCKBOGUSENTRYExp = py::register_exception<te::SpiceCKBOGUSENTRY>(m, "SpiceCKBOGUSENTRY", spiceErrorExp.ptr());
    spiceCKBOGUSENTRYExp.doc() = R"(CKBOGUSENTRY Error thrown by SPICE.)";
    auto spiceCKDOESNTEXISTExp = py::register_exception<te::SpiceCKDOESNTEXIST>(m, "SpiceCKDOESNTEXIST", spiceErrorExp.ptr());
    spiceCKDOESNTEXISTExp.doc() = R"(CKDOESNTEXIST Error thrown by SPICE.)";
    auto spiceCKFILEExp = py::register_exception<te::SpiceCKFILE>(m, "SpiceCKFILE", spiceErrorExp.ptr());
    spiceCKFILEExp.doc() = R"(CKFILE Error thrown by SPICE.)";
    auto spiceCKNONEXISTRECExp = py::register_exception<te::SpiceCKNONEXISTREC>(m, "SpiceCKNONEXISTREC", spiceErrorExp.ptr());
    spiceCKNONEXISTRECExp.doc() = R"(CKNONEXISTREC Error thrown by SPICE.)";
    auto spiceCKTOOMANYFILESExp = py::register_exception<te::SpiceCKTOOMANYFILES>(m, "SpiceCKTOOMANYFILES", spiceErrorExp.ptr());
    spiceCKTOOMANYFILESExp.doc() = R"(CKTOOMANYFILES Error thrown by SPICE.)";
    auto spiceCKUNKNOWNDATATYPEExp = py::register_exception<te::SpiceCKUNKNOWNDATATYPE>(m, "SpiceCKUNKNOWNDATATYPE", spiceErrorExp.ptr());
    spiceCKUNKNOWNDATATYPEExp.doc() = R"(CKUNKNOWNDATATYPE Error thrown by SPICE.)";
    auto spiceCKWRONGDATATYPEExp = py::register_exception<te::SpiceCKWRONGDATATYPE>(m, "SpiceCKWRONGDATATYPE", spiceErrorExp.ptr());
    spiceCKWRONGDATATYPEExp.doc() = R"(CKWRONGDATATYPE Error thrown by SPICE.)";
    auto spiceCMDERRORExp = py::register_exception<te::SpiceCMDERROR>(m, "SpiceCMDERROR", spiceErrorExp.ptr());
    spiceCMDERRORExp.doc() = R"(CMDERROR Error thrown by SPICE.)";
    auto spiceCMDPARSEERRORExp = py::register_exception<te::SpiceCMDPARSEERROR>(m, "SpiceCMDPARSEERROR", spiceErrorExp.ptr());
    spiceCMDPARSEERRORExp.doc() = R"(CMDPARSEERROR Error thrown by SPICE.)";
    auto spiceCOARSEGRIDOVERFLOWExp = py::register_exception<te::SpiceCOARSEGRIDOVERFLOW>(m, "SpiceCOARSEGRIDOVERFLOW", spiceErrorExp.ptr());
    spiceCOARSEGRIDOVERFLOWExp.doc() = R"(COARSEGRIDOVERFLOW Error thrown by SPICE.)";
    auto spiceCOLDESCTABLEFULLExp = py::register_exception<te::SpiceCOLDESCTABLEFULL>(m, "SpiceCOLDESCTABLEFULL", spiceErrorExp.ptr());
    spiceCOLDESCTABLEFULLExp.doc() = R"(COLDESCTABLEFULL Error thrown by SPICE.)";
    auto spiceCOLUMNTOOSMALLExp = py::register_exception<te::SpiceCOLUMNTOOSMALL>(m, "SpiceCOLUMNTOOSMALL", spiceErrorExp.ptr());
    spiceCOLUMNTOOSMALLExp.doc() = R"(COLUMNTOOSMALL Error thrown by SPICE.)";
    auto spiceCOMMANDTOOLONGExp = py::register_exception<te::SpiceCOMMANDTOOLONG>(m, "SpiceCOMMANDTOOLONG", spiceErrorExp.ptr());
    spiceCOMMANDTOOLONGExp.doc() = R"(COMMANDTOOLONG Error thrown by SPICE.)";
    auto spiceCOMMENTTOOLONGExp = py::register_exception<te::SpiceCOMMENTTOOLONG>(m, "SpiceCOMMENTTOOLONG", spiceErrorExp.ptr());
    spiceCOMMENTTOOLONGExp.doc() = R"(COMMENTTOOLONG Error thrown by SPICE.)";
    auto spiceCOMMFILENOTEXISTExp = py::register_exception<te::SpiceCOMMFILENOTEXIST>(m, "SpiceCOMMFILENOTEXIST", spiceErrorExp.ptr());
    spiceCOMMFILENOTEXISTExp.doc() = R"(COMMFILENOTEXIST Error thrown by SPICE.)";
    auto spiceCOMPETINGEPOCHSPECExp = py::register_exception<te::SpiceCOMPETINGEPOCHSPEC>(m, "SpiceCOMPETINGEPOCHSPEC", spiceErrorExp.ptr());
    spiceCOMPETINGEPOCHSPECExp.doc() = R"(COMPETINGEPOCHSPEC Error thrown by SPICE.)";
    auto spiceCOMPETINGFRAMESPECExp = py::register_exception<te::SpiceCOMPETINGFRAMESPEC>(m, "SpiceCOMPETINGFRAMESPEC", spiceErrorExp.ptr());
    spiceCOMPETINGFRAMESPECExp.doc() = R"(COMPETINGFRAMESPEC Error thrown by SPICE.)";
    auto spiceCOORDSYSNOTRECExp = py::register_exception<te::SpiceCOORDSYSNOTREC>(m, "SpiceCOORDSYSNOTREC", spiceErrorExp.ptr());
    spiceCOORDSYSNOTRECExp.doc() = R"(COORDSYSNOTREC Error thrown by SPICE.)";
    auto spiceCOUNTMISMATCHExp = py::register_exception<te::SpiceCOUNTMISMATCH>(m, "SpiceCOUNTMISMATCH", spiceErrorExp.ptr());
    spiceCOUNTMISMATCHExp.doc() = R"(COUNTMISMATCH Error thrown by SPICE.)";
    auto spiceCOUNTTOOLARGEExp = py::register_exception<te::SpiceCOUNTTOOLARGE>(m, "SpiceCOUNTTOOLARGE", spiceErrorExp.ptr());
    spiceCOUNTTOOLARGEExp.doc() = R"(COUNTTOOLARGE Error thrown by SPICE.)";
    auto spiceCOVERAGEGAPExp = py::register_exception<te::SpiceCOVERAGEGAP>(m, "SpiceCOVERAGEGAP", spiceErrorExp.ptr());
    spiceCOVERAGEGAPExp.doc() = R"(COVERAGEGAP Error thrown by SPICE.)";
    auto spiceCROSSANGLEMISSINGExp = py::register_exception<te::SpiceCROSSANGLEMISSING>(m, "SpiceCROSSANGLEMISSING", spiceErrorExp.ptr());
    spiceCROSSANGLEMISSINGExp.doc() = R"(CROSSANGLEMISSING Error thrown by SPICE.)";
    auto spiceDAFBADCRECLENExp = py::register_exception<te::SpiceDAFBADCRECLEN>(m, "SpiceDAFBADCRECLEN", spiceErrorExp.ptr());
    spiceDAFBADCRECLENExp.doc() = R"(DAFBADCRECLEN Error thrown by SPICE.)";
    auto spiceDAFBEGGTENDExp = py::register_exception<te::SpiceDAFBEGGTEND>(m, "SpiceDAFBEGGTEND", spiceErrorExp.ptr());
    spiceDAFBEGGTENDExp.doc() = R"(DAFBEGGTEND Error thrown by SPICE.)";
    auto spiceDAFCRNOTFOUNDExp = py::register_exception<te::SpiceDAFCRNOTFOUND>(m, "SpiceDAFCRNOTFOUND", spiceErrorExp.ptr());
    spiceDAFCRNOTFOUNDExp.doc() = R"(DAFCRNOTFOUND Error thrown by SPICE.)";
    auto spiceDAFDPWRITEFAILExp = py::register_exception<te::SpiceDAFDPWRITEFAIL>(m, "SpiceDAFDPWRITEFAIL", spiceErrorExp.ptr());
    spiceDAFDPWRITEFAILExp.doc() = R"(DAFDPWRITEFAIL Error thrown by SPICE.)";
    auto spiceDAFFRNOTFOUNDExp = py::register_exception<te::SpiceDAFFRNOTFOUND>(m, "SpiceDAFFRNOTFOUND", spiceErrorExp.ptr());
    spiceDAFFRNOTFOUNDExp.doc() = R"(DAFFRNOTFOUND Error thrown by SPICE.)";
    auto spiceDAFFTFULLExp = py::register_exception<te::SpiceDAFFTFULL>(m, "SpiceDAFFTFULL", spiceErrorExp.ptr());
    spiceDAFFTFULLExp.doc() = R"(DAFFTFULL Error thrown by SPICE.)";
    auto spiceDAFILLEGWRITEExp = py::register_exception<te::SpiceDAFILLEGWRITE>(m, "SpiceDAFILLEGWRITE", spiceErrorExp.ptr());
    spiceDAFILLEGWRITEExp.doc() = R"(DAFILLEGWRITE Error thrown by SPICE.)";
    auto spiceDAFINVALIDACCESSExp = py::register_exception<te::SpiceDAFINVALIDACCESS>(m, "SpiceDAFINVALIDACCESS", spiceErrorExp.ptr());
    spiceDAFINVALIDACCESSExp.doc() = R"(DAFINVALIDACCESS Error thrown by SPICE.)";
    auto spiceDAFINVALIDPARAMSExp = py::register_exception<te::SpiceDAFINVALIDPARAMS>(m, "SpiceDAFINVALIDPARAMS", spiceErrorExp.ptr());
    spiceDAFINVALIDPARAMSExp.doc() = R"(DAFINVALIDPARAMS Error thrown by SPICE.)";
    auto spiceDAFNEGADDRExp = py::register_exception<te::SpiceDAFNEGADDR>(m, "SpiceDAFNEGADDR", spiceErrorExp.ptr());
    spiceDAFNEGADDRExp.doc() = R"(DAFNEGADDR Error thrown by SPICE.)";
    auto spiceDAFNEWCONFLICTExp = py::register_exception<te::SpiceDAFNEWCONFLICT>(m, "SpiceDAFNEWCONFLICT", spiceErrorExp.ptr());
    spiceDAFNEWCONFLICTExp.doc() = R"(DAFNEWCONFLICT Error thrown by SPICE.)";
    auto spiceDAFNOIFNMATCHExp = py::register_exception<te::SpiceDAFNOIFNMATCH>(m, "SpiceDAFNOIFNMATCH", spiceErrorExp.ptr());
    spiceDAFNOIFNMATCHExp.doc() = R"(DAFNOIFNMATCH Error thrown by SPICE.)";
    auto spiceDAFNONAMEMATCHExp = py::register_exception<te::SpiceDAFNONAMEMATCH>(m, "SpiceDAFNONAMEMATCH", spiceErrorExp.ptr());
    spiceDAFNONAMEMATCHExp.doc() = R"(DAFNONAMEMATCH Error thrown by SPICE.)";
    auto spiceDAFNORESVExp = py::register_exception<te::SpiceDAFNORESV>(m, "SpiceDAFNORESV", spiceErrorExp.ptr());
    spiceDAFNORESVExp.doc() = R"(DAFNORESV Error thrown by SPICE.)";
    auto spiceDAFNOSEARCHExp = py::register_exception<te::SpiceDAFNOSEARCH>(m, "SpiceDAFNOSEARCH", spiceErrorExp.ptr());
    spiceDAFNOSEARCHExp.doc() = R"(DAFNOSEARCH Error thrown by SPICE.)";
    auto spiceDAFNOSUCHADDRExp = py::register_exception<te::SpiceDAFNOSUCHADDR>(m, "SpiceDAFNOSUCHADDR", spiceErrorExp.ptr());
    spiceDAFNOSUCHADDRExp.doc() = R"(DAFNOSUCHADDR Error thrown by SPICE.)";
    auto spiceDAFNOSUCHFILEExp = py::register_exception<te::SpiceDAFNOSUCHFILE>(m, "SpiceDAFNOSUCHFILE", spiceErrorExp.ptr());
    spiceDAFNOSUCHFILEExp.doc() = R"(DAFNOSUCHFILE Error thrown by SPICE.)";
    auto spiceDAFNOSUCHHANDLEExp = py::register_exception<te::SpiceDAFNOSUCHHANDLE>(m, "SpiceDAFNOSUCHHANDLE", spiceErrorExp.ptr());
    spiceDAFNOSUCHHANDLEExp.doc() = R"(DAFNOSUCHHANDLE Error thrown by SPICE.)";
    auto spiceDAFNOSUCHUNITExp = py::register_exception<te::SpiceDAFNOSUCHUNIT>(m, "SpiceDAFNOSUCHUNIT", spiceErrorExp.ptr());
    spiceDAFNOSUCHUNITExp.doc() = R"(DAFNOSUCHUNIT Error thrown by SPICE.)";
    auto spiceDAFNOWRITEExp = py::register_exception<te::SpiceDAFNOWRITE>(m, "SpiceDAFNOWRITE", spiceErrorExp.ptr());
    spiceDAFNOWRITEExp.doc() = R"(DAFNOWRITE Error thrown by SPICE.)";
    auto spiceDAFOVERFLOWExp = py::register_exception<te::SpiceDAFOVERFLOW>(m, "SpiceDAFOVERFLOW", spiceErrorExp.ptr());
    spiceDAFOVERFLOWExp.doc() = R"(DAFOVERFLOW Error thrown by SPICE.)";
    auto spiceDAFREADFAILExp = py::register_exception<te::SpiceDAFREADFAIL>(m, "SpiceDAFREADFAIL", spiceErrorExp.ptr());
    spiceDAFREADFAILExp.doc() = R"(DAFREADFAIL Error thrown by SPICE.)";
    auto spiceDAFWRITEFAILExp = py::register_exception<te::SpiceDAFWRITEFAIL>(m, "SpiceDAFWRITEFAIL", spiceErrorExp.ptr());
    spiceDAFWRITEFAILExp.doc() = R"(DAFWRITEFAIL Error thrown by SPICE.)";
    auto spiceDASFILEREADFAILEDExp = py::register_exception<te::SpiceDASFILEREADFAILED>(m, "SpiceDASFILEREADFAILED", spiceErrorExp.ptr());
    spiceDASFILEREADFAILEDExp.doc() = R"(DASFILEREADFAILED Error thrown by SPICE.)";
    auto spiceDASFILEWRITEFAILEDExp = py::register_exception<te::SpiceDASFILEWRITEFAILED>(m, "SpiceDASFILEWRITEFAILED", spiceErrorExp.ptr());
    spiceDASFILEWRITEFAILEDExp.doc() = R"(DASFILEWRITEFAILED Error thrown by SPICE.)";
    auto spiceDASFTFULLExp = py::register_exception<te::SpiceDASFTFULL>(m, "SpiceDASFTFULL", spiceErrorExp.ptr());
    spiceDASFTFULLExp.doc() = R"(DASFTFULL Error thrown by SPICE.)";
    auto spiceDASINVALIDACCESSExp = py::register_exception<te::SpiceDASINVALIDACCESS>(m, "SpiceDASINVALIDACCESS", spiceErrorExp.ptr());
    spiceDASINVALIDACCESSExp.doc() = R"(DASINVALIDACCESS Error thrown by SPICE.)";
    auto spiceDASINVALIDCOUNTExp = py::register_exception<te::SpiceDASINVALIDCOUNT>(m, "SpiceDASINVALIDCOUNT", spiceErrorExp.ptr());
    spiceDASINVALIDCOUNTExp.doc() = R"(DASINVALIDCOUNT Error thrown by SPICE.)";
    auto spiceDASINVALIDTYPEExp = py::register_exception<te::SpiceDASINVALIDTYPE>(m, "SpiceDASINVALIDTYPE", spiceErrorExp.ptr());
    spiceDASINVALIDTYPEExp.doc() = R"(DASINVALIDTYPE Error thrown by SPICE.)";
    auto spiceDASNOSUCHADDRESSExp = py::register_exception<te::SpiceDASNOSUCHADDRESS>(m, "SpiceDASNOSUCHADDRESS", spiceErrorExp.ptr());
    spiceDASNOSUCHADDRESSExp.doc() = R"(DASNOSUCHADDRESS Error thrown by SPICE.)";
    auto spiceDASNOSUCHFILEExp = py::register_exception<te::SpiceDASNOSUCHFILE>(m, "SpiceDASNOSUCHFILE", spiceErrorExp.ptr());
    spiceDASNOSUCHFILEExp.doc() = R"(DASNOSUCHFILE Error thrown by SPICE.)";
    auto spiceDASNOSUCHHANDLEExp = py::register_exception<te::SpiceDASNOSUCHHANDLE>(m, "SpiceDASNOSUCHHANDLE", spiceErrorExp.ptr());
    spiceDASNOSUCHHANDLEExp.doc() = R"(DASNOSUCHHANDLE Error thrown by SPICE.)";
    auto spiceDASNOSUCHUNITExp = py::register_exception<te::SpiceDASNOSUCHUNIT>(m, "SpiceDASNOSUCHUNIT", spiceErrorExp.ptr());
    spiceDASNOSUCHUNITExp.doc() = R"(DASNOSUCHUNIT Error thrown by SPICE.)";
    auto spiceDASNOTEMPTYExp = py::register_exception<te::SpiceDASNOTEMPTY>(m, "SpiceDASNOTEMPTY", spiceErrorExp.ptr());
    spiceDASNOTEMPTYExp.doc() = R"(DASNOTEMPTY Error thrown by SPICE.)";
    auto spiceDASREADFAILExp = py::register_exception<te::SpiceDASREADFAIL>(m, "SpiceDASREADFAIL", spiceErrorExp.ptr());
    spiceDASREADFAILExp.doc() = R"(DASREADFAIL Error thrown by SPICE.)";
    auto spiceDASWRITEFAILExp = py::register_exception<te::SpiceDASWRITEFAIL>(m, "SpiceDASWRITEFAIL", spiceErrorExp.ptr());
    spiceDASWRITEFAILExp.doc() = R"(DASWRITEFAIL Error thrown by SPICE.)";
    auto spiceDATAITEMLIMITEXCEEDEDExp = py::register_exception<te::SpiceDATAITEMLIMITEXCEEDED>(m, "SpiceDATAITEMLIMITEXCEEDED", spiceErrorExp.ptr());
    spiceDATAITEMLIMITEXCEEDEDExp.doc() = R"(DATAITEMLIMITEXCEEDED Error thrown by SPICE.)";
    auto spiceDATAREADFAILEDExp = py::register_exception<te::SpiceDATAREADFAILED>(m, "SpiceDATAREADFAILED", spiceErrorExp.ptr());
    spiceDATAREADFAILEDExp.doc() = R"(DATAREADFAILED Error thrown by SPICE.)";
    auto spiceDATAWIDTHERRORExp = py::register_exception<te::SpiceDATAWIDTHERROR>(m, "SpiceDATAWIDTHERROR", spiceErrorExp.ptr());
    spiceDATAWIDTHERRORExp.doc() = R"(DATAWIDTHERROR Error thrown by SPICE.)";
    auto spiceDATEEXPECTEDExp = py::register_exception<te::SpiceDATEEXPECTED>(m, "SpiceDATEEXPECTED", spiceErrorExp.ptr());
    spiceDATEEXPECTEDExp.doc() = R"(DATEEXPECTED Error thrown by SPICE.)";
    auto spiceDECODINGERRORExp = py::register_exception<te::SpiceDECODINGERROR>(m, "SpiceDECODINGERROR", spiceErrorExp.ptr());
    spiceDECODINGERRORExp.doc() = R"(DECODINGERROR Error thrown by SPICE.)";
    auto spiceDEGENERATECASEExp = py::register_exception<te::SpiceDEGENERATECASE>(m, "SpiceDEGENERATECASE", spiceErrorExp.ptr());
    spiceDEGENERATECASEExp.doc() = R"(DEGENERATECASE Error thrown by SPICE.)";
    auto spiceDEGENERATEINTERVALExp = py::register_exception<te::SpiceDEGENERATEINTERVAL>(m, "SpiceDEGENERATEINTERVAL", spiceErrorExp.ptr());
    spiceDEGENERATEINTERVALExp.doc() = R"(DEGENERATEINTERVAL Error thrown by SPICE.)";
    auto spiceDEGENERATESURFACEExp = py::register_exception<te::SpiceDEGENERATESURFACE>(m, "SpiceDEGENERATESURFACE", spiceErrorExp.ptr());
    spiceDEGENERATESURFACEExp.doc() = R"(DEGENERATESURFACE Error thrown by SPICE.)";
    auto spiceDEGREEOUTOFRANGEExp = py::register_exception<te::SpiceDEGREEOUTOFRANGE>(m, "SpiceDEGREEOUTOFRANGE", spiceErrorExp.ptr());
    spiceDEGREEOUTOFRANGEExp.doc() = R"(DEGREEOUTOFRANGE Error thrown by SPICE.)";
    auto spiceDEPENDENTVECTORSExp = py::register_exception<te::SpiceDEPENDENTVECTORS>(m, "SpiceDEPENDENTVECTORS", spiceErrorExp.ptr());
    spiceDEPENDENTVECTORSExp.doc() = R"(DEPENDENTVECTORS Error thrown by SPICE.)";
    auto spiceDEVICENAMETOOLONGExp = py::register_exception<te::SpiceDEVICENAMETOOLONG>(m, "SpiceDEVICENAMETOOLONG", spiceErrorExp.ptr());
    spiceDEVICENAMETOOLONGExp.doc() = R"(DEVICENAMETOOLONG Error thrown by SPICE.)";
    auto spiceDIFFLINETOOLARGEExp = py::register_exception<te::SpiceDIFFLINETOOLARGE>(m, "SpiceDIFFLINETOOLARGE", spiceErrorExp.ptr());
    spiceDIFFLINETOOLARGEExp.doc() = R"(DIFFLINETOOLARGE Error thrown by SPICE.)";
    auto spiceDIFFLINETOOSMALLExp = py::register_exception<te::SpiceDIFFLINETOOSMALL>(m, "SpiceDIFFLINETOOSMALL", spiceErrorExp.ptr());
    spiceDIFFLINETOOSMALLExp.doc() = R"(DIFFLINETOOSMALL Error thrown by SPICE.)";
    auto spiceDIMENSIONTOOSMALLExp = py::register_exception<te::SpiceDIMENSIONTOOSMALL>(m, "SpiceDIMENSIONTOOSMALL", spiceErrorExp.ptr());
    spiceDIMENSIONTOOSMALLExp.doc() = R"(DIMENSIONTOOSMALL Error thrown by SPICE.)";
    auto spiceDISARRAYExp = py::register_exception<te::SpiceDISARRAY>(m, "SpiceDISARRAY", spiceErrorExp.ptr());
    spiceDISARRAYExp.doc() = R"(DISARRAY Error thrown by SPICE.)";
    auto spiceDISORDERExp = py::register_exception<te::SpiceDISORDER>(m, "SpiceDISORDER", spiceErrorExp.ptr());
    spiceDISORDERExp.doc() = R"(DISORDER Error thrown by SPICE.)";
    auto spiceDIVIDEBYZEROExp = py::register_exception<te::SpiceDIVIDEBYZERO>(m, "SpiceDIVIDEBYZERO", spiceErrorExp.ptr());
    spiceDIVIDEBYZEROExp.doc() = R"(DIVIDEBYZERO Error thrown by SPICE.)";
    auto spiceDSKBOGUSENTRYExp = py::register_exception<te::SpiceDSKBOGUSENTRY>(m, "SpiceDSKBOGUSENTRY", spiceErrorExp.ptr());
    spiceDSKBOGUSENTRYExp.doc() = R"(DSKBOGUSENTRY Error thrown by SPICE.)";
    auto spiceDSKDATANOTFOUNDExp = py::register_exception<te::SpiceDSKDATANOTFOUND>(m, "SpiceDSKDATANOTFOUND", spiceErrorExp.ptr());
    spiceDSKDATANOTFOUNDExp.doc() = R"(DSKDATANOTFOUND Error thrown by SPICE.)";
    auto spiceDSKTOOMANYFILESExp = py::register_exception<te::SpiceDSKTOOMANYFILES>(m, "SpiceDSKTOOMANYFILES", spiceErrorExp.ptr());
    spiceDSKTOOMANYFILESExp.doc() = R"(DSKTOOMANYFILES Error thrown by SPICE.)";
    auto spiceDTOUTOFRANGEExp = py::register_exception<te::SpiceDTOUTOFRANGE>(m, "SpiceDTOUTOFRANGE", spiceErrorExp.ptr());
    spiceDTOUTOFRANGEExp.doc() = R"(DTOUTOFRANGE Error thrown by SPICE.)";
    auto spiceDUBIOUSMETHODExp = py::register_exception<te::SpiceDUBIOUSMETHOD>(m, "SpiceDUBIOUSMETHOD", spiceErrorExp.ptr());
    spiceDUBIOUSMETHODExp.doc() = R"(DUBIOUSMETHOD Error thrown by SPICE.)";
    auto spiceDUPLICATETIMESExp = py::register_exception<te::SpiceDUPLICATETIMES>(m, "SpiceDUPLICATETIMES", spiceErrorExp.ptr());
    spiceDUPLICATETIMESExp.doc() = R"(DUPLICATETIMES Error thrown by SPICE.)";
    auto spiceECCOUTOFBOUNDSExp = py::register_exception<te::SpiceECCOUTOFBOUNDS>(m, "SpiceECCOUTOFBOUNDS", spiceErrorExp.ptr());
    spiceECCOUTOFBOUNDSExp.doc() = R"(ECCOUTOFBOUNDS Error thrown by SPICE.)";
    auto spiceECCOUTOFRANGEExp = py::register_exception<te::SpiceECCOUTOFRANGE>(m, "SpiceECCOUTOFRANGE", spiceErrorExp.ptr());
    spiceECCOUTOFRANGEExp.doc() = R"(ECCOUTOFRANGE Error thrown by SPICE.)";
    auto spiceEKCOLATTRTABLEFULLExp = py::register_exception<te::SpiceEKCOLATTRTABLEFULL>(m, "SpiceEKCOLATTRTABLEFULL", spiceErrorExp.ptr());
    spiceEKCOLATTRTABLEFULLExp.doc() = R"(EKCOLATTRTABLEFULL Error thrown by SPICE.)";
    auto spiceEKCOLNUMMISMATCHExp = py::register_exception<te::SpiceEKCOLNUMMISMATCH>(m, "SpiceEKCOLNUMMISMATCH", spiceErrorExp.ptr());
    spiceEKCOLNUMMISMATCHExp.doc() = R"(EKCOLNUMMISMATCH Error thrown by SPICE.)";
    auto spiceEKFILEExp = py::register_exception<te::SpiceEKFILE>(m, "SpiceEKFILE", spiceErrorExp.ptr());
    spiceEKFILEExp.doc() = R"(EKFILE Error thrown by SPICE.)";
    auto spiceEKFILETABLEFULLExp = py::register_exception<te::SpiceEKFILETABLEFULL>(m, "SpiceEKFILETABLEFULL", spiceErrorExp.ptr());
    spiceEKFILETABLEFULLExp.doc() = R"(EKFILETABLEFULL Error thrown by SPICE.)";
    auto spiceEKMISSINGCOLUMNExp = py::register_exception<te::SpiceEKMISSINGCOLUMN>(m, "SpiceEKMISSINGCOLUMN", spiceErrorExp.ptr());
    spiceEKMISSINGCOLUMNExp.doc() = R"(EKMISSINGCOLUMN Error thrown by SPICE.)";
    auto spiceEKNOSEGMENTSExp = py::register_exception<te::SpiceEKNOSEGMENTS>(m, "SpiceEKNOSEGMENTS", spiceErrorExp.ptr());
    spiceEKNOSEGMENTSExp.doc() = R"(EKNOSEGMENTS Error thrown by SPICE.)";
    auto spiceEKSEGTABLEFULLExp = py::register_exception<te::SpiceEKSEGTABLEFULL>(m, "SpiceEKSEGTABLEFULL", spiceErrorExp.ptr());
    spiceEKSEGTABLEFULLExp.doc() = R"(EKSEGTABLEFULL Error thrown by SPICE.)";
    auto spiceEKTABLELISTFULLExp = py::register_exception<te::SpiceEKTABLELISTFULL>(m, "SpiceEKTABLELISTFULL", spiceErrorExp.ptr());
    spiceEKTABLELISTFULLExp.doc() = R"(EKTABLELISTFULL Error thrown by SPICE.)";
    auto spiceELEMENTSTOOSHORTExp = py::register_exception<te::SpiceELEMENTSTOOSHORT>(m, "SpiceELEMENTSTOOSHORT", spiceErrorExp.ptr());
    spiceELEMENTSTOOSHORTExp.doc() = R"(ELEMENTSTOOSHORT Error thrown by SPICE.)";
    auto spiceEMPTYINPUTFILEExp = py::register_exception<te::SpiceEMPTYINPUTFILE>(m, "SpiceEMPTYINPUTFILE", spiceErrorExp.ptr());
    spiceEMPTYINPUTFILEExp.doc() = R"(EMPTYINPUTFILE Error thrown by SPICE.)";
    auto spiceEMPTYSEGMENTExp = py::register_exception<te::SpiceEMPTYSEGMENT>(m, "SpiceEMPTYSEGMENT", spiceErrorExp.ptr());
    spiceEMPTYSEGMENTExp.doc() = R"(EMPTYSEGMENT Error thrown by SPICE.)";
    auto spiceENDOFFILEExp = py::register_exception<te::SpiceENDOFFILE>(m, "SpiceENDOFFILE", spiceErrorExp.ptr());
    spiceENDOFFILEExp.doc() = R"(ENDOFFILE Error thrown by SPICE.)";
    auto spiceENDPOINTSMATCHExp = py::register_exception<te::SpiceENDPOINTSMATCH>(m, "SpiceENDPOINTSMATCH", spiceErrorExp.ptr());
    spiceENDPOINTSMATCHExp.doc() = R"(ENDPOINTSMATCH Error thrown by SPICE.)";
    auto spiceERROREXITExp = py::register_exception<te::SpiceERROREXIT>(m, "SpiceERROREXIT", spiceErrorExp.ptr());
    spiceERROREXITExp.doc() = R"(ERROREXIT Error thrown by SPICE.)";
    auto spiceEVECOUTOFRANGEExp = py::register_exception<te::SpiceEVECOUTOFRANGE>(m, "SpiceEVECOUTOFRANGE", spiceErrorExp.ptr());
    spiceEVECOUTOFRANGEExp.doc() = R"(EVECOUTOFRANGE Error thrown by SPICE.)";
    auto spiceEVENHERMITDEGREEExp = py::register_exception<te::SpiceEVENHERMITDEGREE>(m, "SpiceEVENHERMITDEGREE", spiceErrorExp.ptr());
    spiceEVENHERMITDEGREEExp.doc() = R"(EVENHERMITDEGREE Error thrown by SPICE.)";
    auto spiceEVILBOGUSENTRYExp = py::register_exception<te::SpiceEVILBOGUSENTRY>(m, "SpiceEVILBOGUSENTRY", spiceErrorExp.ptr());
    spiceEVILBOGUSENTRYExp.doc() = R"(EVILBOGUSENTRY Error thrown by SPICE.)";
    auto spiceEXTERNALOPENExp = py::register_exception<te::SpiceEXTERNALOPEN>(m, "SpiceEXTERNALOPEN", spiceErrorExp.ptr());
    spiceEXTERNALOPENExp.doc() = R"(EXTERNALOPEN Error thrown by SPICE.)";
    auto spiceFACENOTFOUNDExp = py::register_exception<te::SpiceFACENOTFOUND>(m, "SpiceFACENOTFOUND", spiceErrorExp.ptr());
    spiceFACENOTFOUNDExp.doc() = R"(FACENOTFOUND Error thrown by SPICE.)";
    auto spiceFAKESCLKEXISTSExp = py::register_exception<te::SpiceFAKESCLKEXISTS>(m, "SpiceFAKESCLKEXISTS", spiceErrorExp.ptr());
    spiceFAKESCLKEXISTSExp.doc() = R"(FAKESCLKEXISTS Error thrown by SPICE.)";
    auto spiceFILARCHMISMATCHExp = py::register_exception<te::SpiceFILARCHMISMATCH>(m, "SpiceFILARCHMISMATCH", spiceErrorExp.ptr());
    spiceFILARCHMISMATCHExp.doc() = R"(FILARCHMISMATCH Error thrown by SPICE.)";
    auto spiceFILARCMISMATCHExp = py::register_exception<te::SpiceFILARCMISMATCH>(m, "SpiceFILARCMISMATCH", spiceErrorExp.ptr());
    spiceFILARCMISMATCHExp.doc() = R"(FILARCMISMATCH Error thrown by SPICE.)";
    auto spiceFILEALREADYEXISTSExp = py::register_exception<te::SpiceFILEALREADYEXISTS>(m, "SpiceFILEALREADYEXISTS", spiceErrorExp.ptr());
    spiceFILEALREADYEXISTSExp.doc() = R"(FILEALREADYEXISTS Error thrown by SPICE.)";
    auto spiceFILECURRENTLYOPENExp = py::register_exception<te::SpiceFILECURRENTLYOPEN>(m, "SpiceFILECURRENTLYOPEN", spiceErrorExp.ptr());
    spiceFILECURRENTLYOPENExp.doc() = R"(FILECURRENTLYOPEN Error thrown by SPICE.)";
    auto spiceFILEDELETEFAILEDExp = py::register_exception<te::SpiceFILEDELETEFAILED>(m, "SpiceFILEDELETEFAILED", spiceErrorExp.ptr());
    spiceFILEDELETEFAILEDExp.doc() = R"(FILEDELETEFAILED Error thrown by SPICE.)";
    auto spiceFILEDOESNOTEXISTExp = py::register_exception<te::SpiceFILEDOESNOTEXIST>(m, "SpiceFILEDOESNOTEXIST", spiceErrorExp.ptr());
    spiceFILEDOESNOTEXISTExp.doc() = R"(FILEDOESNOTEXIST Error thrown by SPICE.)";
    auto spiceFILEEXISTSExp = py::register_exception<te::SpiceFILEEXISTS>(m, "SpiceFILEEXISTS", spiceErrorExp.ptr());
    spiceFILEEXISTSExp.doc() = R"(FILEEXISTS Error thrown by SPICE.)";
    auto spiceFILEISNOTSPKExp = py::register_exception<te::SpiceFILEISNOTSPK>(m, "SpiceFILEISNOTSPK", spiceErrorExp.ptr());
    spiceFILEISNOTSPKExp.doc() = R"(FILEISNOTSPK Error thrown by SPICE.)";
    auto spiceFILENAMETOOLONGExp = py::register_exception<te::SpiceFILENAMETOOLONG>(m, "SpiceFILENAMETOOLONG", spiceErrorExp.ptr());
    spiceFILENAMETOOLONGExp.doc() = R"(FILENAMETOOLONG Error thrown by SPICE.)";
    auto spiceFILENOTCONNECTEDExp = py::register_exception<te::SpiceFILENOTCONNECTED>(m, "SpiceFILENOTCONNECTED", spiceErrorExp.ptr());
    spiceFILENOTCONNECTEDExp.doc() = R"(FILENOTCONNECTED Error thrown by SPICE.)";
    auto spiceFILENOTFOUNDExp = py::register_exception<te::SpiceFILENOTFOUND>(m, "SpiceFILENOTFOUND", spiceErrorExp.ptr());
    spiceFILENOTFOUNDExp.doc() = R"(FILENOTFOUND Error thrown by SPICE.)";
    auto spiceFILENOTOPENExp = py::register_exception<te::SpiceFILENOTOPEN>(m, "SpiceFILENOTOPEN", spiceErrorExp.ptr());
    spiceFILENOTOPENExp.doc() = R"(FILENOTOPEN Error thrown by SPICE.)";
    auto spiceFILEOPENCONFLICTExp = py::register_exception<te::SpiceFILEOPENCONFLICT>(m, "SpiceFILEOPENCONFLICT", spiceErrorExp.ptr());
    spiceFILEOPENCONFLICTExp.doc() = R"(FILEOPENCONFLICT Error thrown by SPICE.)";
    auto spiceFILEOPENERRORExp = py::register_exception<te::SpiceFILEOPENERROR>(m, "SpiceFILEOPENERROR", spiceErrorExp.ptr());
    spiceFILEOPENERRORExp.doc() = R"(FILEOPENERROR Error thrown by SPICE.)";
    auto spiceFILEOPENFAILExp = py::register_exception<te::SpiceFILEOPENFAIL>(m, "SpiceFILEOPENFAIL", spiceErrorExp.ptr());
    spiceFILEOPENFAILExp.doc() = R"(FILEOPENFAIL Error thrown by SPICE.)";
    auto spiceFILEOPENFAILEDExp = py::register_exception<te::SpiceFILEOPENFAILED>(m, "SpiceFILEOPENFAILED", spiceErrorExp.ptr());
    spiceFILEOPENFAILEDExp.doc() = R"(FILEOPENFAILED Error thrown by SPICE.)";
    auto spiceFILEREADERRORExp = py::register_exception<te::SpiceFILEREADERROR>(m, "SpiceFILEREADERROR", spiceErrorExp.ptr());
    spiceFILEREADERRORExp.doc() = R"(FILEREADERROR Error thrown by SPICE.)";
    auto spiceFILEREADFAILEDExp = py::register_exception<te::SpiceFILEREADFAILED>(m, "SpiceFILEREADFAILED", spiceErrorExp.ptr());
    spiceFILEREADFAILEDExp.doc() = R"(FILEREADFAILED Error thrown by SPICE.)";
    auto spiceFILETABLEFULLExp = py::register_exception<te::SpiceFILETABLEFULL>(m, "SpiceFILETABLEFULL", spiceErrorExp.ptr());
    spiceFILETABLEFULLExp.doc() = R"(FILETABLEFULL Error thrown by SPICE.)";
    auto spiceFILETRUNCATEDExp = py::register_exception<te::SpiceFILETRUNCATED>(m, "SpiceFILETRUNCATED", spiceErrorExp.ptr());
    spiceFILETRUNCATEDExp.doc() = R"(FILETRUNCATED Error thrown by SPICE.)";
    auto spiceFILEWRITEFAILEDExp = py::register_exception<te::SpiceFILEWRITEFAILED>(m, "SpiceFILEWRITEFAILED", spiceErrorExp.ptr());
    spiceFILEWRITEFAILEDExp.doc() = R"(FILEWRITEFAILED Error thrown by SPICE.)";
    auto spiceFIRSTRECORDMISMATCHExp = py::register_exception<te::SpiceFIRSTRECORDMISMATCH>(m, "SpiceFIRSTRECORDMISMATCH", spiceErrorExp.ptr());
    spiceFIRSTRECORDMISMATCHExp.doc() = R"(FIRSTRECORDMISMATCH Error thrown by SPICE.)";
    auto spiceFKDOESNTEXISTExp = py::register_exception<te::SpiceFKDOESNTEXIST>(m, "SpiceFKDOESNTEXIST", spiceErrorExp.ptr());
    spiceFKDOESNTEXISTExp.doc() = R"(FKDOESNTEXIST Error thrown by SPICE.)";
    auto spiceFMTITEMLIMITEXCEEDEDExp = py::register_exception<te::SpiceFMTITEMLIMITEXCEEDED>(m, "SpiceFMTITEMLIMITEXCEEDED", spiceErrorExp.ptr());
    spiceFMTITEMLIMITEXCEEDEDExp.doc() = R"(FMTITEMLIMITEXCEEDED Error thrown by SPICE.)";
    auto spiceFORMATDATAMISMATCHExp = py::register_exception<te::SpiceFORMATDATAMISMATCH>(m, "SpiceFORMATDATAMISMATCH", spiceErrorExp.ptr());
    spiceFORMATDATAMISMATCHExp.doc() = R"(FORMATDATAMISMATCH Error thrown by SPICE.)";
    auto spiceFORMATDOESNTAPPLYExp = py::register_exception<te::SpiceFORMATDOESNTAPPLY>(m, "SpiceFORMATDOESNTAPPLY", spiceErrorExp.ptr());
    spiceFORMATDOESNTAPPLYExp.doc() = R"(FORMATDOESNTAPPLY Error thrown by SPICE.)";
    auto spiceFORMATERRORExp = py::register_exception<te::SpiceFORMATERROR>(m, "SpiceFORMATERROR", spiceErrorExp.ptr());
    spiceFORMATERRORExp.doc() = R"(FORMATERROR Error thrown by SPICE.)";
    auto spiceFORMATNOTAPPLICABLEExp = py::register_exception<te::SpiceFORMATNOTAPPLICABLE>(m, "SpiceFORMATNOTAPPLICABLE", spiceErrorExp.ptr());
    spiceFORMATNOTAPPLICABLEExp.doc() = R"(FORMATNOTAPPLICABLE Error thrown by SPICE.)";
    auto spiceFORMATSTRINGTOOLONGExp = py::register_exception<te::SpiceFORMATSTRINGTOOLONG>(m, "SpiceFORMATSTRINGTOOLONG", spiceErrorExp.ptr());
    spiceFORMATSTRINGTOOLONGExp.doc() = R"(FORMATSTRINGTOOLONG Error thrown by SPICE.)";
    auto spiceFOVTOOWIDEExp = py::register_exception<te::SpiceFOVTOOWIDE>(m, "SpiceFOVTOOWIDE", spiceErrorExp.ptr());
    spiceFOVTOOWIDEExp.doc() = R"(FOVTOOWIDE Error thrown by SPICE.)";
    auto spiceFRAMEDATANOTFOUNDExp = py::register_exception<te::SpiceFRAMEDATANOTFOUND>(m, "SpiceFRAMEDATANOTFOUND", spiceErrorExp.ptr());
    spiceFRAMEDATANOTFOUNDExp.doc() = R"(FRAMEDATANOTFOUND Error thrown by SPICE.)";
    auto spiceFRAMEDEFERRORExp = py::register_exception<te::SpiceFRAMEDEFERROR>(m, "SpiceFRAMEDEFERROR", spiceErrorExp.ptr());
    spiceFRAMEDEFERRORExp.doc() = R"(FRAMEDEFERROR Error thrown by SPICE.)";
    auto spiceFRAMEIDNOTFOUNDExp = py::register_exception<te::SpiceFRAMEIDNOTFOUND>(m, "SpiceFRAMEIDNOTFOUND", spiceErrorExp.ptr());
    spiceFRAMEIDNOTFOUNDExp.doc() = R"(FRAMEIDNOTFOUND Error thrown by SPICE.)";
    auto spiceFRAMEINFONOTFOUNDExp = py::register_exception<te::SpiceFRAMEINFONOTFOUND>(m, "SpiceFRAMEINFONOTFOUND", spiceErrorExp.ptr());
    spiceFRAMEINFONOTFOUNDExp.doc() = R"(FRAMEINFONOTFOUND Error thrown by SPICE.)";
    auto spiceFRAMEMISSINGExp = py::register_exception<te::SpiceFRAMEMISSING>(m, "SpiceFRAMEMISSING", spiceErrorExp.ptr());
    spiceFRAMEMISSINGExp.doc() = R"(FRAMEMISSING Error thrown by SPICE.)";
    auto spiceFRAMENAMENOTFOUNDExp = py::register_exception<te::SpiceFRAMENAMENOTFOUND>(m, "SpiceFRAMENAMENOTFOUND", spiceErrorExp.ptr());
    spiceFRAMENAMENOTFOUNDExp.doc() = R"(FRAMENAMENOTFOUND Error thrown by SPICE.)";
    auto spiceFRAMENOTFOUNDExp = py::register_exception<te::SpiceFRAMENOTFOUND>(m, "SpiceFRAMENOTFOUND", spiceErrorExp.ptr());
    spiceFRAMENOTFOUNDExp.doc() = R"(FRAMENOTFOUND Error thrown by SPICE.)";
    auto spiceFRAMENOTRECOGNIZEDExp = py::register_exception<te::SpiceFRAMENOTRECOGNIZED>(m, "SpiceFRAMENOTRECOGNIZED", spiceErrorExp.ptr());
    spiceFRAMENOTRECOGNIZEDExp.doc() = R"(FRAMENOTRECOGNIZED Error thrown by SPICE.)";
    auto spiceFTFULLExp = py::register_exception<te::SpiceFTFULL>(m, "SpiceFTFULL", spiceErrorExp.ptr());
    spiceFTFULLExp.doc() = R"(FTFULL Error thrown by SPICE.)";
    auto spiceFTPXFERERRORExp = py::register_exception<te::SpiceFTPXFERERROR>(m, "SpiceFTPXFERERROR", spiceErrorExp.ptr());
    spiceFTPXFERERRORExp.doc() = R"(FTPXFERERROR Error thrown by SPICE.)";
    auto spiceGRIDTOOLARGEExp = py::register_exception<te::SpiceGRIDTOOLARGE>(m, "SpiceGRIDTOOLARGE", spiceErrorExp.ptr());
    spiceGRIDTOOLARGEExp.doc() = R"(GRIDTOOLARGE Error thrown by SPICE.)";
    auto spiceHANDLENOTFOUNDExp = py::register_exception<te::SpiceHANDLENOTFOUND>(m, "SpiceHANDLENOTFOUND", spiceErrorExp.ptr());
    spiceHANDLENOTFOUNDExp.doc() = R"(HANDLENOTFOUND Error thrown by SPICE.)";
    auto spiceHASHISFULLExp = py::register_exception<te::SpiceHASHISFULL>(m, "SpiceHASHISFULL", spiceErrorExp.ptr());
    spiceHASHISFULLExp.doc() = R"(HASHISFULL Error thrown by SPICE.)";
    auto spiceHLULOCKFAILEDExp = py::register_exception<te::SpiceHLULOCKFAILED>(m, "SpiceHLULOCKFAILED", spiceErrorExp.ptr());
    spiceHLULOCKFAILEDExp.doc() = R"(HLULOCKFAILED Error thrown by SPICE.)";
    auto spiceIDCODENOTFOUNDExp = py::register_exception<te::SpiceIDCODENOTFOUND>(m, "SpiceIDCODENOTFOUND", spiceErrorExp.ptr());
    spiceIDCODENOTFOUNDExp.doc() = R"(IDCODENOTFOUND Error thrown by SPICE.)";
    auto spiceIDSTRINGTOOLONGExp = py::register_exception<te::SpiceIDSTRINGTOOLONG>(m, "SpiceIDSTRINGTOOLONG", spiceErrorExp.ptr());
    spiceIDSTRINGTOOLONGExp.doc() = R"(IDSTRINGTOOLONG Error thrown by SPICE.)";
    auto spiceILLEGALCHARACTERExp = py::register_exception<te::SpiceILLEGALCHARACTER>(m, "SpiceILLEGALCHARACTER", spiceErrorExp.ptr());
    spiceILLEGALCHARACTERExp.doc() = R"(ILLEGALCHARACTER Error thrown by SPICE.)";
    auto spiceILLEGALOPTIONNAMEExp = py::register_exception<te::SpiceILLEGALOPTIONNAME>(m, "SpiceILLEGALOPTIONNAME", spiceErrorExp.ptr());
    spiceILLEGALOPTIONNAMEExp.doc() = R"(ILLEGALOPTIONNAME Error thrown by SPICE.)";
    auto spiceILLEGSHIFTDIRExp = py::register_exception<te::SpiceILLEGSHIFTDIR>(m, "SpiceILLEGSHIFTDIR", spiceErrorExp.ptr());
    spiceILLEGSHIFTDIRExp.doc() = R"(ILLEGSHIFTDIR Error thrown by SPICE.)";
    auto spiceILLEGTEMPLExp = py::register_exception<te::SpiceILLEGTEMPL>(m, "SpiceILLEGTEMPL", spiceErrorExp.ptr());
    spiceILLEGTEMPLExp.doc() = R"(ILLEGTEMPL Error thrown by SPICE.)";
    auto spiceIMMUTABLEVALUEExp = py::register_exception<te::SpiceIMMUTABLEVALUE>(m, "SpiceIMMUTABLEVALUE", spiceErrorExp.ptr());
    spiceIMMUTABLEVALUEExp.doc() = R"(IMMUTABLEVALUE Error thrown by SPICE.)";
    auto spiceIMPROPERFILEExp = py::register_exception<te::SpiceIMPROPERFILE>(m, "SpiceIMPROPERFILE", spiceErrorExp.ptr());
    spiceIMPROPERFILEExp.doc() = R"(IMPROPERFILE Error thrown by SPICE.)";
    auto spiceIMPROPEROPENExp = py::register_exception<te::SpiceIMPROPEROPEN>(m, "SpiceIMPROPEROPEN", spiceErrorExp.ptr());
    spiceIMPROPEROPENExp.doc() = R"(IMPROPEROPEN Error thrown by SPICE.)";
    auto spiceINACTIVEOBJECTExp = py::register_exception<te::SpiceINACTIVEOBJECT>(m, "SpiceINACTIVEOBJECT", spiceErrorExp.ptr());
    spiceINACTIVEOBJECTExp.doc() = R"(INACTIVEOBJECT Error thrown by SPICE.)";
    auto spiceINCOMPATIBLEEOLExp = py::register_exception<te::SpiceINCOMPATIBLEEOL>(m, "SpiceINCOMPATIBLEEOL", spiceErrorExp.ptr());
    spiceINCOMPATIBLEEOLExp.doc() = R"(INCOMPATIBLEEOL Error thrown by SPICE.)";
    auto spiceINCOMPATIBLENUMREFExp = py::register_exception<te::SpiceINCOMPATIBLENUMREF>(m, "SpiceINCOMPATIBLENUMREF", spiceErrorExp.ptr());
    spiceINCOMPATIBLENUMREFExp.doc() = R"(INCOMPATIBLENUMREF Error thrown by SPICE.)";
    auto spiceINCOMPATIBLESCALEExp = py::register_exception<te::SpiceINCOMPATIBLESCALE>(m, "SpiceINCOMPATIBLESCALE", spiceErrorExp.ptr());
    spiceINCOMPATIBLESCALEExp.doc() = R"(INCOMPATIBLESCALE Error thrown by SPICE.)";
    auto spiceINCOMPATIBLEUNITSExp = py::register_exception<te::SpiceINCOMPATIBLEUNITS>(m, "SpiceINCOMPATIBLEUNITS", spiceErrorExp.ptr());
    spiceINCOMPATIBLEUNITSExp.doc() = R"(INCOMPATIBLEUNITS Error thrown by SPICE.)";
    auto spiceINCOMPLETEFRAMEExp = py::register_exception<te::SpiceINCOMPLETEFRAME>(m, "SpiceINCOMPLETEFRAME", spiceErrorExp.ptr());
    spiceINCOMPLETEFRAMEExp.doc() = R"(INCOMPLETEFRAME Error thrown by SPICE.)";
    auto spiceINCONSISTCENTERIDExp = py::register_exception<te::SpiceINCONSISTCENTERID>(m, "SpiceINCONSISTCENTERID", spiceErrorExp.ptr());
    spiceINCONSISTCENTERIDExp.doc() = R"(INCONSISTCENTERID Error thrown by SPICE.)";
    auto spiceINCONSISTENTTIMESExp = py::register_exception<te::SpiceINCONSISTENTTIMES>(m, "SpiceINCONSISTENTTIMES", spiceErrorExp.ptr());
    spiceINCONSISTENTTIMESExp.doc() = R"(INCONSISTENTTIMES Error thrown by SPICE.)";
    auto spiceINCONSISTFRAMEExp = py::register_exception<te::SpiceINCONSISTFRAME>(m, "SpiceINCONSISTFRAME", spiceErrorExp.ptr());
    spiceINCONSISTFRAMEExp.doc() = R"(INCONSISTFRAME Error thrown by SPICE.)";
    auto spiceINCONSISTSTARTTIMEExp = py::register_exception<te::SpiceINCONSISTSTARTTIME>(m, "SpiceINCONSISTSTARTTIME", spiceErrorExp.ptr());
    spiceINCONSISTSTARTTIMEExp.doc() = R"(INCONSISTSTARTTIME Error thrown by SPICE.)";
    auto spiceINCONSISTSTOPTIMEExp = py::register_exception<te::SpiceINCONSISTSTOPTIME>(m, "SpiceINCONSISTSTOPTIME", spiceErrorExp.ptr());
    spiceINCONSISTSTOPTIMEExp.doc() = R"(INCONSISTSTOPTIME Error thrown by SPICE.)";
    auto spiceINCORRECTUSAGEExp = py::register_exception<te::SpiceINCORRECTUSAGE>(m, "SpiceINCORRECTUSAGE", spiceErrorExp.ptr());
    spiceINCORRECTUSAGEExp.doc() = R"(INCORRECTUSAGE Error thrown by SPICE.)";
    auto spiceINDEFINITELOCALSECONDExp = py::register_exception<te::SpiceINDEFINITELOCALSECOND>(m, "SpiceINDEFINITELOCALSECOND", spiceErrorExp.ptr());
    spiceINDEFINITELOCALSECONDExp.doc() = R"(INDEFINITELOCALSECOND Error thrown by SPICE.)";
    auto spiceINDEXOUTOFRANGEExp = py::register_exception<te::SpiceINDEXOUTOFRANGE>(m, "SpiceINDEXOUTOFRANGE", spiceErrorExp.ptr());
    spiceINDEXOUTOFRANGEExp.doc() = R"(INDEXOUTOFRANGE Error thrown by SPICE.)";
    auto spiceINDEXTOOLARGEExp = py::register_exception<te::SpiceINDEXTOOLARGE>(m, "SpiceINDEXTOOLARGE", spiceErrorExp.ptr());
    spiceINDEXTOOLARGEExp.doc() = R"(INDEXTOOLARGE Error thrown by SPICE.)";
    auto spiceINDICESOUTOFORDERExp = py::register_exception<te::SpiceINDICESOUTOFORDER>(m, "SpiceINDICESOUTOFORDER", spiceErrorExp.ptr());
    spiceINDICESOUTOFORDERExp.doc() = R"(INDICESOUTOFORDER Error thrown by SPICE.)";
    auto spiceINPUTDOESNOTEXISTExp = py::register_exception<te::SpiceINPUTDOESNOTEXIST>(m, "SpiceINPUTDOESNOTEXIST", spiceErrorExp.ptr());
    spiceINPUTDOESNOTEXISTExp.doc() = R"(INPUTDOESNOTEXIST Error thrown by SPICE.)";
    auto spiceINPUTFILENOTEXISTExp = py::register_exception<te::SpiceINPUTFILENOTEXIST>(m, "SpiceINPUTFILENOTEXIST", spiceErrorExp.ptr());
    spiceINPUTFILENOTEXISTExp.doc() = R"(INPUTFILENOTEXIST Error thrown by SPICE.)";
    auto spiceINPUTOUTOFBOUNDSExp = py::register_exception<te::SpiceINPUTOUTOFBOUNDS>(m, "SpiceINPUTOUTOFBOUNDS", spiceErrorExp.ptr());
    spiceINPUTOUTOFBOUNDSExp.doc() = R"(INPUTOUTOFBOUNDS Error thrown by SPICE.)";
    auto spiceINPUTSTOOLARGEExp = py::register_exception<te::SpiceINPUTSTOOLARGE>(m, "SpiceINPUTSTOOLARGE", spiceErrorExp.ptr());
    spiceINPUTSTOOLARGEExp.doc() = R"(INPUTSTOOLARGE Error thrown by SPICE.)";
    auto spiceINQUIREERRORExp = py::register_exception<te::SpiceINQUIREERROR>(m, "SpiceINQUIREERROR", spiceErrorExp.ptr());
    spiceINQUIREERRORExp.doc() = R"(INQUIREERROR Error thrown by SPICE.)";
    auto spiceINQUIREFAILEDExp = py::register_exception<te::SpiceINQUIREFAILED>(m, "SpiceINQUIREFAILED", spiceErrorExp.ptr());
    spiceINQUIREFAILEDExp.doc() = R"(INQUIREFAILED Error thrown by SPICE.)";
    auto spiceINSIDEBODYExp = py::register_exception<te::SpiceINSIDEBODY>(m, "SpiceINSIDEBODY", spiceErrorExp.ptr());
    spiceINSIDEBODYExp.doc() = R"(INSIDEBODY Error thrown by SPICE.)";
    auto spiceINSUFFICIENTANGLESExp = py::register_exception<te::SpiceINSUFFICIENTANGLES>(m, "SpiceINSUFFICIENTANGLES", spiceErrorExp.ptr());
    spiceINSUFFICIENTANGLESExp.doc() = R"(INSUFFICIENTANGLES Error thrown by SPICE.)";
    auto spiceINSUFFICIENTDATAExp = py::register_exception<te::SpiceINSUFFICIENTDATA>(m, "SpiceINSUFFICIENTDATA", spiceErrorExp.ptr());
    spiceINSUFFICIENTDATAExp.doc() = R"(INSUFFICIENTDATA Error thrown by SPICE.)";
    auto spiceINSUFFLENExp = py::register_exception<te::SpiceINSUFFLEN>(m, "SpiceINSUFFLEN", spiceErrorExp.ptr());
    spiceINSUFFLENExp.doc() = R"(INSUFFLEN Error thrown by SPICE.)";
    auto spiceINSUFPTRSIZEExp = py::register_exception<te::SpiceINSUFPTRSIZE>(m, "SpiceINSUFPTRSIZE", spiceErrorExp.ptr());
    spiceINSUFPTRSIZEExp.doc() = R"(INSUFPTRSIZE Error thrown by SPICE.)";
    auto spiceINTERVALSTARTNOTFOUNDExp = py::register_exception<te::SpiceINTERVALSTARTNOTFOUND>(m, "SpiceINTERVALSTARTNOTFOUND", spiceErrorExp.ptr());
    spiceINTERVALSTARTNOTFOUNDExp.doc() = R"(INTERVALSTARTNOTFOUND Error thrown by SPICE.)";
    auto spiceINTINDEXTOOSMALLExp = py::register_exception<te::SpiceINTINDEXTOOSMALL>(m, "SpiceINTINDEXTOOSMALL", spiceErrorExp.ptr());
    spiceINTINDEXTOOSMALLExp.doc() = R"(INTINDEXTOOSMALL Error thrown by SPICE.)";
    auto spiceINTLENNOTPOSExp = py::register_exception<te::SpiceINTLENNOTPOS>(m, "SpiceINTLENNOTPOS", spiceErrorExp.ptr());
    spiceINTLENNOTPOSExp.doc() = R"(INTLENNOTPOS Error thrown by SPICE.)";
    auto spiceINTOUTOFRANGEExp = py::register_exception<te::SpiceINTOUTOFRANGE>(m, "SpiceINTOUTOFRANGE", spiceErrorExp.ptr());
    spiceINTOUTOFRANGEExp.doc() = R"(INTOUTOFRANGE Error thrown by SPICE.)";
    auto spiceINVALIDACCESSExp = py::register_exception<te::SpiceINVALIDACCESS>(m, "SpiceINVALIDACCESS", spiceErrorExp.ptr());
    spiceINVALIDACCESSExp.doc() = R"(INVALIDACCESS Error thrown by SPICE.)";
    auto spiceINVALIDACTIONExp = py::register_exception<te::SpiceINVALIDACTION>(m, "SpiceINVALIDACTION", spiceErrorExp.ptr());
    spiceINVALIDACTIONExp.doc() = R"(INVALIDACTION Error thrown by SPICE.)";
    auto spiceINVALIDADDExp = py::register_exception<te::SpiceINVALIDADD>(m, "SpiceINVALIDADD", spiceErrorExp.ptr());
    spiceINVALIDADDExp.doc() = R"(INVALIDADD Error thrown by SPICE.)";
    auto spiceINVALIDADDRESSExp = py::register_exception<te::SpiceINVALIDADDRESS>(m, "SpiceINVALIDADDRESS", spiceErrorExp.ptr());
    spiceINVALIDADDRESSExp.doc() = R"(INVALIDADDRESS Error thrown by SPICE.)";
    auto spiceINVALIDANGLEExp = py::register_exception<te::SpiceINVALIDANGLE>(m, "SpiceINVALIDANGLE", spiceErrorExp.ptr());
    spiceINVALIDANGLEExp.doc() = R"(INVALIDANGLE Error thrown by SPICE.)";
    auto spiceINVALIDARCHTYPEExp = py::register_exception<te::SpiceINVALIDARCHTYPE>(m, "SpiceINVALIDARCHTYPE", spiceErrorExp.ptr());
    spiceINVALIDARCHTYPEExp.doc() = R"(INVALIDARCHTYPE Error thrown by SPICE.)";
    auto spiceINVALIDARGUMENTExp = py::register_exception<te::SpiceINVALIDARGUMENT>(m, "SpiceINVALIDARGUMENT", spiceErrorExp.ptr());
    spiceINVALIDARGUMENTExp.doc() = R"(INVALIDARGUMENT Error thrown by SPICE.)";
    auto spiceINVALIDAXISExp = py::register_exception<te::SpiceINVALIDAXIS>(m, "SpiceINVALIDAXIS", spiceErrorExp.ptr());
    spiceINVALIDAXISExp.doc() = R"(INVALIDAXIS Error thrown by SPICE.)";
    auto spiceINVALIDAXISLENGTHExp = py::register_exception<te::SpiceINVALIDAXISLENGTH>(m, "SpiceINVALIDAXISLENGTH", spiceErrorExp.ptr());
    spiceINVALIDAXISLENGTHExp.doc() = R"(INVALIDAXISLENGTH Error thrown by SPICE.)";
    auto spiceINVALIDBOUNDSExp = py::register_exception<te::SpiceINVALIDBOUNDS>(m, "SpiceINVALIDBOUNDS", spiceErrorExp.ptr());
    spiceINVALIDBOUNDSExp.doc() = R"(INVALIDBOUNDS Error thrown by SPICE.)";
    auto spiceINVALIDCARDINALITYExp = py::register_exception<te::SpiceINVALIDCARDINALITY>(m, "SpiceINVALIDCARDINALITY", spiceErrorExp.ptr());
    spiceINVALIDCARDINALITYExp.doc() = R"(INVALIDCARDINALITY Error thrown by SPICE.)";
    auto spiceINVALIDCASEExp = py::register_exception<te::SpiceINVALIDCASE>(m, "SpiceINVALIDCASE", spiceErrorExp.ptr());
    spiceINVALIDCASEExp.doc() = R"(INVALIDCASE Error thrown by SPICE.)";
    auto spiceINVALIDCOLUMNExp = py::register_exception<te::SpiceINVALIDCOLUMN>(m, "SpiceINVALIDCOLUMN", spiceErrorExp.ptr());
    spiceINVALIDCOLUMNExp.doc() = R"(INVALIDCOLUMN Error thrown by SPICE.)";
    auto spiceINVALIDCONSTSTEPExp = py::register_exception<te::SpiceINVALIDCONSTSTEP>(m, "SpiceINVALIDCONSTSTEP", spiceErrorExp.ptr());
    spiceINVALIDCONSTSTEPExp.doc() = R"(INVALIDCONSTSTEP Error thrown by SPICE.)";
    auto spiceINVALIDCOUNTExp = py::register_exception<te::SpiceINVALIDCOUNT>(m, "SpiceINVALIDCOUNT", spiceErrorExp.ptr());
    spiceINVALIDCOUNTExp.doc() = R"(INVALIDCOUNT Error thrown by SPICE.)";
    auto spiceINVALIDDATAExp = py::register_exception<te::SpiceINVALIDDATA>(m, "SpiceINVALIDDATA", spiceErrorExp.ptr());
    spiceINVALIDDATAExp.doc() = R"(INVALIDDATA Error thrown by SPICE.)";
    auto spiceINVALIDDATACOUNTExp = py::register_exception<te::SpiceINVALIDDATACOUNT>(m, "SpiceINVALIDDATACOUNT", spiceErrorExp.ptr());
    spiceINVALIDDATACOUNTExp.doc() = R"(INVALIDDATACOUNT Error thrown by SPICE.)";
    auto spiceINVALIDDATATYPEExp = py::register_exception<te::SpiceINVALIDDATATYPE>(m, "SpiceINVALIDDATATYPE", spiceErrorExp.ptr());
    spiceINVALIDDATATYPEExp.doc() = R"(INVALIDDATATYPE Error thrown by SPICE.)";
    auto spiceINVALIDDEGREEExp = py::register_exception<te::SpiceINVALIDDEGREE>(m, "SpiceINVALIDDEGREE", spiceErrorExp.ptr());
    spiceINVALIDDEGREEExp.doc() = R"(INVALIDDEGREE Error thrown by SPICE.)";
    auto spiceINVALIDDESCRTIMEExp = py::register_exception<te::SpiceINVALIDDESCRTIME>(m, "SpiceINVALIDDESCRTIME", spiceErrorExp.ptr());
    spiceINVALIDDESCRTIMEExp.doc() = R"(INVALIDDESCRTIME Error thrown by SPICE.)";
    auto spiceINVALIDDIMENSIONExp = py::register_exception<te::SpiceINVALIDDIMENSION>(m, "SpiceINVALIDDIMENSION", spiceErrorExp.ptr());
    spiceINVALIDDIMENSIONExp.doc() = R"(INVALIDDIMENSION Error thrown by SPICE.)";
    auto spiceINVALIDDIRECTIONExp = py::register_exception<te::SpiceINVALIDDIRECTION>(m, "SpiceINVALIDDIRECTION", spiceErrorExp.ptr());
    spiceINVALIDDIRECTIONExp.doc() = R"(INVALIDDIRECTION Error thrown by SPICE.)";
    auto spiceINVALIDDIVISORExp = py::register_exception<te::SpiceINVALIDDIVISOR>(m, "SpiceINVALIDDIVISOR", spiceErrorExp.ptr());
    spiceINVALIDDIVISORExp.doc() = R"(INVALIDDIVISOR Error thrown by SPICE.)";
    auto spiceINVALIDELLIPSEExp = py::register_exception<te::SpiceINVALIDELLIPSE>(m, "SpiceINVALIDELLIPSE", spiceErrorExp.ptr());
    spiceINVALIDELLIPSEExp.doc() = R"(INVALIDELLIPSE Error thrown by SPICE.)";
    auto spiceINVALIDENDPNTSPECExp = py::register_exception<te::SpiceINVALIDENDPNTSPEC>(m, "SpiceINVALIDENDPNTSPEC", spiceErrorExp.ptr());
    spiceINVALIDENDPNTSPECExp.doc() = R"(INVALIDENDPNTSPEC Error thrown by SPICE.)";
    auto spiceINVALIDENDPTSExp = py::register_exception<te::SpiceINVALIDENDPTS>(m, "SpiceINVALIDENDPTS", spiceErrorExp.ptr());
    spiceINVALIDENDPTSExp.doc() = R"(INVALIDENDPTS Error thrown by SPICE.)";
    auto spiceINVALIDEPOCHExp = py::register_exception<te::SpiceINVALIDEPOCH>(m, "SpiceINVALIDEPOCH", spiceErrorExp.ptr());
    spiceINVALIDEPOCHExp.doc() = R"(INVALIDEPOCH Error thrown by SPICE.)";
    auto spiceINVALIDFILETYPEExp = py::register_exception<te::SpiceINVALIDFILETYPE>(m, "SpiceINVALIDFILETYPE", spiceErrorExp.ptr());
    spiceINVALIDFILETYPEExp.doc() = R"(INVALIDFILETYPE Error thrown by SPICE.)";
    auto spiceINVALIDFIXREFExp = py::register_exception<te::SpiceINVALIDFIXREF>(m, "SpiceINVALIDFIXREF", spiceErrorExp.ptr());
    spiceINVALIDFIXREFExp.doc() = R"(INVALIDFIXREF Error thrown by SPICE.)";
    auto spiceINVALIDFLAGExp = py::register_exception<te::SpiceINVALIDFLAG>(m, "SpiceINVALIDFLAG", spiceErrorExp.ptr());
    spiceINVALIDFLAGExp.doc() = R"(INVALIDFLAG Error thrown by SPICE.)";
    auto spiceINVALIDFORMATExp = py::register_exception<te::SpiceINVALIDFORMAT>(m, "SpiceINVALIDFORMAT", spiceErrorExp.ptr());
    spiceINVALIDFORMATExp.doc() = R"(INVALIDFORMAT Error thrown by SPICE.)";
    auto spiceINVALIDFOVExp = py::register_exception<te::SpiceINVALIDFOV>(m, "SpiceINVALIDFOV", spiceErrorExp.ptr());
    spiceINVALIDFOVExp.doc() = R"(INVALIDFOV Error thrown by SPICE.)";
    auto spiceINVALIDFRAMEExp = py::register_exception<te::SpiceINVALIDFRAME>(m, "SpiceINVALIDFRAME", spiceErrorExp.ptr());
    spiceINVALIDFRAMEExp.doc() = R"(INVALIDFRAME Error thrown by SPICE.)";
    auto spiceINVALIDFRAMEDEFExp = py::register_exception<te::SpiceINVALIDFRAMEDEF>(m, "SpiceINVALIDFRAMEDEF", spiceErrorExp.ptr());
    spiceINVALIDFRAMEDEFExp.doc() = R"(INVALIDFRAMEDEF Error thrown by SPICE.)";
    auto spiceINVALIDGEOMETRYExp = py::register_exception<te::SpiceINVALIDGEOMETRY>(m, "SpiceINVALIDGEOMETRY", spiceErrorExp.ptr());
    spiceINVALIDGEOMETRYExp.doc() = R"(INVALIDGEOMETRY Error thrown by SPICE.)";
    auto spiceINVALIDHANDLEExp = py::register_exception<te::SpiceINVALIDHANDLE>(m, "SpiceINVALIDHANDLE", spiceErrorExp.ptr());
    spiceINVALIDHANDLEExp.doc() = R"(INVALIDHANDLE Error thrown by SPICE.)";
    auto spiceINVALIDINDEXExp = py::register_exception<te::SpiceINVALIDINDEX>(m, "SpiceINVALIDINDEX", spiceErrorExp.ptr());
    spiceINVALIDINDEXExp.doc() = R"(INVALIDINDEX Error thrown by SPICE.)";
    auto spiceINVALIDINTEGERExp = py::register_exception<te::SpiceINVALIDINTEGER>(m, "SpiceINVALIDINTEGER", spiceErrorExp.ptr());
    spiceINVALIDINTEGERExp.doc() = R"(INVALIDINTEGER Error thrown by SPICE.)";
    auto spiceINVALIDLIMBTYPEExp = py::register_exception<te::SpiceINVALIDLIMBTYPE>(m, "SpiceINVALIDLIMBTYPE", spiceErrorExp.ptr());
    spiceINVALIDLIMBTYPEExp.doc() = R"(INVALIDLIMBTYPE Error thrown by SPICE.)";
    auto spiceINVALIDLISTITEMExp = py::register_exception<te::SpiceINVALIDLISTITEM>(m, "SpiceINVALIDLISTITEM", spiceErrorExp.ptr());
    spiceINVALIDLISTITEMExp.doc() = R"(INVALIDLISTITEM Error thrown by SPICE.)";
    auto spiceINVALIDLOCUSExp = py::register_exception<te::SpiceINVALIDLOCUS>(m, "SpiceINVALIDLOCUS", spiceErrorExp.ptr());
    spiceINVALIDLOCUSExp.doc() = R"(INVALIDLOCUS Error thrown by SPICE.)";
    auto spiceINVALIDLONEXTENTExp = py::register_exception<te::SpiceINVALIDLONEXTENT>(m, "SpiceINVALIDLONEXTENT", spiceErrorExp.ptr());
    spiceINVALIDLONEXTENTExp.doc() = R"(INVALIDLONEXTENT Error thrown by SPICE.)";
    auto spiceINVALIDMETADATAExp = py::register_exception<te::SpiceINVALIDMETADATA>(m, "SpiceINVALIDMETADATA", spiceErrorExp.ptr());
    spiceINVALIDMETADATAExp.doc() = R"(INVALIDMETADATA Error thrown by SPICE.)";
    auto spiceINVALIDMETHODExp = py::register_exception<te::SpiceINVALIDMETHOD>(m, "SpiceINVALIDMETHOD", spiceErrorExp.ptr());
    spiceINVALIDMETHODExp.doc() = R"(INVALIDMETHOD Error thrown by SPICE.)";
    auto spiceINVALIDMSGTYPEExp = py::register_exception<te::SpiceINVALIDMSGTYPE>(m, "SpiceINVALIDMSGTYPE", spiceErrorExp.ptr());
    spiceINVALIDMSGTYPEExp.doc() = R"(INVALIDMSGTYPE Error thrown by SPICE.)";
    auto spiceINVALIDNAMEExp = py::register_exception<te::SpiceINVALIDNAME>(m, "SpiceINVALIDNAME", spiceErrorExp.ptr());
    spiceINVALIDNAMEExp.doc() = R"(INVALIDNAME Error thrown by SPICE.)";
    auto spiceINVALIDNODEExp = py::register_exception<te::SpiceINVALIDNODE>(m, "SpiceINVALIDNODE", spiceErrorExp.ptr());
    spiceINVALIDNODEExp.doc() = R"(INVALIDNODE Error thrown by SPICE.)";
    auto spiceINVALIDNUMBEROFINTERVALSExp = py::register_exception<te::SpiceINVALIDNUMBEROFINTERVALS>(m, "SpiceINVALIDNUMBEROFINTERVALS", spiceErrorExp.ptr());
    spiceINVALIDNUMBEROFINTERVALSExp.doc() = R"(INVALIDNUMBEROFINTERVALS Error thrown by SPICE.)";
    auto spiceINVALIDNUMBEROFRECORDSExp = py::register_exception<te::SpiceINVALIDNUMBEROFRECORDS>(m, "SpiceINVALIDNUMBEROFRECORDS", spiceErrorExp.ptr());
    spiceINVALIDNUMBEROFRECORDSExp.doc() = R"(INVALIDNUMBEROFRECORDS Error thrown by SPICE.)";
    auto spiceINVALIDNUMINTExp = py::register_exception<te::SpiceINVALIDNUMINT>(m, "SpiceINVALIDNUMINT", spiceErrorExp.ptr());
    spiceINVALIDNUMINTExp.doc() = R"(INVALIDNUMINT Error thrown by SPICE.)";
    auto spiceINVALIDNUMINTSExp = py::register_exception<te::SpiceINVALIDNUMINTS>(m, "SpiceINVALIDNUMINTS", spiceErrorExp.ptr());
    spiceINVALIDNUMINTSExp.doc() = R"(INVALIDNUMINTS Error thrown by SPICE.)";
    auto spiceINVALIDNUMRECExp = py::register_exception<te::SpiceINVALIDNUMREC>(m, "SpiceINVALIDNUMREC", spiceErrorExp.ptr());
    spiceINVALIDNUMRECExp.doc() = R"(INVALIDNUMREC Error thrown by SPICE.)";
    auto spiceINVALIDOCCTYPEExp = py::register_exception<te::SpiceINVALIDOCCTYPE>(m, "SpiceINVALIDOCCTYPE", spiceErrorExp.ptr());
    spiceINVALIDOCCTYPEExp.doc() = R"(INVALIDOCCTYPE Error thrown by SPICE.)";
    auto spiceINVALIDOPERATIONExp = py::register_exception<te::SpiceINVALIDOPERATION>(m, "SpiceINVALIDOPERATION", spiceErrorExp.ptr());
    spiceINVALIDOPERATIONExp.doc() = R"(INVALIDOPERATION Error thrown by SPICE.)";
    auto spiceINVALIDOPTIONExp = py::register_exception<te::SpiceINVALIDOPTION>(m, "SpiceINVALIDOPTION", spiceErrorExp.ptr());
    spiceINVALIDOPTIONExp.doc() = R"(INVALIDOPTION Error thrown by SPICE.)";
    auto spiceINVALIDPLANEExp = py::register_exception<te::SpiceINVALIDPLANE>(m, "SpiceINVALIDPLANE", spiceErrorExp.ptr());
    spiceINVALIDPLANEExp.doc() = R"(INVALIDPLANE Error thrown by SPICE.)";
    auto spiceINVALIDRADIIExp = py::register_exception<te::SpiceINVALIDRADII>(m, "SpiceINVALIDRADII", spiceErrorExp.ptr());
    spiceINVALIDRADIIExp.doc() = R"(INVALIDRADII Error thrown by SPICE.)";
    auto spiceINVALIDRADIUSExp = py::register_exception<te::SpiceINVALIDRADIUS>(m, "SpiceINVALIDRADIUS", spiceErrorExp.ptr());
    spiceINVALIDRADIUSExp.doc() = R"(INVALIDRADIUS Error thrown by SPICE.)";
    auto spiceINVALIDREFFRAMEExp = py::register_exception<te::SpiceINVALIDREFFRAME>(m, "SpiceINVALIDREFFRAME", spiceErrorExp.ptr());
    spiceINVALIDREFFRAMEExp.doc() = R"(INVALIDREFFRAME Error thrown by SPICE.)";
    auto spiceINVALIDREFVALExp = py::register_exception<te::SpiceINVALIDREFVAL>(m, "SpiceINVALIDREFVAL", spiceErrorExp.ptr());
    spiceINVALIDREFVALExp.doc() = R"(INVALIDREFVAL Error thrown by SPICE.)";
    auto spiceINVALIDROLLSTEPExp = py::register_exception<te::SpiceINVALIDROLLSTEP>(m, "SpiceINVALIDROLLSTEP", spiceErrorExp.ptr());
    spiceINVALIDROLLSTEPExp.doc() = R"(INVALIDROLLSTEP Error thrown by SPICE.)";
    auto spiceINVALIDSCALEExp = py::register_exception<te::SpiceINVALIDSCALE>(m, "SpiceINVALIDSCALE", spiceErrorExp.ptr());
    spiceINVALIDSCALEExp.doc() = R"(INVALIDSCALE Error thrown by SPICE.)";
    auto spiceINVALIDSCLKRATEExp = py::register_exception<te::SpiceINVALIDSCLKRATE>(m, "SpiceINVALIDSCLKRATE", spiceErrorExp.ptr());
    spiceINVALIDSCLKRATEExp.doc() = R"(INVALIDSCLKRATE Error thrown by SPICE.)";
    auto spiceINVALIDSCLKSTRINGExp = py::register_exception<te::SpiceINVALIDSCLKSTRING>(m, "SpiceINVALIDSCLKSTRING", spiceErrorExp.ptr());
    spiceINVALIDSCLKSTRINGExp.doc() = R"(INVALIDSCLKSTRING Error thrown by SPICE.)";
    auto spiceINVALIDSCLKTIMEExp = py::register_exception<te::SpiceINVALIDSCLKTIME>(m, "SpiceINVALIDSCLKTIME", spiceErrorExp.ptr());
    spiceINVALIDSCLKTIMEExp.doc() = R"(INVALIDSCLKTIME Error thrown by SPICE.)";
    auto spiceINVALIDSEARCHSTEPExp = py::register_exception<te::SpiceINVALIDSEARCHSTEP>(m, "SpiceINVALIDSEARCHSTEP", spiceErrorExp.ptr());
    spiceINVALIDSEARCHSTEPExp.doc() = R"(INVALIDSEARCHSTEP Error thrown by SPICE.)";
    auto spiceINVALIDSELECTIONExp = py::register_exception<te::SpiceINVALIDSELECTION>(m, "SpiceINVALIDSELECTION", spiceErrorExp.ptr());
    spiceINVALIDSELECTIONExp.doc() = R"(INVALIDSELECTION Error thrown by SPICE.)";
    auto spiceINVALIDSHADOWExp = py::register_exception<te::SpiceINVALIDSHADOW>(m, "SpiceINVALIDSHADOW", spiceErrorExp.ptr());
    spiceINVALIDSHADOWExp.doc() = R"(INVALIDSHADOW Error thrown by SPICE.)";
    auto spiceINVALIDSHAPEExp = py::register_exception<te::SpiceINVALIDSHAPE>(m, "SpiceINVALIDSHAPE", spiceErrorExp.ptr());
    spiceINVALIDSHAPEExp.doc() = R"(INVALIDSHAPE Error thrown by SPICE.)";
    auto spiceINVALIDSHAPECOMBOExp = py::register_exception<te::SpiceINVALIDSHAPECOMBO>(m, "SpiceINVALIDSHAPECOMBO", spiceErrorExp.ptr());
    spiceINVALIDSHAPECOMBOExp.doc() = R"(INVALIDSHAPECOMBO Error thrown by SPICE.)";
    auto spiceINVALIDSIZEExp = py::register_exception<te::SpiceINVALIDSIZE>(m, "SpiceINVALIDSIZE", spiceErrorExp.ptr());
    spiceINVALIDSIZEExp.doc() = R"(INVALIDSIZE Error thrown by SPICE.)";
    auto spiceINVALIDSTARTTIMEExp = py::register_exception<te::SpiceINVALIDSTARTTIME>(m, "SpiceINVALIDSTARTTIME", spiceErrorExp.ptr());
    spiceINVALIDSTARTTIMEExp.doc() = R"(INVALIDSTARTTIME Error thrown by SPICE.)";
    auto spiceINVALIDSTATEExp = py::register_exception<te::SpiceINVALIDSTATE>(m, "SpiceINVALIDSTATE", spiceErrorExp.ptr());
    spiceINVALIDSTATEExp.doc() = R"(INVALIDSTATE Error thrown by SPICE.)";
    auto spiceINVALIDSTEPExp = py::register_exception<te::SpiceINVALIDSTEP>(m, "SpiceINVALIDSTEP", spiceErrorExp.ptr());
    spiceINVALIDSTEPExp.doc() = R"(INVALIDSTEP Error thrown by SPICE.)";
    auto spiceINVALIDSTEPSIZEExp = py::register_exception<te::SpiceINVALIDSTEPSIZE>(m, "SpiceINVALIDSTEPSIZE", spiceErrorExp.ptr());
    spiceINVALIDSTEPSIZEExp.doc() = R"(INVALIDSTEPSIZE Error thrown by SPICE.)";
    auto spiceINVALIDSUBLISTExp = py::register_exception<te::SpiceINVALIDSUBLIST>(m, "SpiceINVALIDSUBLIST", spiceErrorExp.ptr());
    spiceINVALIDSUBLISTExp.doc() = R"(INVALIDSUBLIST Error thrown by SPICE.)";
    auto spiceINVALIDSUBTYPEExp = py::register_exception<te::SpiceINVALIDSUBTYPE>(m, "SpiceINVALIDSUBTYPE", spiceErrorExp.ptr());
    spiceINVALIDSUBTYPEExp.doc() = R"(INVALIDSUBTYPE Error thrown by SPICE.)";
    auto spiceINVALIDTABLENAMEExp = py::register_exception<te::SpiceINVALIDTABLENAME>(m, "SpiceINVALIDTABLENAME", spiceErrorExp.ptr());
    spiceINVALIDTABLENAMEExp.doc() = R"(INVALIDTABLENAME Error thrown by SPICE.)";
    auto spiceINVALIDTABLESIZEExp = py::register_exception<te::SpiceINVALIDTABLESIZE>(m, "SpiceINVALIDTABLESIZE", spiceErrorExp.ptr());
    spiceINVALIDTABLESIZEExp.doc() = R"(INVALIDTABLESIZE Error thrown by SPICE.)";
    auto spiceINVALIDTARGETExp = py::register_exception<te::SpiceINVALIDTARGET>(m, "SpiceINVALIDTARGET", spiceErrorExp.ptr());
    spiceINVALIDTARGETExp.doc() = R"(INVALIDTARGET Error thrown by SPICE.)";
    auto spiceINVALIDTERMTYPEExp = py::register_exception<te::SpiceINVALIDTERMTYPE>(m, "SpiceINVALIDTERMTYPE", spiceErrorExp.ptr());
    spiceINVALIDTERMTYPEExp.doc() = R"(INVALIDTERMTYPE Error thrown by SPICE.)";
    auto spiceINVALIDTEXTExp = py::register_exception<te::SpiceINVALIDTEXT>(m, "SpiceINVALIDTEXT", spiceErrorExp.ptr());
    spiceINVALIDTEXTExp.doc() = R"(INVALIDTEXT Error thrown by SPICE.)";
    auto spiceINVALIDTIMEFORMATExp = py::register_exception<te::SpiceINVALIDTIMEFORMAT>(m, "SpiceINVALIDTIMEFORMAT", spiceErrorExp.ptr());
    spiceINVALIDTIMEFORMATExp.doc() = R"(INVALIDTIMEFORMAT Error thrown by SPICE.)";
    auto spiceINVALIDTIMESTRINGExp = py::register_exception<te::SpiceINVALIDTIMESTRING>(m, "SpiceINVALIDTIMESTRING", spiceErrorExp.ptr());
    spiceINVALIDTIMESTRINGExp.doc() = R"(INVALIDTIMESTRING Error thrown by SPICE.)";
    auto spiceINVALIDTLEORDERExp = py::register_exception<te::SpiceINVALIDTLEORDER>(m, "SpiceINVALIDTLEORDER", spiceErrorExp.ptr());
    spiceINVALIDTLEORDERExp.doc() = R"(INVALIDTLEORDER Error thrown by SPICE.)";
    auto spiceINVALIDTOLERANCEExp = py::register_exception<te::SpiceINVALIDTOLERANCE>(m, "SpiceINVALIDTOLERANCE", spiceErrorExp.ptr());
    spiceINVALIDTOLERANCEExp.doc() = R"(INVALIDTOLERANCE Error thrown by SPICE.)";
    auto spiceINVALIDTYPEExp = py::register_exception<te::SpiceINVALIDTYPE>(m, "SpiceINVALIDTYPE", spiceErrorExp.ptr());
    spiceINVALIDTYPEExp.doc() = R"(INVALIDTYPE Error thrown by SPICE.)";
    auto spiceINVALIDVALUEExp = py::register_exception<te::SpiceINVALIDVALUE>(m, "SpiceINVALIDVALUE", spiceErrorExp.ptr());
    spiceINVALIDVALUEExp.doc() = R"(INVALIDVALUE Error thrown by SPICE.)";
    auto spiceINVALIDVERTEXExp = py::register_exception<te::SpiceINVALIDVERTEX>(m, "SpiceINVALIDVERTEX", spiceErrorExp.ptr());
    spiceINVALIDVERTEXExp.doc() = R"(INVALIDVERTEX Error thrown by SPICE.)";
    auto spiceINVERSTARTSTOPTIMEExp = py::register_exception<te::SpiceINVERSTARTSTOPTIME>(m, "SpiceINVERSTARTSTOPTIME", spiceErrorExp.ptr());
    spiceINVERSTARTSTOPTIMEExp.doc() = R"(INVERSTARTSTOPTIME Error thrown by SPICE.)";
    auto spiceIRFNOTRECExp = py::register_exception<te::SpiceIRFNOTREC>(m, "SpiceIRFNOTREC", spiceErrorExp.ptr());
    spiceIRFNOTRECExp.doc() = R"(IRFNOTREC Error thrown by SPICE.)";
    auto spiceITEMNOTFOUNDExp = py::register_exception<te::SpiceITEMNOTFOUND>(m, "SpiceITEMNOTFOUND", spiceErrorExp.ptr());
    spiceITEMNOTFOUNDExp.doc() = R"(ITEMNOTFOUND Error thrown by SPICE.)";
    auto spiceITEMNOTRECOGNIZEDExp = py::register_exception<te::SpiceITEMNOTRECOGNIZED>(m, "SpiceITEMNOTRECOGNIZED", spiceErrorExp.ptr());
    spiceITEMNOTRECOGNIZEDExp.doc() = R"(ITEMNOTRECOGNIZED Error thrown by SPICE.)";
    auto spiceITERATIONEXCEEDEDExp = py::register_exception<te::SpiceITERATIONEXCEEDED>(m, "SpiceITERATIONEXCEEDED", spiceErrorExp.ptr());
    spiceITERATIONEXCEEDEDExp.doc() = R"(ITERATIONEXCEEDED Error thrown by SPICE.)";
    auto spiceKERNELNOTLOADEDExp = py::register_exception<te::SpiceKERNELNOTLOADED>(m, "SpiceKERNELNOTLOADED", spiceErrorExp.ptr());
    spiceKERNELNOTLOADEDExp.doc() = R"(KERNELNOTLOADED Error thrown by SPICE.)";
    auto spiceKERNELPOOLFULLExp = py::register_exception<te::SpiceKERNELPOOLFULL>(m, "SpiceKERNELPOOLFULL", spiceErrorExp.ptr());
    spiceKERNELPOOLFULLExp.doc() = R"(KERNELPOOLFULL Error thrown by SPICE.)";
    auto spiceKERNELVARNOTFOUNDExp = py::register_exception<te::SpiceKERNELVARNOTFOUND>(m, "SpiceKERNELVARNOTFOUND", spiceErrorExp.ptr());
    spiceKERNELVARNOTFOUNDExp.doc() = R"(KERNELVARNOTFOUND Error thrown by SPICE.)";
    auto spiceKERVARSETOVERFLOWExp = py::register_exception<te::SpiceKERVARSETOVERFLOW>(m, "SpiceKERVARSETOVERFLOW", spiceErrorExp.ptr());
    spiceKERVARSETOVERFLOWExp.doc() = R"(KERVARSETOVERFLOW Error thrown by SPICE.)";
    auto spiceKERVARTOOBIGExp = py::register_exception<te::SpiceKERVARTOOBIG>(m, "SpiceKERVARTOOBIG", spiceErrorExp.ptr());
    spiceKERVARTOOBIGExp.doc() = R"(KERVARTOOBIG Error thrown by SPICE.)";
    auto spiceKEYWORDNOTFOUNDExp = py::register_exception<te::SpiceKEYWORDNOTFOUND>(m, "SpiceKEYWORDNOTFOUND", spiceErrorExp.ptr());
    spiceKEYWORDNOTFOUNDExp.doc() = R"(KEYWORDNOTFOUND Error thrown by SPICE.)";
    auto spiceLBCORRUPTEDExp = py::register_exception<te::SpiceLBCORRUPTED>(m, "SpiceLBCORRUPTED", spiceErrorExp.ptr());
    spiceLBCORRUPTEDExp.doc() = R"(LBCORRUPTED Error thrown by SPICE.)";
    auto spiceLBLINETOOLONGExp = py::register_exception<te::SpiceLBLINETOOLONG>(m, "SpiceLBLINETOOLONG", spiceErrorExp.ptr());
    spiceLBLINETOOLONGExp.doc() = R"(LBLINETOOLONG Error thrown by SPICE.)";
    auto spiceLBNOSUCHLINEExp = py::register_exception<te::SpiceLBNOSUCHLINE>(m, "SpiceLBNOSUCHLINE", spiceErrorExp.ptr());
    spiceLBNOSUCHLINEExp.doc() = R"(LBNOSUCHLINE Error thrown by SPICE.)";
    auto spiceLBTOOMANYLINESExp = py::register_exception<te::SpiceLBTOOMANYLINES>(m, "SpiceLBTOOMANYLINES", spiceErrorExp.ptr());
    spiceLBTOOMANYLINESExp.doc() = R"(LBTOOMANYLINES Error thrown by SPICE.)";
    auto spiceLOWERBOUNDTOOLOWExp = py::register_exception<te::SpiceLOWERBOUNDTOOLOW>(m, "SpiceLOWERBOUNDTOOLOW", spiceErrorExp.ptr());
    spiceLOWERBOUNDTOOLOWExp.doc() = R"(LOWERBOUNDTOOLOW Error thrown by SPICE.)";
    auto spiceLSKDOESNTEXISTExp = py::register_exception<te::SpiceLSKDOESNTEXIST>(m, "SpiceLSKDOESNTEXIST", spiceErrorExp.ptr());
    spiceLSKDOESNTEXISTExp.doc() = R"(LSKDOESNTEXIST Error thrown by SPICE.)";
    auto spiceMALFORMEDSEGMENTExp = py::register_exception<te::SpiceMALFORMEDSEGMENT>(m, "SpiceMALFORMEDSEGMENT", spiceErrorExp.ptr());
    spiceMALFORMEDSEGMENTExp.doc() = R"(MALFORMEDSEGMENT Error thrown by SPICE.)";
    auto spiceMARKERNOTFOUNDExp = py::register_exception<te::SpiceMARKERNOTFOUND>(m, "SpiceMARKERNOTFOUND", spiceErrorExp.ptr());
    spiceMARKERNOTFOUNDExp.doc() = R"(MARKERNOTFOUND Error thrown by SPICE.)";
    auto spiceMESSAGETOOLONGExp = py::register_exception<te::SpiceMESSAGETOOLONG>(m, "SpiceMESSAGETOOLONG", spiceErrorExp.ptr());
    spiceMESSAGETOOLONGExp.doc() = R"(MESSAGETOOLONG Error thrown by SPICE.)";
    auto spiceMISMATCHFROMTIMETYPEExp = py::register_exception<te::SpiceMISMATCHFROMTIMETYPE>(m, "SpiceMISMATCHFROMTIMETYPE", spiceErrorExp.ptr());
    spiceMISMATCHFROMTIMETYPEExp.doc() = R"(MISMATCHFROMTIMETYPE Error thrown by SPICE.)";
    auto spiceMISMATCHOUTPUTFORMATExp = py::register_exception<te::SpiceMISMATCHOUTPUTFORMAT>(m, "SpiceMISMATCHOUTPUTFORMAT", spiceErrorExp.ptr());
    spiceMISMATCHOUTPUTFORMATExp.doc() = R"(MISMATCHOUTPUTFORMAT Error thrown by SPICE.)";
    auto spiceMISMATCHTOTIMETYPEExp = py::register_exception<te::SpiceMISMATCHTOTIMETYPE>(m, "SpiceMISMATCHTOTIMETYPE", spiceErrorExp.ptr());
    spiceMISMATCHTOTIMETYPEExp.doc() = R"(MISMATCHTOTIMETYPE Error thrown by SPICE.)";
    auto spiceMISSINGARGUMENTSExp = py::register_exception<te::SpiceMISSINGARGUMENTS>(m, "SpiceMISSINGARGUMENTS", spiceErrorExp.ptr());
    spiceMISSINGARGUMENTSExp.doc() = R"(MISSINGARGUMENTS Error thrown by SPICE.)";
    auto spiceMISSINGCENTERExp = py::register_exception<te::SpiceMISSINGCENTER>(m, "SpiceMISSINGCENTER", spiceErrorExp.ptr());
    spiceMISSINGCENTERExp.doc() = R"(MISSINGCENTER Error thrown by SPICE.)";
    auto spiceMISSINGCOLSTEPExp = py::register_exception<te::SpiceMISSINGCOLSTEP>(m, "SpiceMISSINGCOLSTEP", spiceErrorExp.ptr());
    spiceMISSINGCOLSTEPExp.doc() = R"(MISSINGCOLSTEP Error thrown by SPICE.)";
    auto spiceMISSINGCOORDBOUNDExp = py::register_exception<te::SpiceMISSINGCOORDBOUND>(m, "SpiceMISSINGCOORDBOUND", spiceErrorExp.ptr());
    spiceMISSINGCOORDBOUNDExp.doc() = R"(MISSINGCOORDBOUND Error thrown by SPICE.)";
    auto spiceMISSINGCOORDSYSExp = py::register_exception<te::SpiceMISSINGCOORDSYS>(m, "SpiceMISSINGCOORDSYS", spiceErrorExp.ptr());
    spiceMISSINGCOORDSYSExp.doc() = R"(MISSINGCOORDSYS Error thrown by SPICE.)";
    auto spiceMISSINGDATAExp = py::register_exception<te::SpiceMISSINGDATA>(m, "SpiceMISSINGDATA", spiceErrorExp.ptr());
    spiceMISSINGDATAExp.doc() = R"(MISSINGDATA Error thrown by SPICE.)";
    auto spiceMISSINGDATACLASSExp = py::register_exception<te::SpiceMISSINGDATACLASS>(m, "SpiceMISSINGDATACLASS", spiceErrorExp.ptr());
    spiceMISSINGDATACLASSExp.doc() = R"(MISSINGDATACLASS Error thrown by SPICE.)";
    auto spiceMISSINGDATAORDERTKExp = py::register_exception<te::SpiceMISSINGDATAORDERTK>(m, "SpiceMISSINGDATAORDERTK", spiceErrorExp.ptr());
    spiceMISSINGDATAORDERTKExp.doc() = R"(MISSINGDATAORDERTK Error thrown by SPICE.)";
    auto spiceMISSINGDATATYPEExp = py::register_exception<te::SpiceMISSINGDATATYPE>(m, "SpiceMISSINGDATATYPE", spiceErrorExp.ptr());
    spiceMISSINGDATATYPEExp.doc() = R"(MISSINGDATATYPE Error thrown by SPICE.)";
    auto spiceMISSINGEOTExp = py::register_exception<te::SpiceMISSINGEOT>(m, "SpiceMISSINGEOT", spiceErrorExp.ptr());
    spiceMISSINGEOTExp.doc() = R"(MISSINGEOT Error thrown by SPICE.)";
    auto spiceMISSINGEPOCHTOKENExp = py::register_exception<te::SpiceMISSINGEPOCHTOKEN>(m, "SpiceMISSINGEPOCHTOKEN", spiceErrorExp.ptr());
    spiceMISSINGEPOCHTOKENExp.doc() = R"(MISSINGEPOCHTOKEN Error thrown by SPICE.)";
    auto spiceMISSINGFRAMEExp = py::register_exception<te::SpiceMISSINGFRAME>(m, "SpiceMISSINGFRAME", spiceErrorExp.ptr());
    spiceMISSINGFRAMEExp.doc() = R"(MISSINGFRAME Error thrown by SPICE.)";
    auto spiceMISSINGFRAMEVARExp = py::register_exception<te::SpiceMISSINGFRAMEVAR>(m, "SpiceMISSINGFRAMEVAR", spiceErrorExp.ptr());
    spiceMISSINGFRAMEVARExp.doc() = R"(MISSINGFRAMEVAR Error thrown by SPICE.)";
    auto spiceMISSINGGEOCONSTSExp = py::register_exception<te::SpiceMISSINGGEOCONSTS>(m, "SpiceMISSINGGEOCONSTS", spiceErrorExp.ptr());
    spiceMISSINGGEOCONSTSExp.doc() = R"(MISSINGGEOCONSTS Error thrown by SPICE.)";
    auto spiceMISSINGHEIGHTREFExp = py::register_exception<te::SpiceMISSINGHEIGHTREF>(m, "SpiceMISSINGHEIGHTREF", spiceErrorExp.ptr());
    spiceMISSINGHEIGHTREFExp.doc() = R"(MISSINGHEIGHTREF Error thrown by SPICE.)";
    auto spiceMISSINGHSCALEExp = py::register_exception<te::SpiceMISSINGHSCALE>(m, "SpiceMISSINGHSCALE", spiceErrorExp.ptr());
    spiceMISSINGHSCALEExp.doc() = R"(MISSINGHSCALE Error thrown by SPICE.)";
    auto spiceMISSINGKPVExp = py::register_exception<te::SpiceMISSINGKPV>(m, "SpiceMISSINGKPV", spiceErrorExp.ptr());
    spiceMISSINGKPVExp.doc() = R"(MISSINGKPV Error thrown by SPICE.)";
    auto spiceMISSINGLEFTCORExp = py::register_exception<te::SpiceMISSINGLEFTCOR>(m, "SpiceMISSINGLEFTCOR", spiceErrorExp.ptr());
    spiceMISSINGLEFTCORExp.doc() = R"(MISSINGLEFTCOR Error thrown by SPICE.)";
    auto spiceMISSINGLEFTRTFLAGExp = py::register_exception<te::SpiceMISSINGLEFTRTFLAG>(m, "SpiceMISSINGLEFTRTFLAG", spiceErrorExp.ptr());
    spiceMISSINGLEFTRTFLAGExp.doc() = R"(MISSINGLEFTRTFLAG Error thrown by SPICE.)";
    auto spiceMISSINGNCAPFLAGExp = py::register_exception<te::SpiceMISSINGNCAPFLAG>(m, "SpiceMISSINGNCAPFLAG", spiceErrorExp.ptr());
    spiceMISSINGNCAPFLAGExp.doc() = R"(MISSINGNCAPFLAG Error thrown by SPICE.)";
    auto spiceMISSINGNCOLSExp = py::register_exception<te::SpiceMISSINGNCOLS>(m, "SpiceMISSINGNCOLS", spiceErrorExp.ptr());
    spiceMISSINGNCOLSExp.doc() = R"(MISSINGNCOLS Error thrown by SPICE.)";
    auto spiceMISSINGNROWSExp = py::register_exception<te::SpiceMISSINGNROWS>(m, "SpiceMISSINGNROWS", spiceErrorExp.ptr());
    spiceMISSINGNROWSExp.doc() = R"(MISSINGNROWS Error thrown by SPICE.)";
    auto spiceMISSINGPLATETYPEExp = py::register_exception<te::SpiceMISSINGPLATETYPE>(m, "SpiceMISSINGPLATETYPE", spiceErrorExp.ptr());
    spiceMISSINGPLATETYPEExp.doc() = R"(MISSINGPLATETYPE Error thrown by SPICE.)";
    auto spiceMISSINGROWMAJFLAGExp = py::register_exception<te::SpiceMISSINGROWMAJFLAG>(m, "SpiceMISSINGROWMAJFLAG", spiceErrorExp.ptr());
    spiceMISSINGROWMAJFLAGExp.doc() = R"(MISSINGROWMAJFLAG Error thrown by SPICE.)";
    auto spiceMISSINGROWSTEPExp = py::register_exception<te::SpiceMISSINGROWSTEP>(m, "SpiceMISSINGROWSTEP", spiceErrorExp.ptr());
    spiceMISSINGROWSTEPExp.doc() = R"(MISSINGROWSTEP Error thrown by SPICE.)";
    auto spiceMISSINGSCAPFLAGExp = py::register_exception<te::SpiceMISSINGSCAPFLAG>(m, "SpiceMISSINGSCAPFLAG", spiceErrorExp.ptr());
    spiceMISSINGSCAPFLAGExp.doc() = R"(MISSINGSCAPFLAG Error thrown by SPICE.)";
    auto spiceMISSINGSURFACEExp = py::register_exception<te::SpiceMISSINGSURFACE>(m, "SpiceMISSINGSURFACE", spiceErrorExp.ptr());
    spiceMISSINGSURFACEExp.doc() = R"(MISSINGSURFACE Error thrown by SPICE.)";
    auto spiceMISSINGTIMEINFOExp = py::register_exception<te::SpiceMISSINGTIMEINFO>(m, "SpiceMISSINGTIMEINFO", spiceErrorExp.ptr());
    spiceMISSINGTIMEINFOExp.doc() = R"(MISSINGTIMEINFO Error thrown by SPICE.)";
    auto spiceMISSINGTLEKEYWORDExp = py::register_exception<te::SpiceMISSINGTLEKEYWORD>(m, "SpiceMISSINGTLEKEYWORD", spiceErrorExp.ptr());
    spiceMISSINGTLEKEYWORDExp.doc() = R"(MISSINGTLEKEYWORD Error thrown by SPICE.)";
    auto spiceMISSINGTOPCORExp = py::register_exception<te::SpiceMISSINGTOPCOR>(m, "SpiceMISSINGTOPCOR", spiceErrorExp.ptr());
    spiceMISSINGTOPCORExp.doc() = R"(MISSINGTOPCOR Error thrown by SPICE.)";
    auto spiceMISSINGTOPDOWNFLAGExp = py::register_exception<te::SpiceMISSINGTOPDOWNFLAG>(m, "SpiceMISSINGTOPDOWNFLAG", spiceErrorExp.ptr());
    spiceMISSINGTOPDOWNFLAGExp.doc() = R"(MISSINGTOPDOWNFLAG Error thrown by SPICE.)";
    auto spiceMISSINGVALUEExp = py::register_exception<te::SpiceMISSINGVALUE>(m, "SpiceMISSINGVALUE", spiceErrorExp.ptr());
    spiceMISSINGVALUEExp.doc() = R"(MISSINGVALUE Error thrown by SPICE.)";
    auto spiceMISSINGVOXELSCALEExp = py::register_exception<te::SpiceMISSINGVOXELSCALE>(m, "SpiceMISSINGVOXELSCALE", spiceErrorExp.ptr());
    spiceMISSINGVOXELSCALEExp.doc() = R"(MISSINGVOXELSCALE Error thrown by SPICE.)";
    auto spiceMISSINGWRAPFLAGExp = py::register_exception<te::SpiceMISSINGWRAPFLAG>(m, "SpiceMISSINGWRAPFLAG", spiceErrorExp.ptr());
    spiceMISSINGWRAPFLAGExp.doc() = R"(MISSINGWRAPFLAG Error thrown by SPICE.)";
    auto spiceNAMENOTUNIQUEExp = py::register_exception<te::SpiceNAMENOTUNIQUE>(m, "SpiceNAMENOTUNIQUE", spiceErrorExp.ptr());
    spiceNAMENOTUNIQUEExp.doc() = R"(NAMENOTUNIQUE Error thrown by SPICE.)";
    auto spiceNAMESNOTRESOLVEDExp = py::register_exception<te::SpiceNAMESNOTRESOLVED>(m, "SpiceNAMESNOTRESOLVED", spiceErrorExp.ptr());
    spiceNAMESNOTRESOLVEDExp.doc() = R"(NAMESNOTRESOLVED Error thrown by SPICE.)";
    auto spiceNAMETABLEFULLExp = py::register_exception<te::SpiceNAMETABLEFULL>(m, "SpiceNAMETABLEFULL", spiceErrorExp.ptr());
    spiceNAMETABLEFULLExp.doc() = R"(NAMETABLEFULL Error thrown by SPICE.)";
    auto spiceNARATESFLAGExp = py::register_exception<te::SpiceNARATESFLAG>(m, "SpiceNARATESFLAG", spiceErrorExp.ptr());
    spiceNARATESFLAGExp.doc() = R"(NARATESFLAG Error thrown by SPICE.)";
    auto spiceNEGATIVETOLExp = py::register_exception<te::SpiceNEGATIVETOL>(m, "SpiceNEGATIVETOL", spiceErrorExp.ptr());
    spiceNEGATIVETOLExp.doc() = R"(NEGATIVETOL Error thrown by SPICE.)";
    auto spiceNOACCEPTABLEDATAExp = py::register_exception<te::SpiceNOACCEPTABLEDATA>(m, "SpiceNOACCEPTABLEDATA", spiceErrorExp.ptr());
    spiceNOACCEPTABLEDATAExp.doc() = R"(NOACCEPTABLEDATA Error thrown by SPICE.)";
    auto spiceNOANGULARRATEFLAGExp = py::register_exception<te::SpiceNOANGULARRATEFLAG>(m, "SpiceNOANGULARRATEFLAG", spiceErrorExp.ptr());
    spiceNOANGULARRATEFLAGExp.doc() = R"(NOANGULARRATEFLAG Error thrown by SPICE.)";
    auto spiceNOARRAYSTARTEDExp = py::register_exception<te::SpiceNOARRAYSTARTED>(m, "SpiceNOARRAYSTARTED", spiceErrorExp.ptr());
    spiceNOARRAYSTARTEDExp.doc() = R"(NOARRAYSTARTED Error thrown by SPICE.)";
    auto spiceNOATTIMEExp = py::register_exception<te::SpiceNOATTIME>(m, "SpiceNOATTIME", spiceErrorExp.ptr());
    spiceNOATTIMEExp.doc() = R"(NOATTIME Error thrown by SPICE.)";
    auto spiceNOAVDATAExp = py::register_exception<te::SpiceNOAVDATA>(m, "SpiceNOAVDATA", spiceErrorExp.ptr());
    spiceNOAVDATAExp.doc() = R"(NOAVDATA Error thrown by SPICE.)";
    auto spiceNOBODYIDExp = py::register_exception<te::SpiceNOBODYID>(m, "SpiceNOBODYID", spiceErrorExp.ptr());
    spiceNOBODYIDExp.doc() = R"(NOBODYID Error thrown by SPICE.)";
    auto spiceNOCANDOSPKSPCKSExp = py::register_exception<te::SpiceNOCANDOSPKSPCKS>(m, "SpiceNOCANDOSPKSPCKS", spiceErrorExp.ptr());
    spiceNOCANDOSPKSPCKSExp.doc() = R"(NOCANDOSPKSPCKS Error thrown by SPICE.)";
    auto spiceNOCENTERIDORNAMEExp = py::register_exception<te::SpiceNOCENTERIDORNAME>(m, "SpiceNOCENTERIDORNAME", spiceErrorExp.ptr());
    spiceNOCENTERIDORNAMEExp.doc() = R"(NOCENTERIDORNAME Error thrown by SPICE.)";
    auto spiceNOCKSEGMENTTYPEExp = py::register_exception<te::SpiceNOCKSEGMENTTYPE>(m, "SpiceNOCKSEGMENTTYPE", spiceErrorExp.ptr());
    spiceNOCKSEGMENTTYPEExp.doc() = R"(NOCKSEGMENTTYPE Error thrown by SPICE.)";
    auto spiceNOCLASSExp = py::register_exception<te::SpiceNOCLASS>(m, "SpiceNOCLASS", spiceErrorExp.ptr());
    spiceNOCLASSExp.doc() = R"(NOCLASS Error thrown by SPICE.)";
    auto spiceNOCOMMENTSFILEExp = py::register_exception<te::SpiceNOCOMMENTSFILE>(m, "SpiceNOCOMMENTSFILE", spiceErrorExp.ptr());
    spiceNOCOMMENTSFILEExp.doc() = R"(NOCOMMENTSFILE Error thrown by SPICE.)";
    auto spiceNOCONVERGExp = py::register_exception<te::SpiceNOCONVERG>(m, "SpiceNOCONVERG", spiceErrorExp.ptr());
    spiceNOCONVERGExp.doc() = R"(NOCONVERG Error thrown by SPICE.)";
    auto spiceNOCONVERGENCEExp = py::register_exception<te::SpiceNOCONVERGENCE>(m, "SpiceNOCONVERGENCE", spiceErrorExp.ptr());
    spiceNOCONVERGENCEExp.doc() = R"(NOCONVERGENCE Error thrown by SPICE.)";
    auto spiceNOCURRENTARRAYExp = py::register_exception<te::SpiceNOCURRENTARRAY>(m, "SpiceNOCURRENTARRAY", spiceErrorExp.ptr());
    spiceNOCURRENTARRAYExp.doc() = R"(NOCURRENTARRAY Error thrown by SPICE.)";
    auto spiceNODATAORDERExp = py::register_exception<te::SpiceNODATAORDER>(m, "SpiceNODATAORDER", spiceErrorExp.ptr());
    spiceNODATAORDERExp.doc() = R"(NODATAORDER Error thrown by SPICE.)";
    auto spiceNODATATYPEFLAGExp = py::register_exception<te::SpiceNODATATYPEFLAG>(m, "SpiceNODATATYPEFLAG", spiceErrorExp.ptr());
    spiceNODATATYPEFLAGExp.doc() = R"(NODATATYPEFLAG Error thrown by SPICE.)";
    auto spiceNODELIMCHARACTERExp = py::register_exception<te::SpiceNODELIMCHARACTER>(m, "SpiceNODELIMCHARACTER", spiceErrorExp.ptr());
    spiceNODELIMCHARACTERExp.doc() = R"(NODELIMCHARACTER Error thrown by SPICE.)";
    auto spiceNODETOOFULLExp = py::register_exception<te::SpiceNODETOOFULL>(m, "SpiceNODETOOFULL", spiceErrorExp.ptr());
    spiceNODETOOFULLExp.doc() = R"(NODETOOFULL Error thrown by SPICE.)";
    auto spiceNODSKSEGMENTExp = py::register_exception<te::SpiceNODSKSEGMENT>(m, "SpiceNODSKSEGMENT", spiceErrorExp.ptr());
    spiceNODSKSEGMENTExp.doc() = R"(NODSKSEGMENT Error thrown by SPICE.)";
    auto spiceNODSKSEGMENTSExp = py::register_exception<te::SpiceNODSKSEGMENTS>(m, "SpiceNODSKSEGMENTS", spiceErrorExp.ptr());
    spiceNODSKSEGMENTSExp.doc() = R"(NODSKSEGMENTS Error thrown by SPICE.)";
    auto spiceNOENVVARIABLEExp = py::register_exception<te::SpiceNOENVVARIABLE>(m, "SpiceNOENVVARIABLE", spiceErrorExp.ptr());
    spiceNOENVVARIABLEExp.doc() = R"(NOENVVARIABLE Error thrown by SPICE.)";
    auto spiceNOEULERANGLEUNITSExp = py::register_exception<te::SpiceNOEULERANGLEUNITS>(m, "SpiceNOEULERANGLEUNITS", spiceErrorExp.ptr());
    spiceNOEULERANGLEUNITSExp.doc() = R"(NOEULERANGLEUNITS Error thrown by SPICE.)";
    auto spiceNOFILENAMESExp = py::register_exception<te::SpiceNOFILENAMES>(m, "SpiceNOFILENAMES", spiceErrorExp.ptr());
    spiceNOFILENAMESExp.doc() = R"(NOFILENAMES Error thrown by SPICE.)";
    auto spiceNOFILESExp = py::register_exception<te::SpiceNOFILES>(m, "SpiceNOFILES", spiceErrorExp.ptr());
    spiceNOFILESExp.doc() = R"(NOFILES Error thrown by SPICE.)";
    auto spiceNOFILESPECExp = py::register_exception<te::SpiceNOFILESPEC>(m, "SpiceNOFILESPEC", spiceErrorExp.ptr());
    spiceNOFILESPECExp.doc() = R"(NOFILESPEC Error thrown by SPICE.)";
    auto spiceNOFRAMEExp = py::register_exception<te::SpiceNOFRAME>(m, "SpiceNOFRAME", spiceErrorExp.ptr());
    spiceNOFRAMEExp.doc() = R"(NOFRAME Error thrown by SPICE.)";
    auto spiceNOFRAMECONNECTExp = py::register_exception<te::SpiceNOFRAMECONNECT>(m, "SpiceNOFRAMECONNECT", spiceErrorExp.ptr());
    spiceNOFRAMECONNECTExp.doc() = R"(NOFRAMECONNECT Error thrown by SPICE.)";
    auto spiceNOFRAMEDATAExp = py::register_exception<te::SpiceNOFRAMEDATA>(m, "SpiceNOFRAMEDATA", spiceErrorExp.ptr());
    spiceNOFRAMEDATAExp.doc() = R"(NOFRAMEDATA Error thrown by SPICE.)";
    auto spiceNOFRAMEINFOExp = py::register_exception<te::SpiceNOFRAMEINFO>(m, "SpiceNOFRAMEINFO", spiceErrorExp.ptr());
    spiceNOFRAMEINFOExp.doc() = R"(NOFRAMEINFO Error thrown by SPICE.)";
    auto spiceNOFRAMENAMEExp = py::register_exception<te::SpiceNOFRAMENAME>(m, "SpiceNOFRAMENAME", spiceErrorExp.ptr());
    spiceNOFRAMENAMEExp.doc() = R"(NOFRAMENAME Error thrown by SPICE.)";
    auto spiceNOFRAMESKERNELNAMEExp = py::register_exception<te::SpiceNOFRAMESKERNELNAME>(m, "SpiceNOFRAMESKERNELNAME", spiceErrorExp.ptr());
    spiceNOFRAMESKERNELNAMEExp.doc() = R"(NOFRAMESKERNELNAME Error thrown by SPICE.)";
    auto spiceNOFREELOGICALUNITExp = py::register_exception<te::SpiceNOFREELOGICALUNIT>(m, "SpiceNOFREELOGICALUNIT", spiceErrorExp.ptr());
    spiceNOFREELOGICALUNITExp.doc() = R"(NOFREELOGICALUNIT Error thrown by SPICE.)";
    auto spiceNOFREENODESExp = py::register_exception<te::SpiceNOFREENODES>(m, "SpiceNOFREENODES", spiceErrorExp.ptr());
    spiceNOFREENODESExp.doc() = R"(NOFREENODES Error thrown by SPICE.)";
    auto spiceNOFROMTIMEExp = py::register_exception<te::SpiceNOFROMTIME>(m, "SpiceNOFROMTIME", spiceErrorExp.ptr());
    spiceNOFROMTIMEExp.doc() = R"(NOFROMTIME Error thrown by SPICE.)";
    auto spiceNOFROMTIMESYSTEMExp = py::register_exception<te::SpiceNOFROMTIMESYSTEM>(m, "SpiceNOFROMTIMESYSTEM", spiceErrorExp.ptr());
    spiceNOFROMTIMESYSTEMExp.doc() = R"(NOFROMTIMESYSTEM Error thrown by SPICE.)";
    auto spiceNOHEADNODEExp = py::register_exception<te::SpiceNOHEADNODE>(m, "SpiceNOHEADNODE", spiceErrorExp.ptr());
    spiceNOHEADNODEExp.doc() = R"(NOHEADNODE Error thrown by SPICE.)";
    auto spiceNOINPUTDATATYPEExp = py::register_exception<te::SpiceNOINPUTDATATYPE>(m, "SpiceNOINPUTDATATYPE", spiceErrorExp.ptr());
    spiceNOINPUTDATATYPEExp.doc() = R"(NOINPUTDATATYPE Error thrown by SPICE.)";
    auto spiceNOINPUTFILENAMEExp = py::register_exception<te::SpiceNOINPUTFILENAME>(m, "SpiceNOINPUTFILENAME", spiceErrorExp.ptr());
    spiceNOINPUTFILENAMEExp.doc() = R"(NOINPUTFILENAME Error thrown by SPICE.)";
    auto spiceNOINSTRUMENTIDExp = py::register_exception<te::SpiceNOINSTRUMENTID>(m, "SpiceNOINSTRUMENTID", spiceErrorExp.ptr());
    spiceNOINSTRUMENTIDExp.doc() = R"(NOINSTRUMENTID Error thrown by SPICE.)";
    auto spiceNOINTERVALExp = py::register_exception<te::SpiceNOINTERVAL>(m, "SpiceNOINTERVAL", spiceErrorExp.ptr());
    spiceNOINTERVALExp.doc() = R"(NOINTERVAL Error thrown by SPICE.)";
    auto spiceNOKERNELLOADEDExp = py::register_exception<te::SpiceNOKERNELLOADED>(m, "SpiceNOKERNELLOADED", spiceErrorExp.ptr());
    spiceNOKERNELLOADEDExp.doc() = R"(NOKERNELLOADED Error thrown by SPICE.)";
    auto spiceNOLANDINGTIMEExp = py::register_exception<te::SpiceNOLANDINGTIME>(m, "SpiceNOLANDINGTIME", spiceErrorExp.ptr());
    spiceNOLANDINGTIMEExp.doc() = R"(NOLANDINGTIME Error thrown by SPICE.)";
    auto spiceNOLEAPSECONDSExp = py::register_exception<te::SpiceNOLEAPSECONDS>(m, "SpiceNOLEAPSECONDS", spiceErrorExp.ptr());
    spiceNOLEAPSECONDSExp.doc() = R"(NOLEAPSECONDS Error thrown by SPICE.)";
    auto spiceNOLINESPERRECCOUNTExp = py::register_exception<te::SpiceNOLINESPERRECCOUNT>(m, "SpiceNOLINESPERRECCOUNT", spiceErrorExp.ptr());
    spiceNOLINESPERRECCOUNTExp.doc() = R"(NOLINESPERRECCOUNT Error thrown by SPICE.)";
    auto spiceNOLISTFILENAMEExp = py::register_exception<te::SpiceNOLISTFILENAME>(m, "SpiceNOLISTFILENAME", spiceErrorExp.ptr());
    spiceNOLISTFILENAMEExp.doc() = R"(NOLISTFILENAME Error thrown by SPICE.)";
    auto spiceNOLOADEDDSKFILESExp = py::register_exception<te::SpiceNOLOADEDDSKFILES>(m, "SpiceNOLOADEDDSKFILES", spiceErrorExp.ptr());
    spiceNOLOADEDDSKFILESExp.doc() = R"(NOLOADEDDSKFILES Error thrown by SPICE.)";
    auto spiceNOLOADEDFILESExp = py::register_exception<te::SpiceNOLOADEDFILES>(m, "SpiceNOLOADEDFILES", spiceErrorExp.ptr());
    spiceNOLOADEDFILESExp.doc() = R"(NOLOADEDFILES Error thrown by SPICE.)";
    auto spiceNOLSKFILENAMEExp = py::register_exception<te::SpiceNOLSKFILENAME>(m, "SpiceNOLSKFILENAME", spiceErrorExp.ptr());
    spiceNOLSKFILENAMEExp.doc() = R"(NOLSKFILENAME Error thrown by SPICE.)";
    auto spiceNOMOREROOMExp = py::register_exception<te::SpiceNOMOREROOM>(m, "SpiceNOMOREROOM", spiceErrorExp.ptr());
    spiceNOMOREROOMExp.doc() = R"(NOMOREROOM Error thrown by SPICE.)";
    auto spiceNONCONICMOTIONExp = py::register_exception<te::SpiceNONCONICMOTION>(m, "SpiceNONCONICMOTION", spiceErrorExp.ptr());
    spiceNONCONICMOTIONExp.doc() = R"(NONCONICMOTION Error thrown by SPICE.)";
    auto spiceNONDISTINCTPAIRExp = py::register_exception<te::SpiceNONDISTINCTPAIR>(m, "SpiceNONDISTINCTPAIR", spiceErrorExp.ptr());
    spiceNONDISTINCTPAIRExp.doc() = R"(NONDISTINCTPAIR Error thrown by SPICE.)";
    auto spiceNONEMPTYENTRYExp = py::register_exception<te::SpiceNONEMPTYENTRY>(m, "SpiceNONEMPTYENTRY", spiceErrorExp.ptr());
    spiceNONEMPTYENTRYExp.doc() = R"(NONEMPTYENTRY Error thrown by SPICE.)";
    auto spiceNONEMPTYTREEExp = py::register_exception<te::SpiceNONEMPTYTREE>(m, "SpiceNONEMPTYTREE", spiceErrorExp.ptr());
    spiceNONEMPTYTREEExp.doc() = R"(NONEMPTYTREE Error thrown by SPICE.)";
    auto spiceNONEXISTELEMENTSExp = py::register_exception<te::SpiceNONEXISTELEMENTS>(m, "SpiceNONEXISTELEMENTS", spiceErrorExp.ptr());
    spiceNONEXISTELEMENTSExp.doc() = R"(NONEXISTELEMENTS Error thrown by SPICE.)";
    auto spiceNONINTEGERFIELDExp = py::register_exception<te::SpiceNONINTEGERFIELD>(m, "SpiceNONINTEGERFIELD", spiceErrorExp.ptr());
    spiceNONINTEGERFIELDExp.doc() = R"(NONINTEGERFIELD Error thrown by SPICE.)";
    auto spiceNONNUMERICSTRINGExp = py::register_exception<te::SpiceNONNUMERICSTRING>(m, "SpiceNONNUMERICSTRING", spiceErrorExp.ptr());
    spiceNONNUMERICSTRINGExp.doc() = R"(NONNUMERICSTRING Error thrown by SPICE.)";
    auto spiceNONPOSBUFLENGTHExp = py::register_exception<te::SpiceNONPOSBUFLENGTH>(m, "SpiceNONPOSBUFLENGTH", spiceErrorExp.ptr());
    spiceNONPOSBUFLENGTHExp.doc() = R"(NONPOSBUFLENGTH Error thrown by SPICE.)";
    auto spiceNONPOSITIVEAXISExp = py::register_exception<te::SpiceNONPOSITIVEAXIS>(m, "SpiceNONPOSITIVEAXIS", spiceErrorExp.ptr());
    spiceNONPOSITIVEAXISExp.doc() = R"(NONPOSITIVEAXIS Error thrown by SPICE.)";
    auto spiceNONPOSITIVEMASSExp = py::register_exception<te::SpiceNONPOSITIVEMASS>(m, "SpiceNONPOSITIVEMASS", spiceErrorExp.ptr());
    spiceNONPOSITIVEMASSExp.doc() = R"(NONPOSITIVEMASS Error thrown by SPICE.)";
    auto spiceNONPOSITIVERADIUSExp = py::register_exception<te::SpiceNONPOSITIVERADIUS>(m, "SpiceNONPOSITIVERADIUS", spiceErrorExp.ptr());
    spiceNONPOSITIVERADIUSExp.doc() = R"(NONPOSITIVERADIUS Error thrown by SPICE.)";
    auto spiceNONPOSITIVESCALEExp = py::register_exception<te::SpiceNONPOSITIVESCALE>(m, "SpiceNONPOSITIVESCALE", spiceErrorExp.ptr());
    spiceNONPOSITIVESCALEExp.doc() = R"(NONPOSITIVESCALE Error thrown by SPICE.)";
    auto spiceNONPOSITIVEVALUEExp = py::register_exception<te::SpiceNONPOSITIVEVALUE>(m, "SpiceNONPOSITIVEVALUE", spiceErrorExp.ptr());
    spiceNONPOSITIVEVALUEExp.doc() = R"(NONPOSITIVEVALUE Error thrown by SPICE.)";
    auto spiceNONPOSPACKETSIZEExp = py::register_exception<te::SpiceNONPOSPACKETSIZE>(m, "SpiceNONPOSPACKETSIZE", spiceErrorExp.ptr());
    spiceNONPOSPACKETSIZEExp.doc() = R"(NONPOSPACKETSIZE Error thrown by SPICE.)";
    auto spiceNONPRINTABLECHARSExp = py::register_exception<te::SpiceNONPRINTABLECHARS>(m, "SpiceNONPRINTABLECHARS", spiceErrorExp.ptr());
    spiceNONPRINTABLECHARSExp.doc() = R"(NONPRINTABLECHARS Error thrown by SPICE.)";
    auto spiceNONPRINTINGCHARExp = py::register_exception<te::SpiceNONPRINTINGCHAR>(m, "SpiceNONPRINTINGCHAR", spiceErrorExp.ptr());
    spiceNONPRINTINGCHARExp.doc() = R"(NONPRINTINGCHAR Error thrown by SPICE.)";
    auto spiceNONPRINTINGCHARSExp = py::register_exception<te::SpiceNONPRINTINGCHARS>(m, "SpiceNONPRINTINGCHARS", spiceErrorExp.ptr());
    spiceNONPRINTINGCHARSExp.doc() = R"(NONPRINTINGCHARS Error thrown by SPICE.)";
    auto spiceNONUNITNORMALExp = py::register_exception<te::SpiceNONUNITNORMAL>(m, "SpiceNONUNITNORMAL", spiceErrorExp.ptr());
    spiceNONUNITNORMALExp.doc() = R"(NONUNITNORMAL Error thrown by SPICE.)";
    auto spiceNOOBJECTIDORNAMEExp = py::register_exception<te::SpiceNOOBJECTIDORNAME>(m, "SpiceNOOBJECTIDORNAME", spiceErrorExp.ptr());
    spiceNOOBJECTIDORNAMEExp.doc() = R"(NOOBJECTIDORNAME Error thrown by SPICE.)";
    auto spiceNOOFFSETANGLEAXESExp = py::register_exception<te::SpiceNOOFFSETANGLEAXES>(m, "SpiceNOOFFSETANGLEAXES", spiceErrorExp.ptr());
    spiceNOOFFSETANGLEAXESExp.doc() = R"(NOOFFSETANGLEAXES Error thrown by SPICE.)";
    auto spiceNOOFFSETANGLEUNITSExp = py::register_exception<te::SpiceNOOFFSETANGLEUNITS>(m, "SpiceNOOFFSETANGLEUNITS", spiceErrorExp.ptr());
    spiceNOOFFSETANGLEUNITSExp.doc() = R"(NOOFFSETANGLEUNITS Error thrown by SPICE.)";
    auto spiceNOOUTPUTFILENAMEExp = py::register_exception<te::SpiceNOOUTPUTFILENAME>(m, "SpiceNOOUTPUTFILENAME", spiceErrorExp.ptr());
    spiceNOOUTPUTFILENAMEExp.doc() = R"(NOOUTPUTFILENAME Error thrown by SPICE.)";
    auto spiceNOOUTPUTSPKTYPEExp = py::register_exception<te::SpiceNOOUTPUTSPKTYPE>(m, "SpiceNOOUTPUTSPKTYPE", spiceErrorExp.ptr());
    spiceNOOUTPUTSPKTYPEExp.doc() = R"(NOOUTPUTSPKTYPE Error thrown by SPICE.)";
    auto spiceNOPARTITIONExp = py::register_exception<te::SpiceNOPARTITION>(m, "SpiceNOPARTITION", spiceErrorExp.ptr());
    spiceNOPARTITIONExp.doc() = R"(NOPARTITION Error thrown by SPICE.)";
    auto spiceNOPICTUREExp = py::register_exception<te::SpiceNOPICTURE>(m, "SpiceNOPICTURE", spiceErrorExp.ptr());
    spiceNOPICTUREExp.doc() = R"(NOPICTURE Error thrown by SPICE.)";
    auto spiceNOPOLYNOMIALDEGREEExp = py::register_exception<te::SpiceNOPOLYNOMIALDEGREE>(m, "SpiceNOPOLYNOMIALDEGREE", spiceErrorExp.ptr());
    spiceNOPOLYNOMIALDEGREEExp.doc() = R"(NOPOLYNOMIALDEGREE Error thrown by SPICE.)";
    auto spiceNOPRECESSIONTYPEExp = py::register_exception<te::SpiceNOPRECESSIONTYPE>(m, "SpiceNOPRECESSIONTYPE", spiceErrorExp.ptr());
    spiceNOPRECESSIONTYPEExp.doc() = R"(NOPRECESSIONTYPE Error thrown by SPICE.)";
    auto spiceNOPRODUCERIDExp = py::register_exception<te::SpiceNOPRODUCERID>(m, "SpiceNOPRODUCERID", spiceErrorExp.ptr());
    spiceNOPRODUCERIDExp.doc() = R"(NOPRODUCERID Error thrown by SPICE.)";
    auto spiceNOROTATIONORDERExp = py::register_exception<te::SpiceNOROTATIONORDER>(m, "SpiceNOROTATIONORDER", spiceErrorExp.ptr());
    spiceNOROTATIONORDERExp.doc() = R"(NOROTATIONORDER Error thrown by SPICE.)";
    auto spiceNOSCIDExp = py::register_exception<te::SpiceNOSCID>(m, "SpiceNOSCID", spiceErrorExp.ptr());
    spiceNOSCIDExp.doc() = R"(NOSCID Error thrown by SPICE.)";
    auto spiceNOSCLKFILENAMESExp = py::register_exception<te::SpiceNOSCLKFILENAMES>(m, "SpiceNOSCLKFILENAMES", spiceErrorExp.ptr());
    spiceNOSCLKFILENAMESExp.doc() = R"(NOSCLKFILENAMES Error thrown by SPICE.)";
    auto spiceNOSECONDLINEExp = py::register_exception<te::SpiceNOSECONDLINE>(m, "SpiceNOSECONDLINE", spiceErrorExp.ptr());
    spiceNOSECONDLINEExp.doc() = R"(NOSECONDLINE Error thrown by SPICE.)";
    auto spiceNOSEGMENTSFOUNDExp = py::register_exception<te::SpiceNOSEGMENTSFOUND>(m, "SpiceNOSEGMENTSFOUND", spiceErrorExp.ptr());
    spiceNOSEGMENTSFOUNDExp.doc() = R"(NOSEGMENTSFOUND Error thrown by SPICE.)";
    auto spiceNOSEPARATIONExp = py::register_exception<te::SpiceNOSEPARATION>(m, "SpiceNOSEPARATION", spiceErrorExp.ptr());
    spiceNOSEPARATIONExp.doc() = R"(NOSEPARATION Error thrown by SPICE.)";
    auto spiceNOSLKFILENAMEExp = py::register_exception<te::SpiceNOSLKFILENAME>(m, "SpiceNOSLKFILENAME", spiceErrorExp.ptr());
    spiceNOSLKFILENAMEExp.doc() = R"(NOSLKFILENAME Error thrown by SPICE.)";
    auto spiceNOSOLMARKERExp = py::register_exception<te::SpiceNOSOLMARKER>(m, "SpiceNOSOLMARKER", spiceErrorExp.ptr());
    spiceNOSOLMARKERExp.doc() = R"(NOSOLMARKER Error thrown by SPICE.)";
    auto spiceNOSPACECRAFTIDExp = py::register_exception<te::SpiceNOSPACECRAFTID>(m, "SpiceNOSPACECRAFTID", spiceErrorExp.ptr());
    spiceNOSPACECRAFTIDExp.doc() = R"(NOSPACECRAFTID Error thrown by SPICE.)";
    auto spiceNOSTARTTIMEExp = py::register_exception<te::SpiceNOSTARTTIME>(m, "SpiceNOSTARTTIME", spiceErrorExp.ptr());
    spiceNOSTARTTIMEExp.doc() = R"(NOSTARTTIME Error thrown by SPICE.)";
    auto spiceNOSTOPTIMEExp = py::register_exception<te::SpiceNOSTOPTIME>(m, "SpiceNOSTOPTIME", spiceErrorExp.ptr());
    spiceNOSTOPTIMEExp.doc() = R"(NOSTOPTIME Error thrown by SPICE.)";
    auto spiceNOSUCHFILEExp = py::register_exception<te::SpiceNOSUCHFILE>(m, "SpiceNOSUCHFILE", spiceErrorExp.ptr());
    spiceNOSUCHFILEExp.doc() = R"(NOSUCHFILE Error thrown by SPICE.)";
    auto spiceNOSUCHHANDLEExp = py::register_exception<te::SpiceNOSUCHHANDLE>(m, "SpiceNOSUCHHANDLE", spiceErrorExp.ptr());
    spiceNOSUCHHANDLEExp.doc() = R"(NOSUCHHANDLE Error thrown by SPICE.)";
    auto spiceNOSUCHSYMBOLExp = py::register_exception<te::SpiceNOSUCHSYMBOL>(m, "SpiceNOSUCHSYMBOL", spiceErrorExp.ptr());
    spiceNOSUCHSYMBOLExp.doc() = R"(NOSUCHSYMBOL Error thrown by SPICE.)";
    auto spiceNOSUNGMExp = py::register_exception<te::SpiceNOSUNGM>(m, "SpiceNOSUNGM", spiceErrorExp.ptr());
    spiceNOSUNGMExp.doc() = R"(NOSUNGM Error thrown by SPICE.)";
    auto spiceNOTABINARYKERNELExp = py::register_exception<te::SpiceNOTABINARYKERNEL>(m, "SpiceNOTABINARYKERNEL", spiceErrorExp.ptr());
    spiceNOTABINARYKERNELExp.doc() = R"(NOTABINARYKERNEL Error thrown by SPICE.)";
    auto spiceNOTACKFILEExp = py::register_exception<te::SpiceNOTACKFILE>(m, "SpiceNOTACKFILE", spiceErrorExp.ptr());
    spiceNOTACKFILEExp.doc() = R"(NOTACKFILE Error thrown by SPICE.)";
    auto spiceNOTADAFFILEExp = py::register_exception<te::SpiceNOTADAFFILE>(m, "SpiceNOTADAFFILE", spiceErrorExp.ptr());
    spiceNOTADAFFILEExp.doc() = R"(NOTADAFFILE Error thrown by SPICE.)";
    auto spiceNOTADASFILEExp = py::register_exception<te::SpiceNOTADASFILE>(m, "SpiceNOTADASFILE", spiceErrorExp.ptr());
    spiceNOTADASFILEExp.doc() = R"(NOTADASFILE Error thrown by SPICE.)";
    auto spiceNOTADPNUMBERExp = py::register_exception<te::SpiceNOTADPNUMBER>(m, "SpiceNOTADPNUMBER", spiceErrorExp.ptr());
    spiceNOTADPNUMBERExp.doc() = R"(NOTADPNUMBER Error thrown by SPICE.)";
    auto spiceNOTANDPNUMBERExp = py::register_exception<te::SpiceNOTANDPNUMBER>(m, "SpiceNOTANDPNUMBER", spiceErrorExp.ptr());
    spiceNOTANDPNUMBERExp.doc() = R"(NOTANDPNUMBER Error thrown by SPICE.)";
    auto spiceNOTANINTEGERExp = py::register_exception<te::SpiceNOTANINTEGER>(m, "SpiceNOTANINTEGER", spiceErrorExp.ptr());
    spiceNOTANINTEGERExp.doc() = R"(NOTANINTEGER Error thrown by SPICE.)";
    auto spiceNOTANINTEGERNUMBERExp = py::register_exception<te::SpiceNOTANINTEGERNUMBER>(m, "SpiceNOTANINTEGERNUMBER", spiceErrorExp.ptr());
    spiceNOTANINTEGERNUMBERExp.doc() = R"(NOTANINTEGERNUMBER Error thrown by SPICE.)";
    auto spiceNOTANINTNUMBERExp = py::register_exception<te::SpiceNOTANINTNUMBER>(m, "SpiceNOTANINTNUMBER", spiceErrorExp.ptr());
    spiceNOTANINTNUMBERExp.doc() = R"(NOTANINTNUMBER Error thrown by SPICE.)";
    auto spiceNOTAPCKFILEExp = py::register_exception<te::SpiceNOTAPCKFILE>(m, "SpiceNOTAPCKFILE", spiceErrorExp.ptr());
    spiceNOTAPCKFILEExp.doc() = R"(NOTAPCKFILE Error thrown by SPICE.)";
    auto spiceNOTAROTATIONExp = py::register_exception<te::SpiceNOTAROTATION>(m, "SpiceNOTAROTATION", spiceErrorExp.ptr());
    spiceNOTAROTATIONExp.doc() = R"(NOTAROTATION Error thrown by SPICE.)";
    auto spiceNOTATEXTFILEExp = py::register_exception<te::SpiceNOTATEXTFILE>(m, "SpiceNOTATEXTFILE", spiceErrorExp.ptr());
    spiceNOTATEXTFILEExp.doc() = R"(NOTATEXTFILE Error thrown by SPICE.)";
    auto spiceNOTATRANSFERFILEExp = py::register_exception<te::SpiceNOTATRANSFERFILE>(m, "SpiceNOTATRANSFERFILE", spiceErrorExp.ptr());
    spiceNOTATRANSFERFILEExp.doc() = R"(NOTATRANSFERFILE Error thrown by SPICE.)";
    auto spiceNOTCOMPUTABLEExp = py::register_exception<te::SpiceNOTCOMPUTABLE>(m, "SpiceNOTCOMPUTABLE", spiceErrorExp.ptr());
    spiceNOTCOMPUTABLEExp.doc() = R"(NOTCOMPUTABLE Error thrown by SPICE.)";
    auto spiceNOTDIMENSIONALLYEQUIVExp = py::register_exception<te::SpiceNOTDIMENSIONALLYEQUIV>(m, "SpiceNOTDIMENSIONALLYEQUIV", spiceErrorExp.ptr());
    spiceNOTDIMENSIONALLYEQUIVExp.doc() = R"(NOTDIMENSIONALLYEQUIV Error thrown by SPICE.)";
    auto spiceNOTDISJOINTExp = py::register_exception<te::SpiceNOTDISJOINT>(m, "SpiceNOTDISJOINT", spiceErrorExp.ptr());
    spiceNOTDISJOINTExp.doc() = R"(NOTDISJOINT Error thrown by SPICE.)";
    auto spiceNOTDISTINCTExp = py::register_exception<te::SpiceNOTDISTINCT>(m, "SpiceNOTDISTINCT", spiceErrorExp.ptr());
    spiceNOTDISTINCTExp.doc() = R"(NOTDISTINCT Error thrown by SPICE.)";
    auto spiceNOTENOUGHPEASExp = py::register_exception<te::SpiceNOTENOUGHPEAS>(m, "SpiceNOTENOUGHPEAS", spiceErrorExp.ptr());
    spiceNOTENOUGHPEASExp.doc() = R"(NOTENOUGHPEAS Error thrown by SPICE.)";
    auto spiceNOTIMETYPEFLAGExp = py::register_exception<te::SpiceNOTIMETYPEFLAG>(m, "SpiceNOTIMETYPEFLAG", spiceErrorExp.ptr());
    spiceNOTIMETYPEFLAGExp.doc() = R"(NOTIMETYPEFLAG Error thrown by SPICE.)";
    auto spiceNOTINDEXEDExp = py::register_exception<te::SpiceNOTINDEXED>(m, "SpiceNOTINDEXED", spiceErrorExp.ptr());
    spiceNOTINDEXEDExp.doc() = R"(NOTINDEXED Error thrown by SPICE.)";
    auto spiceNOTINITIALIZEDExp = py::register_exception<te::SpiceNOTINITIALIZED>(m, "SpiceNOTINITIALIZED", spiceErrorExp.ptr());
    spiceNOTINITIALIZEDExp.doc() = R"(NOTINITIALIZED Error thrown by SPICE.)";
    auto spiceNOTINPARTExp = py::register_exception<te::SpiceNOTINPART>(m, "SpiceNOTINPART", spiceErrorExp.ptr());
    spiceNOTINPARTExp.doc() = R"(NOTINPART Error thrown by SPICE.)";
    auto spiceNOTLEDATAFOROBJECTExp = py::register_exception<te::SpiceNOTLEDATAFOROBJECT>(m, "SpiceNOTLEDATAFOROBJECT", spiceErrorExp.ptr());
    spiceNOTLEDATAFOROBJECTExp.doc() = R"(NOTLEDATAFOROBJECT Error thrown by SPICE.)";
    auto spiceNOTLEGALCBExp = py::register_exception<te::SpiceNOTLEGALCB>(m, "SpiceNOTLEGALCB", spiceErrorExp.ptr());
    spiceNOTLEGALCBExp.doc() = R"(NOTLEGALCB Error thrown by SPICE.)";
    auto spiceNOTOTIMEExp = py::register_exception<te::SpiceNOTOTIME>(m, "SpiceNOTOTIME", spiceErrorExp.ptr());
    spiceNOTOTIMEExp.doc() = R"(NOTOTIME Error thrown by SPICE.)";
    auto spiceNOTOTIMESYSTEMExp = py::register_exception<te::SpiceNOTOTIMESYSTEM>(m, "SpiceNOTOTIMESYSTEM", spiceErrorExp.ptr());
    spiceNOTOTIMESYSTEMExp.doc() = R"(NOTOTIMESYSTEM Error thrown by SPICE.)";
    auto spiceNOTRANSLATIONExp = py::register_exception<te::SpiceNOTRANSLATION>(m, "SpiceNOTRANSLATION", spiceErrorExp.ptr());
    spiceNOTRANSLATIONExp.doc() = R"(NOTRANSLATION Error thrown by SPICE.)";
    auto spiceNOTRECOGNIZEDExp = py::register_exception<te::SpiceNOTRECOGNIZED>(m, "SpiceNOTRECOGNIZED", spiceErrorExp.ptr());
    spiceNOTRECOGNIZEDExp.doc() = R"(NOTRECOGNIZED Error thrown by SPICE.)";
    auto spiceNOTSEMCHECKEDExp = py::register_exception<te::SpiceNOTSEMCHECKED>(m, "SpiceNOTSEMCHECKED", spiceErrorExp.ptr());
    spiceNOTSEMCHECKEDExp.doc() = R"(NOTSEMCHECKED Error thrown by SPICE.)";
    auto spiceNOTSUPPORTEDExp = py::register_exception<te::SpiceNOTSUPPORTED>(m, "SpiceNOTSUPPORTED", spiceErrorExp.ptr());
    spiceNOTSUPPORTEDExp.doc() = R"(NOTSUPPORTED Error thrown by SPICE.)";
    auto spiceNOTTWOFIELDSCLKExp = py::register_exception<te::SpiceNOTTWOFIELDSCLK>(m, "SpiceNOTTWOFIELDSCLK", spiceErrorExp.ptr());
    spiceNOTTWOFIELDSCLKExp.doc() = R"(NOTTWOFIELDSCLK Error thrown by SPICE.)";
    auto spiceNOTTWOMODULIExp = py::register_exception<te::SpiceNOTTWOMODULI>(m, "SpiceNOTTWOMODULI", spiceErrorExp.ptr());
    spiceNOTTWOMODULIExp.doc() = R"(NOTTWOMODULI Error thrown by SPICE.)";
    auto spiceNOTTWOOFFSETSExp = py::register_exception<te::SpiceNOTTWOOFFSETS>(m, "SpiceNOTTWOOFFSETS", spiceErrorExp.ptr());
    spiceNOTTWOOFFSETSExp.doc() = R"(NOTTWOOFFSETS Error thrown by SPICE.)";
    auto spiceNOUNITSPECExp = py::register_exception<te::SpiceNOUNITSPEC>(m, "SpiceNOUNITSPEC", spiceErrorExp.ptr());
    spiceNOUNITSPECExp.doc() = R"(NOUNITSPEC Error thrown by SPICE.)";
    auto spiceNUMBEREXPECTEDExp = py::register_exception<te::SpiceNUMBEREXPECTED>(m, "SpiceNUMBEREXPECTED", spiceErrorExp.ptr());
    spiceNUMBEREXPECTEDExp.doc() = R"(NUMBEREXPECTED Error thrown by SPICE.)";
    auto spiceNUMCOEFFSNOTPOSExp = py::register_exception<te::SpiceNUMCOEFFSNOTPOS>(m, "SpiceNUMCOEFFSNOTPOS", spiceErrorExp.ptr());
    spiceNUMCOEFFSNOTPOSExp.doc() = R"(NUMCOEFFSNOTPOS Error thrown by SPICE.)";
    auto spiceNUMERICOVERFLOWExp = py::register_exception<te::SpiceNUMERICOVERFLOW>(m, "SpiceNUMERICOVERFLOW", spiceErrorExp.ptr());
    spiceNUMERICOVERFLOWExp.doc() = R"(NUMERICOVERFLOW Error thrown by SPICE.)";
    auto spiceNUMPACKETSNOTPOSExp = py::register_exception<te::SpiceNUMPACKETSNOTPOS>(m, "SpiceNUMPACKETSNOTPOS", spiceErrorExp.ptr());
    spiceNUMPACKETSNOTPOSExp.doc() = R"(NUMPACKETSNOTPOS Error thrown by SPICE.)";
    auto spiceNUMPARTSUNEQUALExp = py::register_exception<te::SpiceNUMPARTSUNEQUAL>(m, "SpiceNUMPARTSUNEQUAL", spiceErrorExp.ptr());
    spiceNUMPARTSUNEQUALExp.doc() = R"(NUMPARTSUNEQUAL Error thrown by SPICE.)";
    auto spiceNUMSTATESNOTPOSExp = py::register_exception<te::SpiceNUMSTATESNOTPOS>(m, "SpiceNUMSTATESNOTPOS", spiceErrorExp.ptr());
    spiceNUMSTATESNOTPOSExp.doc() = R"(NUMSTATESNOTPOS Error thrown by SPICE.)";
    auto spiceOBJECTLISTFULLExp = py::register_exception<te::SpiceOBJECTLISTFULL>(m, "SpiceOBJECTLISTFULL", spiceErrorExp.ptr());
    spiceOBJECTLISTFULLExp.doc() = R"(OBJECTLISTFULL Error thrown by SPICE.)";
    auto spiceOBJECTSTOOCLOSEExp = py::register_exception<te::SpiceOBJECTSTOOCLOSE>(m, "SpiceOBJECTSTOOCLOSE", spiceErrorExp.ptr());
    spiceOBJECTSTOOCLOSEExp.doc() = R"(OBJECTSTOOCLOSE Error thrown by SPICE.)";
    auto spiceORBITDECAYExp = py::register_exception<te::SpiceORBITDECAY>(m, "SpiceORBITDECAY", spiceErrorExp.ptr());
    spiceORBITDECAYExp.doc() = R"(ORBITDECAY Error thrown by SPICE.)";
    auto spiceOUTOFPLACEDELIMITERExp = py::register_exception<te::SpiceOUTOFPLACEDELIMITER>(m, "SpiceOUTOFPLACEDELIMITER", spiceErrorExp.ptr());
    spiceOUTOFPLACEDELIMITERExp.doc() = R"(OUTOFPLACEDELIMITER Error thrown by SPICE.)";
    auto spiceOUTOFRANGEExp = py::register_exception<te::SpiceOUTOFRANGE>(m, "SpiceOUTOFRANGE", spiceErrorExp.ptr());
    spiceOUTOFRANGEExp.doc() = R"(OUTOFRANGE Error thrown by SPICE.)";
    auto spiceOUTOFROOMExp = py::register_exception<te::SpiceOUTOFROOM>(m, "SpiceOUTOFROOM", spiceErrorExp.ptr());
    spiceOUTOFROOMExp.doc() = R"(OUTOFROOM Error thrown by SPICE.)";
    auto spiceOUTPUTFILEEXISTSExp = py::register_exception<te::SpiceOUTPUTFILEEXISTS>(m, "SpiceOUTPUTFILEEXISTS", spiceErrorExp.ptr());
    spiceOUTPUTFILEEXISTSExp.doc() = R"(OUTPUTFILEEXISTS Error thrown by SPICE.)";
    auto spiceOUTPUTISNOTSPKExp = py::register_exception<te::SpiceOUTPUTISNOTSPK>(m, "SpiceOUTPUTISNOTSPK", spiceErrorExp.ptr());
    spiceOUTPUTISNOTSPKExp.doc() = R"(OUTPUTISNOTSPK Error thrown by SPICE.)";
    auto spiceOUTPUTTOOLONGExp = py::register_exception<te::SpiceOUTPUTTOOLONG>(m, "SpiceOUTPUTTOOLONG", spiceErrorExp.ptr());
    spiceOUTPUTTOOLONGExp.doc() = R"(OUTPUTTOOLONG Error thrown by SPICE.)";
    auto spiceOUTPUTTOOSHORTExp = py::register_exception<te::SpiceOUTPUTTOOSHORT>(m, "SpiceOUTPUTTOOSHORT", spiceErrorExp.ptr());
    spiceOUTPUTTOOSHORTExp.doc() = R"(OUTPUTTOOSHORT Error thrown by SPICE.)";
    auto spicePARSERNOTREADYExp = py::register_exception<te::SpicePARSERNOTREADY>(m, "SpicePARSERNOTREADY", spiceErrorExp.ptr());
    spicePARSERNOTREADYExp.doc() = R"(PARSERNOTREADY Error thrown by SPICE.)";
    auto spicePARTIALFRAMESPECExp = py::register_exception<te::SpicePARTIALFRAMESPEC>(m, "SpicePARTIALFRAMESPEC", spiceErrorExp.ptr());
    spicePARTIALFRAMESPECExp.doc() = R"(PARTIALFRAMESPEC Error thrown by SPICE.)";
    auto spicePASTENDSTRExp = py::register_exception<te::SpicePASTENDSTR>(m, "SpicePASTENDSTR", spiceErrorExp.ptr());
    spicePASTENDSTRExp.doc() = R"(PASTENDSTR Error thrown by SPICE.)";
    auto spicePATHMISMATCHExp = py::register_exception<te::SpicePATHMISMATCH>(m, "SpicePATHMISMATCH", spiceErrorExp.ptr());
    spicePATHMISMATCHExp.doc() = R"(PATHMISMATCH Error thrown by SPICE.)";
    auto spicePATHTOOLONGExp = py::register_exception<te::SpicePATHTOOLONG>(m, "SpicePATHTOOLONG", spiceErrorExp.ptr());
    spicePATHTOOLONGExp.doc() = R"(PATHTOOLONG Error thrown by SPICE.)";
    auto spicePCKDOESNTEXISTExp = py::register_exception<te::SpicePCKDOESNTEXIST>(m, "SpicePCKDOESNTEXIST", spiceErrorExp.ptr());
    spicePCKDOESNTEXISTExp.doc() = R"(PCKDOESNTEXIST Error thrown by SPICE.)";
    auto spicePCKFILEExp = py::register_exception<te::SpicePCKFILE>(m, "SpicePCKFILE", spiceErrorExp.ptr());
    spicePCKFILEExp.doc() = R"(PCKFILE Error thrown by SPICE.)";
    auto spicePCKFILETABLEFULLExp = py::register_exception<te::SpicePCKFILETABLEFULL>(m, "SpicePCKFILETABLEFULL", spiceErrorExp.ptr());
    spicePCKFILETABLEFULLExp.doc() = R"(PCKFILETABLEFULL Error thrown by SPICE.)";
    auto spicePCKKRECTOOLARGEExp = py::register_exception<te::SpicePCKKRECTOOLARGE>(m, "SpicePCKKRECTOOLARGE", spiceErrorExp.ptr());
    spicePCKKRECTOOLARGEExp.doc() = R"(PCKKRECTOOLARGE Error thrown by SPICE.)";
    auto spicePLATELISTTOOSMALLExp = py::register_exception<te::SpicePLATELISTTOOSMALL>(m, "SpicePLATELISTTOOSMALL", spiceErrorExp.ptr());
    spicePLATELISTTOOSMALLExp.doc() = R"(PLATELISTTOOSMALL Error thrown by SPICE.)";
    auto spicePOINTEROUTOFRANGEExp = py::register_exception<te::SpicePOINTEROUTOFRANGE>(m, "SpicePOINTEROUTOFRANGE", spiceErrorExp.ptr());
    spicePOINTEROUTOFRANGEExp.doc() = R"(POINTEROUTOFRANGE Error thrown by SPICE.)";
    auto spicePOINTERSETTOOBIGExp = py::register_exception<te::SpicePOINTERSETTOOBIG>(m, "SpicePOINTERSETTOOBIG", spiceErrorExp.ptr());
    spicePOINTERSETTOOBIGExp.doc() = R"(POINTERSETTOOBIG Error thrown by SPICE.)";
    auto spicePOINTERTABLEFULLExp = py::register_exception<te::SpicePOINTERTABLEFULL>(m, "SpicePOINTERTABLEFULL", spiceErrorExp.ptr());
    spicePOINTERTABLEFULLExp.doc() = R"(POINTERTABLEFULL Error thrown by SPICE.)";
    auto spicePOINTNOTFOUNDExp = py::register_exception<te::SpicePOINTNOTFOUND>(m, "SpicePOINTNOTFOUND", spiceErrorExp.ptr());
    spicePOINTNOTFOUNDExp.doc() = R"(POINTNOTFOUND Error thrown by SPICE.)";
    auto spicePOINTNOTINSEGMENTExp = py::register_exception<te::SpicePOINTNOTINSEGMENT>(m, "SpicePOINTNOTINSEGMENT", spiceErrorExp.ptr());
    spicePOINTNOTINSEGMENTExp.doc() = R"(POINTNOTINSEGMENT Error thrown by SPICE.)";
    auto spicePOINTNOTONSURFACEExp = py::register_exception<te::SpicePOINTNOTONSURFACE>(m, "SpicePOINTNOTONSURFACE", spiceErrorExp.ptr());
    spicePOINTNOTONSURFACEExp.doc() = R"(POINTNOTONSURFACE Error thrown by SPICE.)";
    auto spicePOINTOFFSURFACEExp = py::register_exception<te::SpicePOINTOFFSURFACE>(m, "SpicePOINTOFFSURFACE", spiceErrorExp.ptr());
    spicePOINTOFFSURFACEExp.doc() = R"(POINTOFFSURFACE Error thrown by SPICE.)";
    auto spicePOINTONZAXISExp = py::register_exception<te::SpicePOINTONZAXIS>(m, "SpicePOINTONZAXIS", spiceErrorExp.ptr());
    spicePOINTONZAXISExp.doc() = R"(POINTONZAXIS Error thrown by SPICE.)";
    auto spicePOINTTOOSMALLExp = py::register_exception<te::SpicePOINTTOOSMALL>(m, "SpicePOINTTOOSMALL", spiceErrorExp.ptr());
    spicePOINTTOOSMALLExp.doc() = R"(POINTTOOSMALL Error thrown by SPICE.)";
    auto spicePTRARRAYTOOSMALLExp = py::register_exception<te::SpicePTRARRAYTOOSMALL>(m, "SpicePTRARRAYTOOSMALL", spiceErrorExp.ptr());
    spicePTRARRAYTOOSMALLExp.doc() = R"(PTRARRAYTOOSMALL Error thrown by SPICE.)";
    auto spiceQPARAMOUTOFRANGEExp = py::register_exception<te::SpiceQPARAMOUTOFRANGE>(m, "SpiceQPARAMOUTOFRANGE", spiceErrorExp.ptr());
    spiceQPARAMOUTOFRANGEExp.doc() = R"(QPARAMOUTOFRANGE Error thrown by SPICE.)";
    auto spiceQUERYFAILUREExp = py::register_exception<te::SpiceQUERYFAILURE>(m, "SpiceQUERYFAILURE", spiceErrorExp.ptr());
    spiceQUERYFAILUREExp.doc() = R"(QUERYFAILURE Error thrown by SPICE.)";
    auto spiceQUERYNOTPARSEDExp = py::register_exception<te::SpiceQUERYNOTPARSED>(m, "SpiceQUERYNOTPARSED", spiceErrorExp.ptr());
    spiceQUERYNOTPARSEDExp.doc() = R"(QUERYNOTPARSED Error thrown by SPICE.)";
    auto spiceRADIIOUTOFORDERExp = py::register_exception<te::SpiceRADIIOUTOFORDER>(m, "SpiceRADIIOUTOFORDER", spiceErrorExp.ptr());
    spiceRADIIOUTOFORDERExp.doc() = R"(RADIIOUTOFORDER Error thrown by SPICE.)";
    auto spiceRAYISZEROVECTORExp = py::register_exception<te::SpiceRAYISZEROVECTOR>(m, "SpiceRAYISZEROVECTOR", spiceErrorExp.ptr());
    spiceRAYISZEROVECTORExp.doc() = R"(RAYISZEROVECTOR Error thrown by SPICE.)";
    auto spiceREADFAILEDExp = py::register_exception<te::SpiceREADFAILED>(m, "SpiceREADFAILED", spiceErrorExp.ptr());
    spiceREADFAILEDExp.doc() = R"(READFAILED Error thrown by SPICE.)";
    auto spiceRECORDNOTFOUNDExp = py::register_exception<te::SpiceRECORDNOTFOUND>(m, "SpiceRECORDNOTFOUND", spiceErrorExp.ptr());
    spiceRECORDNOTFOUNDExp.doc() = R"(RECORDNOTFOUND Error thrown by SPICE.)";
    auto spiceRECURSIONTOODEEPExp = py::register_exception<te::SpiceRECURSIONTOODEEP>(m, "SpiceRECURSIONTOODEEP", spiceErrorExp.ptr());
    spiceRECURSIONTOODEEPExp.doc() = R"(RECURSIONTOODEEP Error thrown by SPICE.)";
    auto spiceRECURSIVELOADINGExp = py::register_exception<te::SpiceRECURSIVELOADING>(m, "SpiceRECURSIVELOADING", spiceErrorExp.ptr());
    spiceRECURSIVELOADINGExp.doc() = R"(RECURSIVELOADING Error thrown by SPICE.)";
    auto spiceREFANGLEMISSINGExp = py::register_exception<te::SpiceREFANGLEMISSING>(m, "SpiceREFANGLEMISSING", spiceErrorExp.ptr());
    spiceREFANGLEMISSINGExp.doc() = R"(REFANGLEMISSING Error thrown by SPICE.)";
    auto spiceREFVALNOTINTEGERExp = py::register_exception<te::SpiceREFVALNOTINTEGER>(m, "SpiceREFVALNOTINTEGER", spiceErrorExp.ptr());
    spiceREFVALNOTINTEGERExp.doc() = R"(REFVALNOTINTEGER Error thrown by SPICE.)";
    auto spiceREFVECTORMISSINGExp = py::register_exception<te::SpiceREFVECTORMISSING>(m, "SpiceREFVECTORMISSING", spiceErrorExp.ptr());
    spiceREFVECTORMISSINGExp.doc() = R"(REFVECTORMISSING Error thrown by SPICE.)";
    auto spiceREQUESTOUTOFBOUNDSExp = py::register_exception<te::SpiceREQUESTOUTOFBOUNDS>(m, "SpiceREQUESTOUTOFBOUNDS", spiceErrorExp.ptr());
    spiceREQUESTOUTOFBOUNDSExp.doc() = R"(REQUESTOUTOFBOUNDS Error thrown by SPICE.)";
    auto spiceREQUESTOUTOFORDERExp = py::register_exception<te::SpiceREQUESTOUTOFORDER>(m, "SpiceREQUESTOUTOFORDER", spiceErrorExp.ptr());
    spiceREQUESTOUTOFORDERExp.doc() = R"(REQUESTOUTOFORDER Error thrown by SPICE.)";
    auto spiceRWCONFLICTExp = py::register_exception<te::SpiceRWCONFLICT>(m, "SpiceRWCONFLICT", spiceErrorExp.ptr());
    spiceRWCONFLICTExp.doc() = R"(RWCONFLICT Error thrown by SPICE.)";
    auto spiceSBINSUFPTRSIZEExp = py::register_exception<te::SpiceSBINSUFPTRSIZE>(m, "SpiceSBINSUFPTRSIZE", spiceErrorExp.ptr());
    spiceSBINSUFPTRSIZEExp.doc() = R"(SBINSUFPTRSIZE Error thrown by SPICE.)";
    auto spiceSBTOOMANYSTRSExp = py::register_exception<te::SpiceSBTOOMANYSTRS>(m, "SpiceSBTOOMANYSTRS", spiceErrorExp.ptr());
    spiceSBTOOMANYSTRSExp.doc() = R"(SBTOOMANYSTRS Error thrown by SPICE.)";
    auto spiceSCLKDOESNTEXISTExp = py::register_exception<te::SpiceSCLKDOESNTEXIST>(m, "SpiceSCLKDOESNTEXIST", spiceErrorExp.ptr());
    spiceSCLKDOESNTEXISTExp.doc() = R"(SCLKDOESNTEXIST Error thrown by SPICE.)";
    auto spiceSCLKTRUNCATEDExp = py::register_exception<te::SpiceSCLKTRUNCATED>(m, "SpiceSCLKTRUNCATED", spiceErrorExp.ptr());
    spiceSCLKTRUNCATEDExp.doc() = R"(SCLKTRUNCATED Error thrown by SPICE.)";
    auto spiceSEGIDTOOLONGExp = py::register_exception<te::SpiceSEGIDTOOLONG>(m, "SpiceSEGIDTOOLONG", spiceErrorExp.ptr());
    spiceSEGIDTOOLONGExp.doc() = R"(SEGIDTOOLONG Error thrown by SPICE.)";
    auto spiceSEGMENTNOTFOUNDExp = py::register_exception<te::SpiceSEGMENTNOTFOUND>(m, "SpiceSEGMENTNOTFOUND", spiceErrorExp.ptr());
    spiceSEGMENTNOTFOUNDExp.doc() = R"(SEGMENTNOTFOUND Error thrown by SPICE.)";
    auto spiceSEGMENTTABLEFULLExp = py::register_exception<te::SpiceSEGMENTTABLEFULL>(m, "SpiceSEGMENTTABLEFULL", spiceErrorExp.ptr());
    spiceSEGMENTTABLEFULLExp.doc() = R"(SEGMENTTABLEFULL Error thrown by SPICE.)";
    auto spiceSEGTABLETOOSMALLExp = py::register_exception<te::SpiceSEGTABLETOOSMALL>(m, "SpiceSEGTABLETOOSMALL", spiceErrorExp.ptr());
    spiceSEGTABLETOOSMALLExp.doc() = R"(SEGTABLETOOSMALL Error thrown by SPICE.)";
    auto spiceSEGTYPECONFLICTExp = py::register_exception<te::SpiceSEGTYPECONFLICT>(m, "SpiceSEGTYPECONFLICT", spiceErrorExp.ptr());
    spiceSEGTYPECONFLICTExp.doc() = R"(SEGTYPECONFLICT Error thrown by SPICE.)";
    auto spiceSETEXCESSExp = py::register_exception<te::SpiceSETEXCESS>(m, "SpiceSETEXCESS", spiceErrorExp.ptr());
    spiceSETEXCESSExp.doc() = R"(SETEXCESS Error thrown by SPICE.)";
    auto spiceSETTOOSMALLExp = py::register_exception<te::SpiceSETTOOSMALL>(m, "SpiceSETTOOSMALL", spiceErrorExp.ptr());
    spiceSETTOOSMALLExp.doc() = R"(SETTOOSMALL Error thrown by SPICE.)";
    auto spiceSETUPDOESNOTEXISTExp = py::register_exception<te::SpiceSETUPDOESNOTEXIST>(m, "SpiceSETUPDOESNOTEXIST", spiceErrorExp.ptr());
    spiceSETUPDOESNOTEXISTExp.doc() = R"(SETUPDOESNOTEXIST Error thrown by SPICE.)";
    auto spiceSHAPEMISSINGExp = py::register_exception<te::SpiceSHAPEMISSING>(m, "SpiceSHAPEMISSING", spiceErrorExp.ptr());
    spiceSHAPEMISSINGExp.doc() = R"(SHAPEMISSING Error thrown by SPICE.)";
    auto spiceSHAPENOTSUPPORTEDExp = py::register_exception<te::SpiceSHAPENOTSUPPORTED>(m, "SpiceSHAPENOTSUPPORTED", spiceErrorExp.ptr());
    spiceSHAPENOTSUPPORTEDExp.doc() = R"(SHAPENOTSUPPORTED Error thrown by SPICE.)";
    auto spiceSIZEMISMATCHExp = py::register_exception<te::SpiceSIZEMISMATCH>(m, "SpiceSIZEMISMATCH", spiceErrorExp.ptr());
    spiceSIZEMISMATCHExp.doc() = R"(SIZEMISMATCH Error thrown by SPICE.)";
    auto spiceSIZEOUTOFRANGEExp = py::register_exception<te::SpiceSIZEOUTOFRANGE>(m, "SpiceSIZEOUTOFRANGE", spiceErrorExp.ptr());
    spiceSIZEOUTOFRANGEExp.doc() = R"(SIZEOUTOFRANGE Error thrown by SPICE.)";
    auto spiceSPACETOONARROWExp = py::register_exception<te::SpiceSPACETOONARROW>(m, "SpiceSPACETOONARROW", spiceErrorExp.ptr());
    spiceSPACETOONARROWExp.doc() = R"(SPACETOONARROW Error thrown by SPICE.)";
    auto spiceSPCRFLNOTCALLEDExp = py::register_exception<te::SpiceSPCRFLNOTCALLED>(m, "SpiceSPCRFLNOTCALLED", spiceErrorExp.ptr());
    spiceSPCRFLNOTCALLEDExp.doc() = R"(SPCRFLNOTCALLED Error thrown by SPICE.)";
    auto spiceSPICEISTIREDExp = py::register_exception<te::SpiceSPICEISTIRED>(m, "SpiceSPICEISTIRED", spiceErrorExp.ptr());
    spiceSPICEISTIREDExp.doc() = R"(SPICEISTIRED Error thrown by SPICE.)";
    auto spiceSPKDOESNTEXISTExp = py::register_exception<te::SpiceSPKDOESNTEXIST>(m, "SpiceSPKDOESNTEXIST", spiceErrorExp.ptr());
    spiceSPKDOESNTEXISTExp.doc() = R"(SPKDOESNTEXIST Error thrown by SPICE.)";
    auto spiceSPKFILEExp = py::register_exception<te::SpiceSPKFILE>(m, "SpiceSPKFILE", spiceErrorExp.ptr());
    spiceSPKFILEExp.doc() = R"(SPKFILE Error thrown by SPICE.)";
    auto spiceSPKFILETABLEFULLExp = py::register_exception<te::SpiceSPKFILETABLEFULL>(m, "SpiceSPKFILETABLEFULL", spiceErrorExp.ptr());
    spiceSPKFILETABLEFULLExp.doc() = R"(SPKFILETABLEFULL Error thrown by SPICE.)";
    auto spiceSPKINSUFFDATAExp = py::register_exception<te::SpiceSPKINSUFFDATA>(m, "SpiceSPKINSUFFDATA", spiceErrorExp.ptr());
    spiceSPKINSUFFDATAExp.doc() = R"(SPKINSUFFDATA Error thrown by SPICE.)";
    auto spiceSPKINVALIDOPTIONExp = py::register_exception<te::SpiceSPKINVALIDOPTION>(m, "SpiceSPKINVALIDOPTION", spiceErrorExp.ptr());
    spiceSPKINVALIDOPTIONExp.doc() = R"(SPKINVALIDOPTION Error thrown by SPICE.)";
    auto spiceSPKNOTASUBSETExp = py::register_exception<te::SpiceSPKNOTASUBSET>(m, "SpiceSPKNOTASUBSET", spiceErrorExp.ptr());
    spiceSPKNOTASUBSETExp.doc() = R"(SPKNOTASUBSET Error thrown by SPICE.)";
    auto spiceSPKRECTOOLARGEExp = py::register_exception<te::SpiceSPKRECTOOLARGE>(m, "SpiceSPKRECTOOLARGE", spiceErrorExp.ptr());
    spiceSPKRECTOOLARGEExp.doc() = R"(SPKRECTOOLARGE Error thrown by SPICE.)";
    auto spiceSPKREFNOTSUPPExp = py::register_exception<te::SpiceSPKREFNOTSUPP>(m, "SpiceSPKREFNOTSUPP", spiceErrorExp.ptr());
    spiceSPKREFNOTSUPPExp.doc() = R"(SPKREFNOTSUPP Error thrown by SPICE.)";
    auto spiceSPKSTRUCTUREERRORExp = py::register_exception<te::SpiceSPKSTRUCTUREERROR>(m, "SpiceSPKSTRUCTUREERROR", spiceErrorExp.ptr());
    spiceSPKSTRUCTUREERRORExp.doc() = R"(SPKSTRUCTUREERROR Error thrown by SPICE.)";
    auto spiceSPKTYPENOTSUPPExp = py::register_exception<te::SpiceSPKTYPENOTSUPP>(m, "SpiceSPKTYPENOTSUPP", spiceErrorExp.ptr());
    spiceSPKTYPENOTSUPPExp.doc() = R"(SPKTYPENOTSUPP Error thrown by SPICE.)";
    auto spiceSPKTYPENOTSUPPORTDExp = py::register_exception<te::SpiceSPKTYPENOTSUPPORTD>(m, "SpiceSPKTYPENOTSUPPORTD", spiceErrorExp.ptr());
    spiceSPKTYPENOTSUPPORTDExp.doc() = R"(SPKTYPENOTSUPPORTD Error thrown by SPICE.)";
    auto spiceSPURIOUSKEYWORDExp = py::register_exception<te::SpiceSPURIOUSKEYWORD>(m, "SpiceSPURIOUSKEYWORD", spiceErrorExp.ptr());
    spiceSPURIOUSKEYWORDExp.doc() = R"(SPURIOUSKEYWORD Error thrown by SPICE.)";
    auto spiceSTFULLExp = py::register_exception<te::SpiceSTFULL>(m, "SpiceSTFULL", spiceErrorExp.ptr());
    spiceSTFULLExp.doc() = R"(STFULL Error thrown by SPICE.)";
    auto spiceSTRINGTOOSHORTExp = py::register_exception<te::SpiceSTRINGTOOSHORT>(m, "SpiceSTRINGTOOSHORT", spiceErrorExp.ptr());
    spiceSTRINGTOOSHORTExp.doc() = R"(STRINGTOOSHORT Error thrown by SPICE.)";
    auto spiceSTRINGTOOSMALLExp = py::register_exception<te::SpiceSTRINGTOOSMALL>(m, "SpiceSTRINGTOOSMALL", spiceErrorExp.ptr());
    spiceSTRINGTOOSMALLExp.doc() = R"(STRINGTOOSMALL Error thrown by SPICE.)";
    auto spiceSTRINGTRUNCATEDExp = py::register_exception<te::SpiceSTRINGTRUNCATED>(m, "SpiceSTRINGTRUNCATED", spiceErrorExp.ptr());
    spiceSTRINGTRUNCATEDExp.doc() = R"(STRINGTRUNCATED Error thrown by SPICE.)";
    auto spiceSUBORBITALExp = py::register_exception<te::SpiceSUBORBITAL>(m, "SpiceSUBORBITAL", spiceErrorExp.ptr());
    spiceSUBORBITALExp.doc() = R"(SUBORBITAL Error thrown by SPICE.)";
    auto spiceSUBPOINTNOTFOUNDExp = py::register_exception<te::SpiceSUBPOINTNOTFOUND>(m, "SpiceSUBPOINTNOTFOUND", spiceErrorExp.ptr());
    spiceSUBPOINTNOTFOUNDExp.doc() = R"(SUBPOINTNOTFOUND Error thrown by SPICE.)";
    auto spiceSYNTAXERRORExp = py::register_exception<te::SpiceSYNTAXERROR>(m, "SpiceSYNTAXERROR", spiceErrorExp.ptr());
    spiceSYNTAXERRORExp.doc() = R"(SYNTAXERROR Error thrown by SPICE.)";
    auto spiceSYSTEMCALLFAILEDExp = py::register_exception<te::SpiceSYSTEMCALLFAILED>(m, "SpiceSYSTEMCALLFAILED", spiceErrorExp.ptr());
    spiceSYSTEMCALLFAILEDExp.doc() = R"(SYSTEMCALLFAILED Error thrown by SPICE.)";
    auto spiceTABLENOTLOADEDExp = py::register_exception<te::SpiceTABLENOTLOADED>(m, "SpiceTABLENOTLOADED", spiceErrorExp.ptr());
    spiceTABLENOTLOADEDExp.doc() = R"(TABLENOTLOADED Error thrown by SPICE.)";
    auto spiceTIMECONFLICTExp = py::register_exception<te::SpiceTIMECONFLICT>(m, "SpiceTIMECONFLICT", spiceErrorExp.ptr());
    spiceTIMECONFLICTExp.doc() = R"(TIMECONFLICT Error thrown by SPICE.)";
    auto spiceTIMEOUTOFBOUNDSExp = py::register_exception<te::SpiceTIMEOUTOFBOUNDS>(m, "SpiceTIMEOUTOFBOUNDS", spiceErrorExp.ptr());
    spiceTIMEOUTOFBOUNDSExp.doc() = R"(TIMEOUTOFBOUNDS Error thrown by SPICE.)";
    auto spiceTIMESDONTMATCHExp = py::register_exception<te::SpiceTIMESDONTMATCH>(m, "SpiceTIMESDONTMATCH", spiceErrorExp.ptr());
    spiceTIMESDONTMATCHExp.doc() = R"(TIMESDONTMATCH Error thrown by SPICE.)";
    auto spiceTIMESOUTOFORDERExp = py::register_exception<te::SpiceTIMESOUTOFORDER>(m, "SpiceTIMESOUTOFORDER", spiceErrorExp.ptr());
    spiceTIMESOUTOFORDERExp.doc() = R"(TIMESOUTOFORDER Error thrown by SPICE.)";
    auto spiceTIMEZONEERRORExp = py::register_exception<te::SpiceTIMEZONEERROR>(m, "SpiceTIMEZONEERROR", spiceErrorExp.ptr());
    spiceTIMEZONEERRORExp.doc() = R"(TIMEZONEERROR Error thrown by SPICE.)";
    auto spiceTOOFEWINPUTLINESExp = py::register_exception<te::SpiceTOOFEWINPUTLINES>(m, "SpiceTOOFEWINPUTLINES", spiceErrorExp.ptr());
    spiceTOOFEWINPUTLINESExp.doc() = R"(TOOFEWINPUTLINES Error thrown by SPICE.)";
    auto spiceTOOFEWPACKETSExp = py::register_exception<te::SpiceTOOFEWPACKETS>(m, "SpiceTOOFEWPACKETS", spiceErrorExp.ptr());
    spiceTOOFEWPACKETSExp.doc() = R"(TOOFEWPACKETS Error thrown by SPICE.)";
    auto spiceTOOFEWPLATESExp = py::register_exception<te::SpiceTOOFEWPLATES>(m, "SpiceTOOFEWPLATES", spiceErrorExp.ptr());
    spiceTOOFEWPLATESExp.doc() = R"(TOOFEWPLATES Error thrown by SPICE.)";
    auto spiceTOOFEWSTATESExp = py::register_exception<te::SpiceTOOFEWSTATES>(m, "SpiceTOOFEWSTATES", spiceErrorExp.ptr());
    spiceTOOFEWSTATESExp.doc() = R"(TOOFEWSTATES Error thrown by SPICE.)";
    auto spiceTOOFEWVERTICESExp = py::register_exception<te::SpiceTOOFEWVERTICES>(m, "SpiceTOOFEWVERTICES", spiceErrorExp.ptr());
    spiceTOOFEWVERTICESExp.doc() = R"(TOOFEWVERTICES Error thrown by SPICE.)";
    auto spiceTOOFEWWINDOWSExp = py::register_exception<te::SpiceTOOFEWWINDOWS>(m, "SpiceTOOFEWWINDOWS", spiceErrorExp.ptr());
    spiceTOOFEWWINDOWSExp.doc() = R"(TOOFEWWINDOWS Error thrown by SPICE.)";
    auto spiceTOOMANYBASEFRAMESExp = py::register_exception<te::SpiceTOOMANYBASEFRAMES>(m, "SpiceTOOMANYBASEFRAMES", spiceErrorExp.ptr());
    spiceTOOMANYBASEFRAMESExp.doc() = R"(TOOMANYBASEFRAMES Error thrown by SPICE.)";
    auto spiceTOOMANYFIELDSExp = py::register_exception<te::SpiceTOOMANYFIELDS>(m, "SpiceTOOMANYFIELDS", spiceErrorExp.ptr());
    spiceTOOMANYFIELDSExp.doc() = R"(TOOMANYFIELDS Error thrown by SPICE.)";
    auto spiceTOOMANYFILESOPENExp = py::register_exception<te::SpiceTOOMANYFILESOPEN>(m, "SpiceTOOMANYFILESOPEN", spiceErrorExp.ptr());
    spiceTOOMANYFILESOPENExp.doc() = R"(TOOMANYFILESOPEN Error thrown by SPICE.)";
    auto spiceTOOMANYHITSExp = py::register_exception<te::SpiceTOOMANYHITS>(m, "SpiceTOOMANYHITS", spiceErrorExp.ptr());
    spiceTOOMANYHITSExp.doc() = R"(TOOMANYHITS Error thrown by SPICE.)";
    auto spiceTOOMANYITERATIONSExp = py::register_exception<te::SpiceTOOMANYITERATIONS>(m, "SpiceTOOMANYITERATIONS", spiceErrorExp.ptr());
    spiceTOOMANYITERATIONSExp.doc() = R"(TOOMANYITERATIONS Error thrown by SPICE.)";
    auto spiceTOOMANYKEYWORDSExp = py::register_exception<te::SpiceTOOMANYKEYWORDS>(m, "SpiceTOOMANYKEYWORDS", spiceErrorExp.ptr());
    spiceTOOMANYKEYWORDSExp.doc() = R"(TOOMANYKEYWORDS Error thrown by SPICE.)";
    auto spiceTOOMANYPAIRSExp = py::register_exception<te::SpiceTOOMANYPAIRS>(m, "SpiceTOOMANYPAIRS", spiceErrorExp.ptr());
    spiceTOOMANYPAIRSExp.doc() = R"(TOOMANYPAIRS Error thrown by SPICE.)";
    auto spiceTOOMANYPARTSExp = py::register_exception<te::SpiceTOOMANYPARTS>(m, "SpiceTOOMANYPARTS", spiceErrorExp.ptr());
    spiceTOOMANYPARTSExp.doc() = R"(TOOMANYPARTS Error thrown by SPICE.)";
    auto spiceTOOMANYPEASExp = py::register_exception<te::SpiceTOOMANYPEAS>(m, "SpiceTOOMANYPEAS", spiceErrorExp.ptr());
    spiceTOOMANYPEASExp.doc() = R"(TOOMANYPEAS Error thrown by SPICE.)";
    auto spiceTOOMANYPLATESExp = py::register_exception<te::SpiceTOOMANYPLATES>(m, "SpiceTOOMANYPLATES", spiceErrorExp.ptr());
    spiceTOOMANYPLATESExp.doc() = R"(TOOMANYPLATES Error thrown by SPICE.)";
    auto spiceTOOMANYSURFACESExp = py::register_exception<te::SpiceTOOMANYSURFACES>(m, "SpiceTOOMANYSURFACES", spiceErrorExp.ptr());
    spiceTOOMANYSURFACESExp.doc() = R"(TOOMANYSURFACES Error thrown by SPICE.)";
    auto spiceTOOMANYVERTICESExp = py::register_exception<te::SpiceTOOMANYVERTICES>(m, "SpiceTOOMANYVERTICES", spiceErrorExp.ptr());
    spiceTOOMANYVERTICESExp.doc() = R"(TOOMANYVERTICES Error thrown by SPICE.)";
    auto spiceTOOMANYWATCHESExp = py::register_exception<te::SpiceTOOMANYWATCHES>(m, "SpiceTOOMANYWATCHES", spiceErrorExp.ptr());
    spiceTOOMANYWATCHESExp.doc() = R"(TOOMANYWATCHES Error thrown by SPICE.)";
    auto spiceTRANSFERFILEExp = py::register_exception<te::SpiceTRANSFERFILE>(m, "SpiceTRANSFERFILE", spiceErrorExp.ptr());
    spiceTRANSFERFILEExp.doc() = R"(TRANSFERFILE Error thrown by SPICE.)";
    auto spiceTRANSFERFORMATExp = py::register_exception<te::SpiceTRANSFERFORMAT>(m, "SpiceTRANSFERFORMAT", spiceErrorExp.ptr());
    spiceTRANSFERFORMATExp.doc() = R"(TRANSFERFORMAT Error thrown by SPICE.)";
    auto spiceTWOSCLKFILENAMESExp = py::register_exception<te::SpiceTWOSCLKFILENAMES>(m, "SpiceTWOSCLKFILENAMES", spiceErrorExp.ptr());
    spiceTWOSCLKFILENAMESExp.doc() = R"(TWOSCLKFILENAMES Error thrown by SPICE.)";
    auto spiceTYPEMISMATCHExp = py::register_exception<te::SpiceTYPEMISMATCH>(m, "SpiceTYPEMISMATCH", spiceErrorExp.ptr());
    spiceTYPEMISMATCHExp.doc() = R"(TYPEMISMATCH Error thrown by SPICE.)";
    auto spiceTYPENOTSUPPORTEDExp = py::register_exception<te::SpiceTYPENOTSUPPORTED>(m, "SpiceTYPENOTSUPPORTED", spiceErrorExp.ptr());
    spiceTYPENOTSUPPORTEDExp.doc() = R"(TYPENOTSUPPORTED Error thrown by SPICE.)";
    auto spiceTYPESMISMATCHExp = py::register_exception<te::SpiceTYPESMISMATCH>(m, "SpiceTYPESMISMATCH", spiceErrorExp.ptr());
    spiceTYPESMISMATCHExp.doc() = R"(TYPESMISMATCH Error thrown by SPICE.)";
    auto spiceUNALLOCATEDNODEExp = py::register_exception<te::SpiceUNALLOCATEDNODE>(m, "SpiceUNALLOCATEDNODE", spiceErrorExp.ptr());
    spiceUNALLOCATEDNODEExp.doc() = R"(UNALLOCATEDNODE Error thrown by SPICE.)";
    auto spiceUNBALANCEDGROUPExp = py::register_exception<te::SpiceUNBALANCEDGROUP>(m, "SpiceUNBALANCEDGROUP", spiceErrorExp.ptr());
    spiceUNBALANCEDGROUPExp.doc() = R"(UNBALANCEDGROUP Error thrown by SPICE.)";
    auto spiceUNBALANCEDPAIRExp = py::register_exception<te::SpiceUNBALANCEDPAIR>(m, "SpiceUNBALANCEDPAIR", spiceErrorExp.ptr());
    spiceUNBALANCEDPAIRExp.doc() = R"(UNBALANCEDPAIR Error thrown by SPICE.)";
    auto spiceUNDEFINEDFRAMEExp = py::register_exception<te::SpiceUNDEFINEDFRAME>(m, "SpiceUNDEFINEDFRAME", spiceErrorExp.ptr());
    spiceUNDEFINEDFRAMEExp.doc() = R"(UNDEFINEDFRAME Error thrown by SPICE.)";
    auto spiceUNEQUALTIMESTEPExp = py::register_exception<te::SpiceUNEQUALTIMESTEP>(m, "SpiceUNEQUALTIMESTEP", spiceErrorExp.ptr());
    spiceUNEQUALTIMESTEPExp.doc() = R"(UNEQUALTIMESTEP Error thrown by SPICE.)";
    auto spiceUNINITIALIZEDExp = py::register_exception<te::SpiceUNINITIALIZED>(m, "SpiceUNINITIALIZED", spiceErrorExp.ptr());
    spiceUNINITIALIZEDExp.doc() = R"(UNINITIALIZED Error thrown by SPICE.)";
    auto spiceUNINITIALIZEDHASHExp = py::register_exception<te::SpiceUNINITIALIZEDHASH>(m, "SpiceUNINITIALIZEDHASH", spiceErrorExp.ptr());
    spiceUNINITIALIZEDHASHExp.doc() = R"(UNINITIALIZEDHASH Error thrown by SPICE.)";
    auto spiceUNINITIALIZEDVALUEExp = py::register_exception<te::SpiceUNINITIALIZEDVALUE>(m, "SpiceUNINITIALIZEDVALUE", spiceErrorExp.ptr());
    spiceUNINITIALIZEDVALUEExp.doc() = R"(UNINITIALIZEDVALUE Error thrown by SPICE.)";
    auto spiceUNITSMISSINGExp = py::register_exception<te::SpiceUNITSMISSING>(m, "SpiceUNITSMISSING", spiceErrorExp.ptr());
    spiceUNITSMISSINGExp.doc() = R"(UNITSMISSING Error thrown by SPICE.)";
    auto spiceUNITSNOTRECExp = py::register_exception<te::SpiceUNITSNOTREC>(m, "SpiceUNITSNOTREC", spiceErrorExp.ptr());
    spiceUNITSNOTRECExp.doc() = R"(UNITSNOTREC Error thrown by SPICE.)";
    auto spiceUNKNONWNTIMESYSTEMExp = py::register_exception<te::SpiceUNKNONWNTIMESYSTEM>(m, "SpiceUNKNONWNTIMESYSTEM", spiceErrorExp.ptr());
    spiceUNKNONWNTIMESYSTEMExp.doc() = R"(UNKNONWNTIMESYSTEM Error thrown by SPICE.)";
    auto spiceUNKNOWNBFFExp = py::register_exception<te::SpiceUNKNOWNBFF>(m, "SpiceUNKNOWNBFF", spiceErrorExp.ptr());
    spiceUNKNOWNBFFExp.doc() = R"(UNKNOWNBFF Error thrown by SPICE.)";
    auto spiceUNKNOWNCKMETAExp = py::register_exception<te::SpiceUNKNOWNCKMETA>(m, "SpiceUNKNOWNCKMETA", spiceErrorExp.ptr());
    spiceUNKNOWNCKMETAExp.doc() = R"(UNKNOWNCKMETA Error thrown by SPICE.)";
    auto spiceUNKNOWNCOMPAREExp = py::register_exception<te::SpiceUNKNOWNCOMPARE>(m, "SpiceUNKNOWNCOMPARE", spiceErrorExp.ptr());
    spiceUNKNOWNCOMPAREExp.doc() = R"(UNKNOWNCOMPARE Error thrown by SPICE.)";
    auto spiceUNKNOWNDATATYPEExp = py::register_exception<te::SpiceUNKNOWNDATATYPE>(m, "SpiceUNKNOWNDATATYPE", spiceErrorExp.ptr());
    spiceUNKNOWNDATATYPEExp.doc() = R"(UNKNOWNDATATYPE Error thrown by SPICE.)";
    auto spiceUNKNOWNFILARCExp = py::register_exception<te::SpiceUNKNOWNFILARC>(m, "SpiceUNKNOWNFILARC", spiceErrorExp.ptr());
    spiceUNKNOWNFILARCExp.doc() = R"(UNKNOWNFILARC Error thrown by SPICE.)";
    auto spiceUNKNOWNFRAMEExp = py::register_exception<te::SpiceUNKNOWNFRAME>(m, "SpiceUNKNOWNFRAME", spiceErrorExp.ptr());
    spiceUNKNOWNFRAMEExp.doc() = R"(UNKNOWNFRAME Error thrown by SPICE.)";
    auto spiceUNKNOWNFRAMESPECExp = py::register_exception<te::SpiceUNKNOWNFRAMESPEC>(m, "SpiceUNKNOWNFRAMESPEC", spiceErrorExp.ptr());
    spiceUNKNOWNFRAMESPECExp.doc() = R"(UNKNOWNFRAMESPEC Error thrown by SPICE.)";
    auto spiceUNKNOWNFRAMETYPEExp = py::register_exception<te::SpiceUNKNOWNFRAMETYPE>(m, "SpiceUNKNOWNFRAMETYPE", spiceErrorExp.ptr());
    spiceUNKNOWNFRAMETYPEExp.doc() = R"(UNKNOWNFRAMETYPE Error thrown by SPICE.)";
    auto spiceUNKNOWNIDExp = py::register_exception<te::SpiceUNKNOWNID>(m, "SpiceUNKNOWNID", spiceErrorExp.ptr());
    spiceUNKNOWNIDExp.doc() = R"(UNKNOWNID Error thrown by SPICE.)";
    auto spiceUNKNOWNINCLUSIONExp = py::register_exception<te::SpiceUNKNOWNINCLUSION>(m, "SpiceUNKNOWNINCLUSION", spiceErrorExp.ptr());
    spiceUNKNOWNINCLUSIONExp.doc() = R"(UNKNOWNINCLUSION Error thrown by SPICE.)";
    auto spiceUNKNOWNINDEXTYPEExp = py::register_exception<te::SpiceUNKNOWNINDEXTYPE>(m, "SpiceUNKNOWNINDEXTYPE", spiceErrorExp.ptr());
    spiceUNKNOWNINDEXTYPEExp.doc() = R"(UNKNOWNINDEXTYPE Error thrown by SPICE.)";
    auto spiceUNKNOWNKERNELTYPEExp = py::register_exception<te::SpiceUNKNOWNKERNELTYPE>(m, "SpiceUNKNOWNKERNELTYPE", spiceErrorExp.ptr());
    spiceUNKNOWNKERNELTYPEExp.doc() = R"(UNKNOWNKERNELTYPE Error thrown by SPICE.)";
    auto spiceUNKNOWNKEYExp = py::register_exception<te::SpiceUNKNOWNKEY>(m, "SpiceUNKNOWNKEY", spiceErrorExp.ptr());
    spiceUNKNOWNKEYExp.doc() = R"(UNKNOWNKEY Error thrown by SPICE.)";
    auto spiceUNKNOWNMETAITEMExp = py::register_exception<te::SpiceUNKNOWNMETAITEM>(m, "SpiceUNKNOWNMETAITEM", spiceErrorExp.ptr());
    spiceUNKNOWNMETAITEMExp.doc() = R"(UNKNOWNMETAITEM Error thrown by SPICE.)";
    auto spiceUNKNOWNMODEExp = py::register_exception<te::SpiceUNKNOWNMODE>(m, "SpiceUNKNOWNMODE", spiceErrorExp.ptr());
    spiceUNKNOWNMODEExp.doc() = R"(UNKNOWNMODE Error thrown by SPICE.)";
    auto spiceUNKNOWNOPExp = py::register_exception<te::SpiceUNKNOWNOP>(m, "SpiceUNKNOWNOP", spiceErrorExp.ptr());
    spiceUNKNOWNOPExp.doc() = R"(UNKNOWNOP Error thrown by SPICE.)";
    auto spiceUNKNOWNPCKTYPEExp = py::register_exception<te::SpiceUNKNOWNPCKTYPE>(m, "SpiceUNKNOWNPCKTYPE", spiceErrorExp.ptr());
    spiceUNKNOWNPCKTYPEExp.doc() = R"(UNKNOWNPCKTYPE Error thrown by SPICE.)";
    auto spiceUNKNOWNREFDIRExp = py::register_exception<te::SpiceUNKNOWNREFDIR>(m, "SpiceUNKNOWNREFDIR", spiceErrorExp.ptr());
    spiceUNKNOWNREFDIRExp.doc() = R"(UNKNOWNREFDIR Error thrown by SPICE.)";
    auto spiceUNKNOWNSPKTYPEExp = py::register_exception<te::SpiceUNKNOWNSPKTYPE>(m, "SpiceUNKNOWNSPKTYPE", spiceErrorExp.ptr());
    spiceUNKNOWNSPKTYPEExp.doc() = R"(UNKNOWNSPKTYPE Error thrown by SPICE.)";
    auto spiceUNKNOWNSYSTEMExp = py::register_exception<te::SpiceUNKNOWNSYSTEM>(m, "SpiceUNKNOWNSYSTEM", spiceErrorExp.ptr());
    spiceUNKNOWNSYSTEMExp.doc() = R"(UNKNOWNSYSTEM Error thrown by SPICE.)";
    auto spiceUNKNOWNTYPEExp = py::register_exception<te::SpiceUNKNOWNTYPE>(m, "SpiceUNKNOWNTYPE", spiceErrorExp.ptr());
    spiceUNKNOWNTYPEExp.doc() = R"(UNKNOWNTYPE Error thrown by SPICE.)";
    auto spiceUNKNOWNUNITSExp = py::register_exception<te::SpiceUNKNOWNUNITS>(m, "SpiceUNKNOWNUNITS", spiceErrorExp.ptr());
    spiceUNKNOWNUNITSExp.doc() = R"(UNKNOWNUNITS Error thrown by SPICE.)";
    auto spiceUNMATCHENDPTSExp = py::register_exception<te::SpiceUNMATCHENDPTS>(m, "SpiceUNMATCHENDPTS", spiceErrorExp.ptr());
    spiceUNMATCHENDPTSExp.doc() = R"(UNMATCHENDPTS Error thrown by SPICE.)";
    auto spiceUNNATURALACTExp = py::register_exception<te::SpiceUNNATURALACT>(m, "SpiceUNNATURALACT", spiceErrorExp.ptr());
    spiceUNNATURALACTExp.doc() = R"(UNNATURALACT Error thrown by SPICE.)";
    auto spiceUNNATURALRELATIONExp = py::register_exception<te::SpiceUNNATURALRELATION>(m, "SpiceUNNATURALRELATION", spiceErrorExp.ptr());
    spiceUNNATURALRELATIONExp.doc() = R"(UNNATURALRELATION Error thrown by SPICE.)";
    auto spiceUNORDEREDREFSExp = py::register_exception<te::SpiceUNORDEREDREFS>(m, "SpiceUNORDEREDREFS", spiceErrorExp.ptr());
    spiceUNORDEREDREFSExp.doc() = R"(UNORDEREDREFS Error thrown by SPICE.)";
    auto spiceUNORDEREDTIMESExp = py::register_exception<te::SpiceUNORDEREDTIMES>(m, "SpiceUNORDEREDTIMES", spiceErrorExp.ptr());
    spiceUNORDEREDTIMESExp.doc() = R"(UNORDEREDTIMES Error thrown by SPICE.)";
    auto spiceUNPARSEDQUERYExp = py::register_exception<te::SpiceUNPARSEDQUERY>(m, "SpiceUNPARSEDQUERY", spiceErrorExp.ptr());
    spiceUNPARSEDQUERYExp.doc() = R"(UNPARSEDQUERY Error thrown by SPICE.)";
    auto spiceUNPARSEDTIMEExp = py::register_exception<te::SpiceUNPARSEDTIME>(m, "SpiceUNPARSEDTIME", spiceErrorExp.ptr());
    spiceUNPARSEDTIMEExp.doc() = R"(UNPARSEDTIME Error thrown by SPICE.)";
    auto spiceUNRECOGNAPPFLAGExp = py::register_exception<te::SpiceUNRECOGNAPPFLAG>(m, "SpiceUNRECOGNAPPFLAG", spiceErrorExp.ptr());
    spiceUNRECOGNAPPFLAGExp.doc() = R"(UNRECOGNAPPFLAG Error thrown by SPICE.)";
    auto spiceUNRECOGNDATATYPEExp = py::register_exception<te::SpiceUNRECOGNDATATYPE>(m, "SpiceUNRECOGNDATATYPE", spiceErrorExp.ptr());
    spiceUNRECOGNDATATYPEExp.doc() = R"(UNRECOGNDATATYPE Error thrown by SPICE.)";
    auto spiceUNRECOGNDELIMITERExp = py::register_exception<te::SpiceUNRECOGNDELIMITER>(m, "SpiceUNRECOGNDELIMITER", spiceErrorExp.ptr());
    spiceUNRECOGNDELIMITERExp.doc() = R"(UNRECOGNDELIMITER Error thrown by SPICE.)";
    auto spiceUNRECOGNIZABLEFILEExp = py::register_exception<te::SpiceUNRECOGNIZABLEFILE>(m, "SpiceUNRECOGNIZABLEFILE", spiceErrorExp.ptr());
    spiceUNRECOGNIZABLEFILEExp.doc() = R"(UNRECOGNIZABLEFILE Error thrown by SPICE.)";
    auto spiceUNRECOGNIZEDACTIONExp = py::register_exception<te::SpiceUNRECOGNIZEDACTION>(m, "SpiceUNRECOGNIZEDACTION", spiceErrorExp.ptr());
    spiceUNRECOGNIZEDACTIONExp.doc() = R"(UNRECOGNIZEDACTION Error thrown by SPICE.)";
    auto spiceUNRECOGNIZEDFORMATExp = py::register_exception<te::SpiceUNRECOGNIZEDFORMAT>(m, "SpiceUNRECOGNIZEDFORMAT", spiceErrorExp.ptr());
    spiceUNRECOGNIZEDFORMATExp.doc() = R"(UNRECOGNIZEDFORMAT Error thrown by SPICE.)";
    auto spiceUNRECOGNIZEDFRAMEExp = py::register_exception<te::SpiceUNRECOGNIZEDFRAME>(m, "SpiceUNRECOGNIZEDFRAME", spiceErrorExp.ptr());
    spiceUNRECOGNIZEDFRAMEExp.doc() = R"(UNRECOGNIZEDFRAME Error thrown by SPICE.)";
    auto spiceUNRECOGNIZEDTYPEExp = py::register_exception<te::SpiceUNRECOGNIZEDTYPE>(m, "SpiceUNRECOGNIZEDTYPE", spiceErrorExp.ptr());
    spiceUNRECOGNIZEDTYPEExp.doc() = R"(UNRECOGNIZEDTYPE Error thrown by SPICE.)";
    auto spiceUNRECOGNPRECTYPEExp = py::register_exception<te::SpiceUNRECOGNPRECTYPE>(m, "SpiceUNRECOGNPRECTYPE", spiceErrorExp.ptr());
    spiceUNRECOGNPRECTYPEExp.doc() = R"(UNRECOGNPRECTYPE Error thrown by SPICE.)";
    auto spiceUNRESOLVEDNAMESExp = py::register_exception<te::SpiceUNRESOLVEDNAMES>(m, "SpiceUNRESOLVEDNAMES", spiceErrorExp.ptr());
    spiceUNRESOLVEDNAMESExp.doc() = R"(UNRESOLVEDNAMES Error thrown by SPICE.)";
    auto spiceUNRESOLVEDTIMESExp = py::register_exception<te::SpiceUNRESOLVEDTIMES>(m, "SpiceUNRESOLVEDTIMES", spiceErrorExp.ptr());
    spiceUNRESOLVEDTIMESExp.doc() = R"(UNRESOLVEDTIMES Error thrown by SPICE.)";
    auto spiceUNSUPPORTEDARCHExp = py::register_exception<te::SpiceUNSUPPORTEDARCH>(m, "SpiceUNSUPPORTEDARCH", spiceErrorExp.ptr());
    spiceUNSUPPORTEDARCHExp.doc() = R"(UNSUPPORTEDARCH Error thrown by SPICE.)";
    auto spiceUNSUPPORTEDBFFExp = py::register_exception<te::SpiceUNSUPPORTEDBFF>(m, "SpiceUNSUPPORTEDBFF", spiceErrorExp.ptr());
    spiceUNSUPPORTEDBFFExp.doc() = R"(UNSUPPORTEDBFF Error thrown by SPICE.)";
    auto spiceUNSUPPORTEDMETHODExp = py::register_exception<te::SpiceUNSUPPORTEDMETHOD>(m, "SpiceUNSUPPORTEDMETHOD", spiceErrorExp.ptr());
    spiceUNSUPPORTEDMETHODExp.doc() = R"(UNSUPPORTEDMETHOD Error thrown by SPICE.)";
    auto spiceUNSUPPORTEDSPECExp = py::register_exception<te::SpiceUNSUPPORTEDSPEC>(m, "SpiceUNSUPPORTEDSPEC", spiceErrorExp.ptr());
    spiceUNSUPPORTEDSPECExp.doc() = R"(UNSUPPORTEDSPEC Error thrown by SPICE.)";
    auto spiceUNTITLEDHELPExp = py::register_exception<te::SpiceUNTITLEDHELP>(m, "SpiceUNTITLEDHELP", spiceErrorExp.ptr());
    spiceUNTITLEDHELPExp.doc() = R"(UNTITLEDHELP Error thrown by SPICE.)";
    auto spiceUPDATEPENDINGExp = py::register_exception<te::SpiceUPDATEPENDING>(m, "SpiceUPDATEPENDING", spiceErrorExp.ptr());
    spiceUPDATEPENDINGExp.doc() = R"(UPDATEPENDING Error thrown by SPICE.)";
    auto spiceUSAGEERRORExp = py::register_exception<te::SpiceUSAGEERROR>(m, "SpiceUSAGEERROR", spiceErrorExp.ptr());
    spiceUSAGEERRORExp.doc() = R"(USAGEERROR Error thrown by SPICE.)";
    auto spiceUTFULLExp = py::register_exception<te::SpiceUTFULL>(m, "SpiceUTFULL", spiceErrorExp.ptr());
    spiceUTFULLExp.doc() = R"(UTFULL Error thrown by SPICE.)";
    auto spiceVALUEOUTOFRANGEExp = py::register_exception<te::SpiceVALUEOUTOFRANGE>(m, "SpiceVALUEOUTOFRANGE", spiceErrorExp.ptr());
    spiceVALUEOUTOFRANGEExp.doc() = R"(VALUEOUTOFRANGE Error thrown by SPICE.)";
    auto spiceVALUETABLEFULLExp = py::register_exception<te::SpiceVALUETABLEFULL>(m, "SpiceVALUETABLEFULL", spiceErrorExp.ptr());
    spiceVALUETABLEFULLExp.doc() = R"(VALUETABLEFULL Error thrown by SPICE.)";
    auto spiceVARIABLENOTFOUNDExp = py::register_exception<te::SpiceVARIABLENOTFOUND>(m, "SpiceVARIABLENOTFOUND", spiceErrorExp.ptr());
    spiceVARIABLENOTFOUNDExp.doc() = R"(VARIABLENOTFOUND Error thrown by SPICE.)";
    auto spiceVARNAMETOOLONGExp = py::register_exception<te::SpiceVARNAMETOOLONG>(m, "SpiceVARNAMETOOLONG", spiceErrorExp.ptr());
    spiceVARNAMETOOLONGExp.doc() = R"(VARNAMETOOLONG Error thrown by SPICE.)";
    auto spiceVECTORTOOBIGExp = py::register_exception<te::SpiceVECTORTOOBIG>(m, "SpiceVECTORTOOBIG", spiceErrorExp.ptr());
    spiceVECTORTOOBIGExp.doc() = R"(VECTORTOOBIG Error thrown by SPICE.)";
    auto spiceVERSIONMISMATCHExp = py::register_exception<te::SpiceVERSIONMISMATCH>(m, "SpiceVERSIONMISMATCH", spiceErrorExp.ptr());
    spiceVERSIONMISMATCHExp.doc() = R"(VERSIONMISMATCH Error thrown by SPICE.)";
    auto spiceVERTEXNOTINGRIDExp = py::register_exception<te::SpiceVERTEXNOTINGRID>(m, "SpiceVERTEXNOTINGRID", spiceErrorExp.ptr());
    spiceVERTEXNOTINGRIDExp.doc() = R"(VERTEXNOTINGRID Error thrown by SPICE.)";
    auto spiceVOXELGRIDTOOBIGExp = py::register_exception<te::SpiceVOXELGRIDTOOBIG>(m, "SpiceVOXELGRIDTOOBIG", spiceErrorExp.ptr());
    spiceVOXELGRIDTOOBIGExp.doc() = R"(VOXELGRIDTOOBIG Error thrown by SPICE.)";
    auto spiceWIDTHTOOSMALLExp = py::register_exception<te::SpiceWIDTHTOOSMALL>(m, "SpiceWIDTHTOOSMALL", spiceErrorExp.ptr());
    spiceWIDTHTOOSMALLExp.doc() = R"(WIDTHTOOSMALL Error thrown by SPICE.)";
    auto spiceWINDOWEXCESSExp = py::register_exception<te::SpiceWINDOWEXCESS>(m, "SpiceWINDOWEXCESS", spiceErrorExp.ptr());
    spiceWINDOWEXCESSExp.doc() = R"(WINDOWEXCESS Error thrown by SPICE.)";
    auto spiceWINDOWSTOOSMALLExp = py::register_exception<te::SpiceWINDOWSTOOSMALL>(m, "SpiceWINDOWSTOOSMALL", spiceErrorExp.ptr());
    spiceWINDOWSTOOSMALLExp.doc() = R"(WINDOWSTOOSMALL Error thrown by SPICE.)";
    auto spiceWINDOWTOOSMALLExp = py::register_exception<te::SpiceWINDOWTOOSMALL>(m, "SpiceWINDOWTOOSMALL", spiceErrorExp.ptr());
    spiceWINDOWTOOSMALLExp.doc() = R"(WINDOWTOOSMALL Error thrown by SPICE.)";
    auto spiceWORKSPACETOOSMALLExp = py::register_exception<te::SpiceWORKSPACETOOSMALL>(m, "SpiceWORKSPACETOOSMALL", spiceErrorExp.ptr());
    spiceWORKSPACETOOSMALLExp.doc() = R"(WORKSPACETOOSMALL Error thrown by SPICE.)";
    auto spiceWRITEERRORExp = py::register_exception<te::SpiceWRITEERROR>(m, "SpiceWRITEERROR", spiceErrorExp.ptr());
    spiceWRITEERRORExp.doc() = R"(WRITEERROR Error thrown by SPICE.)";
    auto spiceWRITEFAILEDExp = py::register_exception<te::SpiceWRITEFAILED>(m, "SpiceWRITEFAILED", spiceErrorExp.ptr());
    spiceWRITEFAILEDExp.doc() = R"(WRITEFAILED Error thrown by SPICE.)";
    auto spiceWRONGARCHITECTUREExp = py::register_exception<te::SpiceWRONGARCHITECTURE>(m, "SpiceWRONGARCHITECTURE", spiceErrorExp.ptr());
    spiceWRONGARCHITECTUREExp.doc() = R"(WRONGARCHITECTURE Error thrown by SPICE.)";
    auto spiceWRONGCKTYPEExp = py::register_exception<te::SpiceWRONGCKTYPE>(m, "SpiceWRONGCKTYPE", spiceErrorExp.ptr());
    spiceWRONGCKTYPEExp.doc() = R"(WRONGCKTYPE Error thrown by SPICE.)";
    auto spiceWRONGCONICExp = py::register_exception<te::SpiceWRONGCONIC>(m, "SpiceWRONGCONIC", spiceErrorExp.ptr());
    spiceWRONGCONICExp.doc() = R"(WRONGCONIC Error thrown by SPICE.)";
    auto spiceWRONGDATATYPEExp = py::register_exception<te::SpiceWRONGDATATYPE>(m, "SpiceWRONGDATATYPE", spiceErrorExp.ptr());
    spiceWRONGDATATYPEExp.doc() = R"(WRONGDATATYPE Error thrown by SPICE.)";
    auto spiceWRONGSEGMENTExp = py::register_exception<te::SpiceWRONGSEGMENT>(m, "SpiceWRONGSEGMENT", spiceErrorExp.ptr());
    spiceWRONGSEGMENTExp.doc() = R"(WRONGSEGMENT Error thrown by SPICE.)";
    auto spiceWRONGSPKTYPEExp = py::register_exception<te::SpiceWRONGSPKTYPE>(m, "SpiceWRONGSPKTYPE", spiceErrorExp.ptr());
    spiceWRONGSPKTYPEExp.doc() = R"(WRONGSPKTYPE Error thrown by SPICE.)";
    auto spiceYEAROUTOFRANGEExp = py::register_exception<te::SpiceYEAROUTOFRANGE>(m, "SpiceYEAROUTOFRANGE", spiceErrorExp.ptr());
    spiceYEAROUTOFRANGEExp.doc() = R"(YEAROUTOFRANGE Error thrown by SPICE.)";
    auto spiceZEROBORESIGHTExp = py::register_exception<te::SpiceZEROBORESIGHT>(m, "SpiceZEROBORESIGHT", spiceErrorExp.ptr());
    spiceZEROBORESIGHTExp.doc() = R"(ZEROBORESIGHT Error thrown by SPICE.)";
    auto spiceZEROBOUNDSEXTENTExp = py::register_exception<te::SpiceZEROBOUNDSEXTENT>(m, "SpiceZEROBOUNDSEXTENT", spiceErrorExp.ptr());
    spiceZEROBOUNDSEXTENTExp.doc() = R"(ZEROBOUNDSEXTENT Error thrown by SPICE.)";
    auto spiceZEROFRAMEIDExp = py::register_exception<te::SpiceZEROFRAMEID>(m, "SpiceZEROFRAMEID", spiceErrorExp.ptr());
    spiceZEROFRAMEIDExp.doc() = R"(ZEROFRAMEID Error thrown by SPICE.)";
    auto spiceZEROLENGTHCOLUMNExp = py::register_exception<te::SpiceZEROLENGTHCOLUMN>(m, "SpiceZEROLENGTHCOLUMN", spiceErrorExp.ptr());
    spiceZEROLENGTHCOLUMNExp.doc() = R"(ZEROLENGTHCOLUMN Error thrown by SPICE.)";
    auto spiceZEROPOSITIONExp = py::register_exception<te::SpiceZEROPOSITION>(m, "SpiceZEROPOSITION", spiceErrorExp.ptr());
    spiceZEROPOSITIONExp.doc() = R"(ZEROPOSITION Error thrown by SPICE.)";
    auto spiceZEROQUATERNIONExp = py::register_exception<te::SpiceZEROQUATERNION>(m, "SpiceZEROQUATERNION", spiceErrorExp.ptr());
    spiceZEROQUATERNIONExp.doc() = R"(ZEROQUATERNION Error thrown by SPICE.)";
    auto spiceZEROSTEPExp = py::register_exception<te::SpiceZEROSTEP>(m, "SpiceZEROSTEP", spiceErrorExp.ptr());
    spiceZEROSTEPExp.doc() = R"(ZEROSTEP Error thrown by SPICE.)";
    auto spiceZEROVECTORExp = py::register_exception<te::SpiceZEROVECTOR>(m, "SpiceZEROVECTOR", spiceErrorExp.ptr());
    spiceZEROVECTORExp.doc() = R"(ZEROVECTOR Error thrown by SPICE.)";
    auto spiceZEROVELOCITYExp = py::register_exception<te::SpiceZEROVELOCITY>(m, "SpiceZEROVELOCITY", spiceErrorExp.ptr());
    spiceZEROVELOCITYExp.doc() = R"(ZEROVELOCITY Error thrown by SPICE.)";
    auto spiceZZHOLDDGETFAILEDExp = py::register_exception<te::SpiceZZHOLDDGETFAILED>(m, "SpiceZZHOLDDGETFAILED", spiceErrorExp.ptr());
    spiceZZHOLDDGETFAILEDExp.doc() = R"(ZZHOLDDGETFAILED Error thrown by SPICE.)";


}

}  // namespace exceptions
}  // namespace tudatpy
